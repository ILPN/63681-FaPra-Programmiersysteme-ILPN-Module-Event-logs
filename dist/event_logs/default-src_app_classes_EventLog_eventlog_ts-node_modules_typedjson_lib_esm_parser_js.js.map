{"version":3,"file":"default-src_app_classes_EventLog_eventlog_ts-node_modules_typedjson_lib_esm_parser_js.js","mappings":";;;;;;;;;;;;;;;;;;;;AAA0B;AAC0C;AAGpE,IAAa,UAAU,GAAvB,MAAa,UAAU;IAmBnB,YAAY,IAAY,EAAE,IAAmB;QACzC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAhBD,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IACD,IAAW,IAAI,CAAC,KAAa;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IACD,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IACD,IAAW,IAAI,CAAC,KAAoB;QAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;CAMJ;AArBG;IADC,qDAAU,CAAC,MAAM,CAAC;;yCACG;AAEtB;IADC,0DAAe,CAAC,MAAM,CAAC;qEACT,KAAK;yCAAS;AAJpB,UAAU;IADtB,iDAAU;oFAoByB,KAAK;GAnB5B,UAAU,CAuBtB;AAvBsB;;;;;;;;;;;;;;;;;;;;;;;;ACGM;AACH;AAC0C;AAWpE,IAAa,KAAK,GAAlB,MAAa,KAAK;IA2Bd,YAAY,UAAoC,EAAE,QAAgB;QAC9D,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAxBD,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IACD,IAAW,UAAU,CAAC,KAA+B;QACjD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,IAAW,QAAQ,CAAC,KAAa;QAC7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC3B,CAAC;IAEM,YAAY,CAAC,GAAW;QAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAC1B,SAAS,CAAC,EAAE,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,CAChD,CAAC,CAAC,CAAC,CAAC;IACT,CAAC;CAMJ;AA7BG;IADC,0DAAe,CAAC,iEAAiB,CAAC;qEACd,KAAK;0CAAoB;AAE9C;IADC,qDAAU,CAAC,MAAM,CAAC;;wCACO;AAJjB,KAAK;IATjB,qDAAU,CAAC;QACR,UAAU,EAAE;YACR,+DAAe;YACf,6DAAa;YACb,4DAAY;YACZ,8DAAc;YACd,gEAAgB;SACnB;KACJ,CAAC;4EA4B0B,KAAK;GA3BpB,KAAK,CA+BjB;AA/BiB;;;;;;;;;;;;;;;;;;;;;;;;;ACbW;AACa;AACV;AACN;AAC8B;AAWxD,IAAa,QAAQ,GAArB,MAAa,QAAQ;IA+EjB,YACI,WAA8B,EAC9B,qBAA+C,EAC/C,qBAA+C,EAC/C,MAAoB,EACpB,UAAoC;QAEpC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;QACpD,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;QACpD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IA/ED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IACD,IAAW,WAAW,CAAC,KAAwB;QAC3C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,sBAAsB,CAAC;IACvC,CAAC;IACD,IAAW,qBAAqB,CAAC,KAA+B;QAC5D,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;IACxC,CAAC;IAED,IAAW,qBAAqB;QAC5B,OAAO,IAAI,CAAC,sBAAsB,CAAC;IACvC,CAAC;IACD,IAAW,qBAAqB,CAAC,KAA+B;QAC5D,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;IACxC,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IACD,IAAW,UAAU,CAAC,KAA+B;QACjD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED,IAAW,MAAM,CAAC,KAAmB;QACjC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,IAAW,YAAY;QACnB,IAAI,MAAM,GAAG,IAAI,KAAK,EAAgB,CAAC;QAEvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC3C,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE;wBAC9C,OAAO,KAAK,CAAC;qBAChB;oBACD,IACI,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EACxD;wBACE,OAAO,KAAK,CAAC;qBAChB;iBACJ;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC;YACH,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;gBACb,IAAI,GAAG,GAAG,IAAI,KAAK,EAAS,CAAC;gBAC7B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpB;iBAAM;gBACH,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,gEAAgE;aAC9F;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACjB,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QAC/B,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAClB,CAAC;CAeJ;AA1FG;IADC,0DAAe,CAAC,mDAAU,CAAC;qEACN,KAAK;8CAAa;AAExC;IADC,0DAAe,CAAC,iEAAiB,CAAC;qEACH,KAAK;wDAAoB;AAEzD;IADC,0DAAe,CAAC,iEAAiB,CAAC;qEACH,KAAK;wDAAoB;AAEzD;IADC,0DAAe,CAAC,iEAAiB,CAAC;qEACd,KAAK;6CAAoB;AAE9C;IADC,0DAAe,CAAC,yCAAK,CAAC;qEACN,KAAK;yCAAQ;AAVrB,QAAQ;IATpB,qDAAU,CAAC;QACR,UAAU,EAAE;YACR,+DAAe;YACf,6DAAa;YACb,4DAAY;YACZ,8DAAc;YACd,gEAAgB;SACnB;KACJ,CAAC;4EAiFmB,KAAK;QACK,KAAK;QACL,KAAK;QACpB,KAAK;QACD,KAAK;GApFZ,QAAQ,CA4FpB;AA5FoB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBK;AACyB;AAE5C,MAAe,iBAAiB;IAAvC;QAEI,QAAG,GAAW,EAAE,CAAC;IAErB,CAAC;CAAA;AAFG;IADC,qDAAU,CAAC,MAAM,CAAC;;8CACF;AAKrB,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,iBAAiB;IAIlD,YAAY,KAAa,EAAE,GAAW;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;CACJ;AAPG;IADC,qDAAU,CAAC,MAAM,CAAC;;8CACL;AAFL,eAAe;IAD3B,iDAAU;;GACE,eAAe,CAS3B;AAT2B;AAY5B,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,iBAAiB;IAIhD,YAAY,KAAW,EAAE,GAAW;QAChC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;CACJ;AAPG;IADC,qDAAU,CAAC,IAAI,CAAC;qEACV,IAAI;4CAAC;AAFH,aAAa;IADzB,iDAAU;4EAKY,IAAI;GAJd,aAAa,CASzB;AATyB;AAY1B,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,iBAAiB;IAI/C,YAAY,KAAa,EAAE,GAAW;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;CACJ;AAPG;IADC,qDAAU,CAAC,MAAM,CAAC;;2CACL;AAFL,YAAY;IADxB,iDAAU;;GACE,YAAY,CASxB;AATwB;AAYzB,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,iBAAiB;IAIjD,YAAY,KAAa,EAAE,GAAW;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;CACJ;AAPG;IADC,qDAAU,CAAC,MAAM,CAAC;;6CACL;AAFL,cAAc;IAD1B,iDAAU;;GACE,cAAc,CAS1B;AAT0B;AAY3B,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,iBAAiB;IAInD,YAAY,KAAc,EAAE,GAAW;QACnC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;CACJ;AAPG;IADC,qDAAU,CAAC,OAAO,CAAC;;+CACL;AAFN,gBAAgB;IAD5B,iDAAU;;GACE,gBAAgB,CAS5B;AAT4B;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACG;AACN;AAC0C;AAWpE,IAAa,KAAK,GAAlB,MAAa,KAAK;IA6Bd,YACI,UAAoC,EACpC,MAAoB,EACpB,MAAc;QAEd,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IA7BD,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IACD,IAAW,UAAU,CAAC,KAA+B;QACjD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IACD,IAAW,MAAM,CAAC,KAAmB;QACjC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IACD,IAAW,MAAM,CAAC,KAAa;QAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;CAWJ;AApCG;IADC,0DAAe,CAAC,iEAAiB,CAAC;qEACd,KAAK;0CAAoB;AAE9C;IADC,0DAAe,CAAC,yCAAK,CAAC;qEACN,KAAK;sCAAQ;AAE9B;IADC,qDAAU,CAAC,MAAM,CAAC;;sCACK;AANf,KAAK;IATjB,qDAAU,CAAC;QACR,UAAU,EAAE;YACR,+DAAe;YACf,6DAAa;YACb,4DAAY;YACZ,8DAAc;YACd,gEAAgB;SACnB;KACJ,CAAC;4EA+BkB,KAAK;QACT,KAAK;GA/BR,KAAK,CAsCjB;AAtCiB;;;;;;;;;;;ACrBlB;AACA;AACA,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,8BAA8B,gBAAgB,kBAAkB;AAChE;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,oCAAoC,wBAAwB,iBAAiB;AAC7E,oCAAoC,wBAAwB,IAAI;AAChE;AACA,wCAAwC;AACxC,wCAAwC,oBAAoB;AAC5D;AACA,wCAAwC;AACxC,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wGAAwG;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtwEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,0BAA0B;AACluCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA,iBAAiB;AACjB,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,qDAAqD;AACrD,sDAAsD;AACtD,4DAA4D;AAC5D,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA,iBAAiB;AACjB,uDAAuD;AACvD,uDAAuD;AACvD,0DAA0D;AAC1D,oDAAoD;AACpD,mDAAmD;AACnD,qDAAqD;AACrD,sDAAsD;AACtD,4DAA4D;AAC5D,8DAA8D;AAC9D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yBAAyB;AACtF;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;;;AC1mCyD;AACpC;AACc;AACqF;AAC5I;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA,4BAA4B,8CAAQ;AACpC;AACA,aAAa,uDAAS,EAAE,8CAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,WAAW,GAAG;AAC5D;AACA,0BAA0B,yBAAyB;AACnD;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4EAAqC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,6DAAc,iBAAiB,2DAAY;AAC1D;AACA;AACA;AACA,iDAAiD,YAAY,KAAK,WAAW;AAC7E,uBAAuB,mBAAmB,QAAQ,iBAAiB;AACnE;AACA;AACA;AACA,UAAU,gDAAM;AAChB;AACA,8DAA8D,gDAAM;AACpE,oCAAoC,WAAW,cAAc,iBAAiB;AAC9E,mBAAmB,eAAe;AAClC;AACA;AACA,gDAAgD,gDAAM;AACtD;AACA;AACA;AACA,iDAAiD,gDAAM;AACvD;AACA;AACA;AACA;AACA;AACA,2EAA2E,WAAW;AACtF;AACA;AACA;AACA,+BAA+B,4EAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA,mCAAmC,4EAAqC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAY;AACzC;AACA;AACA,0CAA0C,gDAAM,2BAA2B,GAAG,QAAQ;AACtF,qCAAqC,2DAAY;AACjD;AACA;AACA;AACA,8EAA8E,sEAAoB;AAClG,iBAAiB;AACjB;AACA;AACA,0DAA0D,oBAAoB;AAC9E;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,yFAAyF,mBAAmB;AAC5G;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA,oCAAoC,gDAAM,iCAAiC;AAC3E;AACA;AACA,8DAA8D,WAAW;AACzE,qDAAqD,gDAAM,2BAA2B;AACtF,oCAAoC,gDAAM,iCAAiC;AAC3E,oCAAoC,gDAAM,2BAA2B;AACrE,+BAA+B,gDAAM,iCAAiC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAM,iCAAiC,GAAG,WAAW;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,oEAAsB;AACzH,SAAS;AACT;AACA;AACA;AACA;AACA,oCAAoC,iEAAmB;AACvD,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,YAAY;AAC1F;AACA;AACA;AACA;AACA;AACA,uGAAuG,WAAW,GAAG,EAAE;AACvH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,oCAAoC,+DAAiB;AACrD,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,YAAY;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,WAAW,GAAG,EAAE;AAC9H;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+DAAiB;AACrD,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,YAAY;AAC1F;AACA;AACA;AACA,8EAA8E,YAAY;AAC1F;AACA;AACA,6BAA6B,WAAW;AACxC,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,YAAY;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1YyC;AAClC;AACP;AACO;AACP;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACO;AACP;AACA;AACO;AACP,wBAAwB,uDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;ACpGmG;AAC3C;AACL;AAC6C;AACzF,qDAAqD;AAC5D;AACA;AACA,qDAAqD,gDAAM,qBAAqB,GAAG,gBAAgB;AACnG,0BAA0B,iEAAe;AACzC;AACA;AACA,YAAY,kDAAQ,IAAI,cAAc;AACtC;AACA;AACA,8BAA8B,gEAA0B;AACxD;AACA;AACA;AACA,YAAY,kDAAQ,IAAI,cAAc,8BAA8B,8DAAwB,CAAC;AAC7F;AACA;AACA,QAAQ,oEAAyB;AACjC,wCAAwC,sEAAoB;AAC5D;AACA;AACA,qBAAqB,gEAAiB;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACO;AACP,mBAAmB,iEAAmB;AACtC,oBAAoB,gBAAgB;AACpC,mBAAmB,iEAAmB;AACtC;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvCoK;AAC5G;AACL;AAC4H;AACxK;AACP;AACA;AACA;AACA,gDAAgD,gDAAM,wBAAwB,GAAG,iBAAiB;AAClG,aAAa,gEAA0B;AACvC,YAAY,kDAAQ,IAAI,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAQ,IAAI,cAAc;AACtC;AACA,KAAK,2DAAqB;AAC1B,KAAK,8DAAwB,CAAC;AAC9B;AACA;AACA,+BAA+B,sEAAoB;AACnD;AACA;AACA;AACA,QAAQ,oEAAyB;AACjC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gDAAM,qBAAqB,GAAG,iBAAiB;AAC/F;AACA,YAAY,4DAAU,mBAAmB,6DAAW;AACpD,wBAAwB,iEAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAc;AAC/B,gBAAgB,kDAAQ,IAAI,cAAc;AAC1C,WAAW,2DAAqB,CAAC;AACjC;AACA;AACA,sCAAsC,sEAAoB;AAC1D;AACA,gBAAgB,gEAA0B,KAAK,qDAAW;AAC1D,gBAAgB,oDAAU,IAAI,cAAc;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB,gEAA0B;AAC3C;AACA;AACA,gBAAgB,kDAAQ,IAAI,cAAc;AAC1C,WAAW,2DAAqB,CAAC;AACjC;AACA;AACA,8BAA8B,sEAAoB;AAClD;AACA;AACA,YAAY,kDAAQ,IAAI,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAyB;AACjC;AACA;AACA,wBAAwB,sEAAoB;AAC5C;AACA;AACA,qBAAqB,gEAAiB;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,4DAAc;AACzC;AACA;AACA,oCAAoC,iEAAmB;AACvD;AACA,QAAQ,kDAAQ,IAAI,cAAc;AAClC;AACA;AACA;AACA,oCAAoC,+DAAiB;AACrD,QAAQ,kDAAQ,IAAI,cAAc;AAClC;AACA;AACA;AACA,oCAAoC,+DAAiB;AACrD,QAAQ,kDAAQ,IAAI,cAAc;AAClC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACrHgD;AACG;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kFAA2C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzCiG;AAC1F;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gDAAM,SAAS,gDAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wCAAwC,gDAAM,gBAAgB,gDAAM;AACpE;AACA;AACA,eAAe,0EAAgC,UAAU,0DAAgB;AACzE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,4CAA4C,gDAAM,wBAAwB,GAAG,gBAAgB;AAC7F;AACA,QAAQ,kDAAQ,IAAI,cAAc;AAClC;AACA;AACA;AACA,QAAQ,kDAAQ,IAAI,cAAc;AAClC;AACA;AACA;AACA;AACA,QAAQ,kDAAQ,IAAI,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,wCAAwC;AACxC;;;;;;;;;;;;;;;;;;;;;;;;;AC7BmE;AACO;AACpB;AACL;AACE;AACW;AACO;AAClB;AAC5C;AACP;AACA,8BAA8B,mDAAU;AACxC,gCAAgC,uDAAY;AAC5C;AACA;AACA,6BAA6B,4EAAqC;AAClE;AACA;AACA;AACA;AACA,sCAAsC,gDAAM;AAC5C;AACA,uCAAuC,kDAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,wBAAwB,gEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oDAAU;AAC9B,uCAAuC,EAAE;AACzC;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAe;AACpC;AACA;AACA,gEAAgE,sEAAoB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAe;AACpC,0DAA0D,mEAAe,CAAC,sEAAoB;AAC9F;AACA;AACA,qBAAqB,yDAAe;AACpC,0DAA0D,sDAAI;AAC9D;AACA;AACA,qBAAqB,yDAAe;AACpC,0DAA0D,sDAAI;AAC9D;AACA;AACA;AACA,8DAA8D,sEAAoB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,mEAAe,CAAC,sEAAoB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sDAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,sDAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4EAAqC;AAClE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,sEAAoB;AACnG,aAAa;AACb;AACA;AACA;AACA,6EAA6E,sEAAoB;AACjG,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC5NsF;AACtC;AACc;AAC6D;AACpH;AACP;AACA;AACA,sKAAsK,gDAAM;AAC5K;AACA;AACO;AACP;AACA;AACA,4BAA4B,8CAAQ;AACpC;AACA,aAAa,uDAAS,EAAE,8CAAQ;AAChC,mBAAmB,8CAAQ;AAC3B,qBAAqB,8CAAQ;AAC7B,qBAAqB,8CAAQ;AAC7B,sBAAsB,8CAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAc,iBAAiB,2DAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAc;AAC3B;AACA;AACA,aAAa,sDAAY;AACzB,iCAAiC,gDAAM;AACvC,+BAA+B,gDAAM;AACrC,oEAAoE,WAAW,eAAe,aAAa;AAC3G,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,WAAW,GAAG;AAC1D;AACA,0BAA0B,yBAAyB;AACnD;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4EAAqC;AAClE;AACA;AACA,6BAA6B,4EAAqC;AAClE;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAM,+BAA+B,GAAG,8BAA8B;AAC/F;AACA;AACA;AACA;AACA;AACA,6BAA6B,2DAAY;AACzC;AACA;AACA;AACA;AACA,qCAAqC,2DAAY;AACjD;AACA;AACA;AACA,4EAA4E,sEAAoB;AAChG,iBAAiB;AACjB;AACA;AACA,2DAA2D,uBAAuB;AAClF;AACA;AACA;AACA,6HAA6H,gDAAM,uBAAuB,GAAG,sBAAsB;AACnL;AACA;AACA,mBAAmB,wDAAc;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,iEAAmB;AACvD,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA,gBAAgB,sDAAY;AAC5B,qCAAqC,gDAAM;AAC3C,8CAA8C,gDAAM;AACpD,uDAAuD,WAAW,GAAG,EAAE;AACvE,gCAAgC,iBAAiB,UAAU,eAAe;AAC1E;AACA,KAAK;AACL;AACA,qFAAqF,WAAW,GAAG,EAAE;AACrG,KAAK;AACL;AACA;AACA,oCAAoC,+DAAiB;AACrD,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA,aAAa,wDAAc,aAAa,wDAAc;AACtD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oCAAoC,+DAAiB;AACrD,mDAAmD,YAAY;AAC/D;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA,6BAA6B,WAAW;AACxC,+BAA+B,WAAW;AAC1C;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wDAAc;AACzC;AACA,eAAe,wDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvOkD;AAC3C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACA;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA,4CAA4C,cAAc,IAAI,2DAAqB,CAAC;AACpF;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB,sCAAsC,kBAAkB;AACnF,0BAA0B;AAC1B;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACO;AACP;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACO;AACP,oCAAoC;AACpC;AACA;AACO;AACP;AACA;AACA;AACO;AACP,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACO;AACP,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA;AACO;AACP;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACO;AACP,6BAA6B,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACO;AACP,kDAAkD,QAAQ;AAC1D,yCAAyC,QAAQ;AACjD,yDAAyD,QAAQ;AACjE;AACA;AACA;AACA;AACO;AACP,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA,iBAAiB,uFAAuF,cAAc;AACtH,uBAAuB,gCAAgC,qCAAqC,2CAA2C;AACvI,4BAA4B,MAAM,iBAAiB,YAAY;AAC/D,uBAAuB;AACvB,8BAA8B;AAC9B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACA;AACO;AACP;AACA,iBAAiB,6CAA6C,UAAU,sDAAsD,cAAc;AAC5I,0BAA0B,6BAA6B,oBAAoB,gDAAgD,kBAAkB;AAC7I;AACA;AACO;AACP;AACA;AACA,2GAA2G,uFAAuF,cAAc;AAChN,uBAAuB,8BAA8B,gDAAgD,wDAAwD;AAC7J,6CAA6C,sCAAsC,UAAU,mBAAmB,IAAI;AACpH;AACA;AACO;AACP,iCAAiC,uCAAuC,YAAY,KAAK,OAAO;AAChG;AACA;AACA;AACA;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,6CAA6C;AAC7C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA","sources":["./src/app/classes/EventLog/classifier.ts","./src/app/classes/EventLog/event.ts","./src/app/classes/EventLog/eventlog.ts","./src/app/classes/EventLog/eventlogattribute.ts","./src/app/classes/EventLog/trace.ts","./node_modules/reflect-metadata/Reflect.js","./node_modules/typedjson/lib/esm/deserializer.js","./node_modules/typedjson/lib/esm/helpers.js","./node_modules/typedjson/lib/esm/json-array-member.js","./node_modules/typedjson/lib/esm/json-member.js","./node_modules/typedjson/lib/esm/json-object.js","./node_modules/typedjson/lib/esm/metadata.js","./node_modules/typedjson/lib/esm/options-base.js","./node_modules/typedjson/lib/esm/parser.js","./node_modules/typedjson/lib/esm/serializer.js","./node_modules/typedjson/lib/esm/type-descriptor.js","./node_modules/tslib/tslib.es6.js"],"sourcesContent":["import 'reflect-metadata';\r\nimport { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject\r\nexport class Classifier {\r\n    @jsonMember(String)\r\n    private _name: string;\r\n    @jsonArrayMember(String)\r\n    private _keys: Array<string>;\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n    public set name(value: string) {\r\n        this._name = value;\r\n    }\r\n    public get keys(): Array<string> {\r\n        return this._keys;\r\n    }\r\n    public set keys(value: Array<string>) {\r\n        this._keys = value;\r\n    }\r\n\r\n    constructor(name: string, keys: Array<string>) {\r\n        this._name = name;\r\n        this._keys = keys;\r\n    }\r\n}\r\n","import {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from './eventlogattribute';\r\nimport 'reflect-metadata';\r\nimport { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject({\r\n    knownTypes: [\r\n        StringAttribute,\r\n        DateAttribute,\r\n        IntAttribute,\r\n        FloatAttribute,\r\n        BooleanAttribute,\r\n    ],\r\n})\r\nexport class Event {\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _attributes: Array<EventLogAttribute>;\r\n    @jsonMember(String)\r\n    private _activity: string;\r\n\r\n    public get attributes(): Array<EventLogAttribute> {\r\n        return this._attributes;\r\n    }\r\n    public set attributes(value: Array<EventLogAttribute>) {\r\n        this._attributes = value;\r\n    }\r\n\r\n    public get activity(): string {\r\n        return this._activity;\r\n    }\r\n\r\n    public set activity(value: string) {\r\n        this._activity = value;\r\n    }\r\n\r\n    public getAttribute(key: string): EventLogAttribute {\r\n        return this._attributes.filter(\r\n            attribute => key === attribute.key.toString()\r\n        )[0];\r\n    }\r\n\r\n    constructor(attributes: Array<EventLogAttribute>, activity: string) {\r\n        this._activity = activity;\r\n        this._attributes = attributes;\r\n    }\r\n}\r\n","import {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from './eventlogattribute';\r\nimport { Classifier } from './classifier';\r\nimport { Trace } from './trace';\r\nimport 'reflect-metadata';\r\nimport { jsonObject, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject({\r\n    knownTypes: [\r\n        StringAttribute,\r\n        DateAttribute,\r\n        IntAttribute,\r\n        FloatAttribute,\r\n        BooleanAttribute,\r\n    ],\r\n})\r\nexport class EventLog {\r\n    @jsonArrayMember(Classifier)\r\n    private _classifiers: Array<Classifier>;\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _globalEventAttributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _globalTraceAttributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _attributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(Trace)\r\n    private _traces: Array<Trace>;\r\n\r\n    public get classifiers(): Array<Classifier> {\r\n        return this._classifiers;\r\n    }\r\n    public set classifiers(value: Array<Classifier>) {\r\n        this._classifiers = value;\r\n    }\r\n\r\n    public get globalEventAttributes(): Array<EventLogAttribute> {\r\n        return this._globalEventAttributes;\r\n    }\r\n    public set globalEventAttributes(value: Array<EventLogAttribute>) {\r\n        this._globalEventAttributes = value;\r\n    }\r\n\r\n    public get globalTraceAttributes(): Array<EventLogAttribute> {\r\n        return this._globalTraceAttributes;\r\n    }\r\n    public set globalTraceAttributes(value: Array<EventLogAttribute>) {\r\n        this._globalTraceAttributes = value;\r\n    }\r\n\r\n    public get attributes(): Array<EventLogAttribute> {\r\n        return this._attributes;\r\n    }\r\n    public set attributes(value: Array<EventLogAttribute>) {\r\n        this._attributes = value;\r\n    }\r\n\r\n    public get traces(): Array<Trace> {\r\n        return this._traces;\r\n    }\r\n\r\n    public set traces(value: Array<Trace>) {\r\n        this._traces = value;\r\n    }\r\n\r\n    public get sortedTraces(): Array<Array<Trace>> {\r\n        let result = new Array<Array<Trace>>();\r\n\r\n        this._traces.forEach(trace => {\r\n            const index = result.findIndex(val => {\r\n                for (let i = 0; i < val[0].events.length; i++) {\r\n                    if (val[0].events.length !== trace.events.length) {\r\n                        return false;\r\n                    }\r\n                    if (\r\n                        val[0].events[i].activity !== trace.events[i].activity\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            if (index == -1) {\r\n                let arr = new Array<Trace>();\r\n                arr.push(trace);\r\n                result.push(arr);\r\n            } else {\r\n                result[index].push(trace); // Trace zu den anderen hinzufügen die die gleichen Events haben\r\n            }\r\n        });\r\n        result.sort((a, b) => {\r\n            return b.length - a.length;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    constructor(\r\n        classifiers: Array<Classifier>,\r\n        globalEventAttributes: Array<EventLogAttribute>,\r\n        globalTraceAttributes: Array<EventLogAttribute>,\r\n        traces: Array<Trace>,\r\n        attributes: Array<EventLogAttribute>\r\n    ) {\r\n        this._classifiers = classifiers;\r\n        this._globalEventAttributes = globalEventAttributes;\r\n        this._globalTraceAttributes = globalTraceAttributes;\r\n        this._attributes = attributes;\r\n        this._traces = traces;\r\n    }\r\n}\r\n","import 'reflect-metadata';\r\nimport { jsonObject, jsonMember } from 'typedjson';\r\n\r\nexport abstract class EventLogAttribute {\r\n    @jsonMember(String)\r\n    key: string = '';\r\n    abstract value: any;\r\n}\r\n\r\n@jsonObject\r\nexport class StringAttribute extends EventLogAttribute {\r\n    @jsonMember(String)\r\n    value: string;\r\n\r\n    constructor(value: string, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class DateAttribute extends EventLogAttribute {\r\n    @jsonMember(Date)\r\n    value: Date;\r\n\r\n    constructor(value: Date, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class IntAttribute extends EventLogAttribute {\r\n    @jsonMember(Number)\r\n    value: number;\r\n\r\n    constructor(value: number, key: string) {\r\n        super();\r\n        this.value = Math.round(value);\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class FloatAttribute extends EventLogAttribute {\r\n    @jsonMember(Number)\r\n    value: number;\r\n\r\n    constructor(value: number, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class BooleanAttribute extends EventLogAttribute {\r\n    @jsonMember(Boolean)\r\n    value: boolean;\r\n\r\n    constructor(value: boolean, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n","import {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from './eventlogattribute';\r\nimport { Event } from './event';\r\nimport 'reflect-metadata';\r\nimport { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject({\r\n    knownTypes: [\r\n        StringAttribute,\r\n        DateAttribute,\r\n        IntAttribute,\r\n        FloatAttribute,\r\n        BooleanAttribute,\r\n    ],\r\n})\r\nexport class Trace {\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _attributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(Event)\r\n    private _events: Array<Event>;\r\n    @jsonMember(Number)\r\n    private _caseId: number;\r\n\r\n    public get attributes(): Array<EventLogAttribute> {\r\n        return this._attributes;\r\n    }\r\n    public set attributes(value: Array<EventLogAttribute>) {\r\n        this._attributes = value;\r\n    }\r\n\r\n    public get events(): Array<Event> {\r\n        return this._events;\r\n    }\r\n    public set events(value: Array<Event>) {\r\n        this._events = value;\r\n    }\r\n\r\n    public get caseId(): number {\r\n        return this._caseId;\r\n    }\r\n    public set caseId(value: number) {\r\n        this._caseId = value;\r\n    }\r\n\r\n    constructor(\r\n        attributes: Array<EventLogAttribute>,\r\n        events: Array<Event>,\r\n        caseId: number\r\n    ) {\r\n        this._attributes = attributes;\r\n        this._events = events;\r\n        this._caseId = caseId;\r\n    }\r\n}\r\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import { identity, isSubtypeOf, isValueDefined, logError, nameof } from './helpers';\nimport { JsonObjectMetadata } from './metadata';\nimport { getOptionValue, mergeOptions } from './options-base';\nimport { AnyT, ArrayTypeDescriptor, ConcreteTypeDescriptor, ensureTypeDescriptor, MapTypeDescriptor, SetTypeDescriptor, } from './type-descriptor';\nexport function defaultTypeResolver(sourceObject, knownTypes) {\n    if (sourceObject.__type != null) {\n        return knownTypes.get(sourceObject.__type);\n    }\n}\nexport class Deserializer {\n    constructor() {\n        this.typeResolver = defaultTypeResolver;\n        this.errorHandler = logError;\n        this.deserializationStrategy = new Map([\n            [AnyT.ctor, identity],\n            [Number, deserializeDirectly],\n            [String, deserializeDirectly],\n            [Boolean, deserializeDirectly],\n            [Date, deserializeDate],\n            [ArrayBuffer, stringToArrayBuffer],\n            [DataView, stringToDataView],\n            [Array, convertAsArray],\n            [Set, convertAsSet],\n            [Map, convertAsMap],\n            [Float32Array, convertAsFloatArray],\n            [Float64Array, convertAsFloatArray],\n            [Uint8Array, convertAsUintArray],\n            [Uint8ClampedArray, convertAsUintArray],\n            [Uint16Array, convertAsUintArray],\n            [Uint32Array, convertAsUintArray],\n        ]);\n    }\n    setDeserializationStrategy(type, deserializer) {\n        this.deserializationStrategy.set(type, deserializer);\n    }\n    setNameResolver(nameResolverCallback) {\n        this.nameResolver = nameResolverCallback;\n    }\n    setTypeResolver(typeResolverCallback) {\n        if (typeof typeResolverCallback !== 'function') {\n            throw new TypeError('\\'typeResolverCallback\\' is not a function.');\n        }\n        this.typeResolver = typeResolverCallback;\n    }\n    getTypeResolver() {\n        return this.typeResolver;\n    }\n    setErrorHandler(errorHandlerCallback) {\n        if (typeof errorHandlerCallback !== 'function') {\n            throw new TypeError('\\'errorHandlerCallback\\' is not a function.');\n        }\n        this.errorHandler = errorHandlerCallback;\n    }\n    getErrorHandler() {\n        return this.errorHandler;\n    }\n    convertSingleValue(sourceObject, typeDescriptor, knownTypes, memberName = 'object', memberOptions) {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null) {\n            return null;\n        }\n        else if (!isValueDefined(sourceObject)) {\n            return;\n        }\n        const deserializer = this.deserializationStrategy.get(typeDescriptor.ctor);\n        if (deserializer !== undefined) {\n            return deserializer(sourceObject, typeDescriptor, knownTypes, memberName, this, memberOptions);\n        }\n        if (typeof sourceObject === 'object') {\n            return convertAsObject(sourceObject, typeDescriptor, knownTypes, memberName, this);\n        }\n        let error = `Could not deserialize '${memberName}'; don't know how to deserialize type`;\n        if (typeDescriptor.hasFriendlyName()) {\n            error += ` '${typeDescriptor.ctor.name}'`;\n        }\n        this.errorHandler(new TypeError(`${error}.`));\n    }\n    instantiateType(ctor) {\n        return new ctor();\n    }\n    mergeKnownTypes(...knownTypeMaps) {\n        const result = new Map();\n        knownTypeMaps.forEach(knownTypes => {\n            knownTypes.forEach((ctor, name) => {\n                if (this.nameResolver === undefined) {\n                    result.set(name, ctor);\n                }\n                else {\n                    result.set(this.nameResolver(ctor), ctor);\n                }\n            });\n        });\n        return result;\n    }\n    createKnownTypesMap(knowTypes) {\n        const map = new Map();\n        knowTypes.forEach(ctor => {\n            if (this.nameResolver === undefined) {\n                const knownTypeMeta = JsonObjectMetadata.getFromConstructor(ctor);\n                const customName = (knownTypeMeta === null || knownTypeMeta === void 0 ? void 0 : knownTypeMeta.isExplicitlyMarked) === true\n                    ? knownTypeMeta.name\n                    : null;\n                map.set(customName !== null && customName !== void 0 ? customName : ctor.name, ctor);\n            }\n            else {\n                map.set(this.nameResolver(ctor), ctor);\n            }\n        });\n        return map;\n    }\n    retrievePreserveNull(memberOptions) {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n}\nfunction throwTypeMismatchError(targetType, expectedSourceType, actualSourceType, memberName) {\n    throw new TypeError(`Could not deserialize ${memberName} as ${targetType}:`\n        + ` expected ${expectedSourceType}, got ${actualSourceType}.`);\n}\nfunction makeTypeErrorMessage(expectedType, actualType, memberName) {\n    const expectedTypeName = typeof expectedType === 'function'\n        ? nameof(expectedType)\n        : expectedType;\n    const actualTypeName = typeof actualType === 'function' ? nameof(actualType) : actualType;\n    return `Could not deserialize ${memberName}: expected '${expectedTypeName}',`\n        + ` got '${actualTypeName}'.`;\n}\nfunction srcTypeNameForDebug(sourceObject) {\n    return sourceObject == null ? 'undefined' : nameof(sourceObject.constructor);\n}\nfunction deserializeDirectly(sourceObject, typeDescriptor, knownTypes, objectName) {\n    if (sourceObject.constructor !== typeDescriptor.ctor) {\n        throw new TypeError(makeTypeErrorMessage(nameof(typeDescriptor.ctor), sourceObject.constructor, objectName));\n    }\n    return sourceObject;\n}\nfunction convertAsObject(sourceObject, typeDescriptor, knownTypes, memberName, deserializer) {\n    if (typeof sourceObject !== 'object' || sourceObject === null) {\n        deserializer.getErrorHandler()(new TypeError(`Cannot deserialize ${memberName}: 'sourceObject' must be a defined object.`));\n        return undefined;\n    }\n    let expectedSelfType = typeDescriptor.ctor;\n    let sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(expectedSelfType);\n    let knownTypeConstructors = knownTypes;\n    let typeResolver = deserializer.getTypeResolver();\n    if (sourceObjectMetadata !== undefined) {\n        sourceObjectMetadata.processDeferredKnownTypes();\n        knownTypeConstructors = deserializer.mergeKnownTypes(knownTypeConstructors, deserializer.createKnownTypesMap(sourceObjectMetadata.knownTypes));\n        if (sourceObjectMetadata.typeResolver != null) {\n            typeResolver = sourceObjectMetadata.typeResolver;\n        }\n    }\n    const typeFromTypeHint = typeResolver(sourceObject, knownTypeConstructors);\n    if (typeFromTypeHint != null) {\n        if (isSubtypeOf(typeFromTypeHint, expectedSelfType)) {\n            expectedSelfType = typeFromTypeHint;\n            sourceObjectMetadata = JsonObjectMetadata.getFromConstructor(typeFromTypeHint);\n            if (sourceObjectMetadata !== undefined) {\n                knownTypeConstructors = deserializer.mergeKnownTypes(knownTypeConstructors, deserializer.createKnownTypesMap(sourceObjectMetadata.knownTypes));\n            }\n        }\n    }\n    if ((sourceObjectMetadata === null || sourceObjectMetadata === void 0 ? void 0 : sourceObjectMetadata.isExplicitlyMarked) === true) {\n        const sourceMetadata = sourceObjectMetadata;\n        const sourceObjectWithDeserializedProperties = {};\n        const classOptions = mergeOptions(deserializer.options, sourceMetadata.options);\n        sourceMetadata.dataMembers.forEach((objMemberMetadata, propKey) => {\n            const objMemberValue = sourceObject[propKey];\n            const objMemberDebugName = `${nameof(sourceMetadata.classType)}.${propKey}`;\n            const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n            let revivedValue;\n            if (objMemberMetadata.deserializer != null) {\n                revivedValue = objMemberMetadata.deserializer(objMemberValue, {\n                    fallback: (so, td) => deserializer.convertSingleValue(so, ensureTypeDescriptor(td), knownTypes),\n                });\n            }\n            else if (objMemberMetadata.type == null) {\n                throw new TypeError(`Cannot deserialize ${objMemberDebugName} there is`\n                    + ` no constructor nor deserialization function to use.`);\n            }\n            else {\n                revivedValue = deserializer.convertSingleValue(objMemberValue, objMemberMetadata.type(), knownTypeConstructors, objMemberDebugName, objMemberOptions);\n            }\n            if (isValueDefined(revivedValue)\n                || (deserializer.retrievePreserveNull(objMemberOptions)\n                    && revivedValue === null)) {\n                sourceObjectWithDeserializedProperties[objMemberMetadata.key] = revivedValue;\n            }\n            else if (objMemberMetadata.isRequired === true) {\n                deserializer.getErrorHandler()(new TypeError(`Missing required member '${objMemberDebugName}'.`));\n            }\n        });\n        let targetObject;\n        if (typeof sourceObjectMetadata.initializerCallback === 'function') {\n            try {\n                targetObject = sourceObjectMetadata.initializerCallback(sourceObjectWithDeserializedProperties, sourceObject);\n                if (targetObject == null) {\n                    throw new TypeError(`Cannot deserialize ${memberName}:`\n                        + ` 'initializer' function returned undefined/null`\n                        + `, but '${nameof(sourceObjectMetadata.classType)}' was expected.`);\n                }\n                else if (!(targetObject instanceof sourceObjectMetadata.classType)) {\n                    throw new TypeError(`Cannot deserialize ${memberName}:`\n                        + `'initializer' returned '${nameof(targetObject.constructor)}'`\n                        + `, but '${nameof(sourceObjectMetadata.classType)}' was expected`\n                        + `, and '${nameof(targetObject.constructor)}' is not a subtype of`\n                        + ` '${nameof(sourceObjectMetadata.classType)}'`);\n                }\n            }\n            catch (e) {\n                deserializer.getErrorHandler()(e);\n                return undefined;\n            }\n        }\n        else {\n            targetObject = deserializer.instantiateType(expectedSelfType);\n        }\n        Object.assign(targetObject, sourceObjectWithDeserializedProperties);\n        const methodName = sourceObjectMetadata.onDeserializedMethodName;\n        if (methodName != null) {\n            if (typeof targetObject[methodName] === 'function') {\n                targetObject[methodName]();\n            }\n            else if (typeof targetObject.constructor[methodName] === 'function') {\n                targetObject.constructor[methodName]();\n            }\n            else {\n                deserializer.getErrorHandler()(new TypeError(`onDeserialized callback`\n                    + `'${nameof(sourceObjectMetadata.classType)}.${methodName}' is not a method.`));\n            }\n        }\n        return targetObject;\n    }\n    else {\n        const targetObject = {};\n        Object.keys(sourceObject).forEach(sourceKey => {\n            targetObject[sourceKey] = deserializer.convertSingleValue(sourceObject[sourceKey], new ConcreteTypeDescriptor(sourceObject[sourceKey].constructor), knownTypes, sourceKey);\n        });\n        return targetObject;\n    }\n}\nfunction convertAsArray(sourceObject, typeDescriptor, knownTypes, memberName, deserializer, memberOptions) {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor)) {\n        throw new TypeError(`Could not deserialize ${memberName} as Array: incorrect TypeDescriptor detected,`\n            + ' please use proper annotation or function for this type');\n    }\n    if (!Array.isArray(sourceObject)) {\n        deserializer.getErrorHandler()(new TypeError(makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n        return [];\n    }\n    if (typeDescriptor.elementType == null) {\n        deserializer.getErrorHandler()(new TypeError(`Could not deserialize ${memberName} as Array: missing constructor reference of`\n            + ` Array elements.`));\n        return [];\n    }\n    return sourceObject.map((element, i) => {\n        try {\n            return deserializer.convertSingleValue(element, typeDescriptor.elementType, knownTypes, `${memberName}[${i}]`, memberOptions);\n        }\n        catch (e) {\n            deserializer.getErrorHandler()(e);\n            return undefined;\n        }\n    });\n}\nfunction convertAsSet(sourceObject, typeDescriptor, knownTypes, memberName, deserializer, memberOptions) {\n    if (!(typeDescriptor instanceof SetTypeDescriptor)) {\n        throw new TypeError(`Could not deserialize ${memberName} as Set: incorrect TypeDescriptor detected,`\n            + ` please use proper annotation or function for this type`);\n    }\n    if (!Array.isArray(sourceObject)) {\n        deserializer.getErrorHandler()(new TypeError(makeTypeErrorMessage(Array, sourceObject.constructor, memberName)));\n        return new Set();\n    }\n    if (typeDescriptor.elementType == null) {\n        deserializer.getErrorHandler()(new TypeError(`Could not deserialize ${memberName} as Set: missing constructor reference of`\n            + ` Set elements.`));\n        return new Set();\n    }\n    const resultSet = new Set();\n    sourceObject.forEach((element, i) => {\n        try {\n            resultSet.add(deserializer.convertSingleValue(element, typeDescriptor.elementType, knownTypes, `${memberName}[${i}]`, memberOptions));\n        }\n        catch (e) {\n            deserializer.getErrorHandler()(e);\n        }\n    });\n    return resultSet;\n}\nfunction isExpectedMapShape(source, expectedShape) {\n    return (expectedShape === 0 && Array.isArray(source))\n        || (expectedShape === 1 && typeof source === 'object');\n}\nfunction convertAsMap(sourceObject, typeDescriptor, knownTypes, memberName, deserializer, memberOptions) {\n    if (!(typeDescriptor instanceof MapTypeDescriptor)) {\n        throw new TypeError(`Could not deserialize ${memberName} as Map: incorrect TypeDescriptor detected,`\n            + 'please use proper annotation or function for this type');\n    }\n    const expectedShape = typeDescriptor.getCompleteOptions().shape;\n    if (!isExpectedMapShape(sourceObject, expectedShape)) {\n        const expectedType = expectedShape === 0 ? Array : Object;\n        deserializer.getErrorHandler()(new TypeError(makeTypeErrorMessage(expectedType, sourceObject.constructor, memberName)));\n        return new Map();\n    }\n    if (typeDescriptor.keyType == null) {\n        deserializer.getErrorHandler()(new TypeError(`Could not deserialize ${memberName} as Map: missing key constructor.`));\n        return new Map();\n    }\n    if (typeDescriptor.valueType == null) {\n        deserializer.getErrorHandler()(new TypeError(`Could not deserialize ${memberName} as Map: missing value constructor.`));\n        return new Map();\n    }\n    const keyMemberName = `${memberName}[].key`;\n    const valueMemberName = `${memberName}[].value`;\n    const resultMap = new Map();\n    if (expectedShape === 1) {\n        Object.keys(sourceObject).forEach(key => {\n            try {\n                const resultKey = deserializer.convertSingleValue(key, typeDescriptor.keyType, knownTypes, keyMemberName, memberOptions);\n                if (isValueDefined(resultKey)) {\n                    resultMap.set(resultKey, deserializer.convertSingleValue(sourceObject[key], typeDescriptor.valueType, knownTypes, valueMemberName, memberOptions));\n                }\n            }\n            catch (e) {\n                deserializer.getErrorHandler()(e);\n            }\n        });\n    }\n    else {\n        sourceObject.forEach((element) => {\n            try {\n                const key = deserializer.convertSingleValue(element.key, typeDescriptor.keyType, knownTypes, keyMemberName, memberOptions);\n                if (isValueDefined(key)) {\n                    resultMap.set(key, deserializer.convertSingleValue(element.value, typeDescriptor.valueType, knownTypes, valueMemberName, memberOptions));\n                }\n            }\n            catch (e) {\n                deserializer.getErrorHandler()(e);\n            }\n        });\n    }\n    return resultMap;\n}\nfunction deserializeDate(sourceObject, typeDescriptor, knownTypes, memberName) {\n    if (typeof sourceObject === 'number') {\n        const isInteger = sourceObject % 1 === 0;\n        if (!isInteger) {\n            throw new TypeError(`Could not deserialize ${memberName} as Date:`\n                + ` expected an integer, got a number with decimal places.`);\n        }\n        return new Date(sourceObject);\n    }\n    else if (typeof sourceObject === 'string') {\n        return new Date(sourceObject);\n    }\n    else if (sourceObject instanceof Date) {\n        return sourceObject;\n    }\n    else {\n        throwTypeMismatchError('Date', 'an ISO-8601 string', srcTypeNameForDebug(sourceObject), memberName);\n    }\n}\nfunction stringToArrayBuffer(sourceObject, typeDescriptor, knownTypes, memberName) {\n    if (typeof sourceObject !== 'string') {\n        throwTypeMismatchError('ArrayBuffer', 'a string source', srcTypeNameForDebug(sourceObject), memberName);\n    }\n    return createArrayBufferFromString(sourceObject);\n}\nfunction stringToDataView(sourceObject, typeDescriptor, knownTypes, memberName) {\n    if (typeof sourceObject !== 'string') {\n        throwTypeMismatchError('DataView', 'a string source', srcTypeNameForDebug(sourceObject), memberName);\n    }\n    return new DataView(createArrayBufferFromString(sourceObject));\n}\nfunction createArrayBufferFromString(input) {\n    const buf = new ArrayBuffer(input.length * 2);\n    const bufView = new Uint16Array(buf);\n    for (let i = 0, strLen = input.length; i < strLen; i++) {\n        bufView[i] = input.charCodeAt(i);\n    }\n    return buf;\n}\nfunction convertAsFloatArray(sourceObject, typeDescriptor, knownTypes, memberName) {\n    const constructor = typeDescriptor.ctor;\n    if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem))) {\n        return new constructor(sourceObject);\n    }\n    return throwTypeMismatchError(constructor.name, 'a numeric source array', srcTypeNameForDebug(sourceObject), memberName);\n}\nfunction convertAsUintArray(sourceObject, typeDescriptor, knownTypes, memberName) {\n    const constructor = typeDescriptor.ctor;\n    if (Array.isArray(sourceObject) && sourceObject.every(elem => !isNaN(elem))) {\n        return new constructor(sourceObject.map(value => ~~value));\n    }\n    return throwTypeMismatchError(typeDescriptor.ctor.name, 'a numeric source array', srcTypeNameForDebug(sourceObject), memberName);\n}\n","import { AnyT } from './type-descriptor';\nexport const LAZY_TYPE_EXPLANATION = `If the type is not yet defined, for example due to circular \\\nreferences, add '() => ' before it. E.g. @jsonMember(() => Foo)`;\nexport const MISSING_REFLECT_CONF_MSG = 'Make sure that you have both \"experimentalDecorators\"'\n    + ' and \"emitDecoratorMetadata\" enabled in your tsconfig.json';\nexport function isDirectlySerializableNativeType(type) {\n    return [Date, Number, String, Boolean].indexOf(type) !== -1;\n}\nexport function isDirectlyDeserializableNativeType(type) {\n    return [Number, String, Boolean].indexOf(type) !== -1;\n}\nexport function isTypeTypedArray(type) {\n    return [\n        Float32Array,\n        Float64Array,\n        Int8Array,\n        Uint8Array,\n        Uint8ClampedArray,\n        Int16Array,\n        Uint16Array,\n        Int32Array,\n        Uint32Array,\n    ].indexOf(type) !== -1;\n}\nexport function isObject(value) {\n    return typeof value === 'object';\n}\nexport function shouldOmitParseString(jsonStr, expectedType) {\n    const expectsTypesSerializedAsStrings = expectedType === String\n        || expectedType === ArrayBuffer\n        || expectedType === DataView;\n    const hasQuotes = jsonStr.length >= 2\n        && jsonStr[0] === '\"'\n        && jsonStr[jsonStr.length - 1] === '\"';\n    if (expectedType === Date) {\n        const isNumber = !isNaN(Number(jsonStr.trim()));\n        return !hasQuotes && !isNumber;\n    }\n    return expectsTypesSerializedAsStrings && !hasQuotes;\n}\nexport function parseToJSObject(json, expectedType) {\n    if (typeof json !== 'string' || shouldOmitParseString(json, expectedType)) {\n        return json;\n    }\n    return JSON.parse(json);\n}\nexport function isSubtypeOf(A, B) {\n    return A === B || A.prototype instanceof B;\n}\nexport function logError(message, ...optionalParams) {\n    if (typeof console === 'object' && typeof console.error === 'function') {\n        console.error(message, ...optionalParams);\n    }\n    else if (typeof console === 'object' && typeof console.log === 'function') {\n        console.log(`ERROR: ${message}`, ...optionalParams);\n    }\n}\nexport function logMessage(message, ...optionalParams) {\n    if (typeof console === 'object' && typeof console.log === 'function') {\n        console.log(message, ...optionalParams);\n    }\n}\nexport function logWarning(message, ...optionalParams) {\n    if (typeof console === 'object' && typeof console.warn === 'function') {\n        console.warn(message, ...optionalParams);\n    }\n    else if (typeof console === 'object' && typeof console.log === 'function') {\n        console.log(`WARNING: ${message}`, ...optionalParams);\n    }\n}\nexport function isValueDefined(value) {\n    return !(typeof value === 'undefined' || value === null);\n}\nexport function isInstanceOf(value, constructor) {\n    if (constructor === AnyT.ctor) {\n        return true;\n    }\n    else if (typeof value === 'number') {\n        return constructor === Number;\n    }\n    else if (typeof value === 'string') {\n        return constructor === String;\n    }\n    else if (typeof value === 'boolean') {\n        return constructor === Boolean;\n    }\n    else if (isObject(value)) {\n        return value instanceof constructor;\n    }\n    return false;\n}\nexport const isReflectMetadataSupported = typeof Reflect === 'object' && typeof Reflect.getMetadata === 'function';\nexport function nameof(fn) {\n    if (typeof fn.name === 'string') {\n        return fn.name;\n    }\n    return 'undefined';\n}\nexport function identity(arg) {\n    return arg;\n}\n","import { isReflectMetadataSupported, logError, MISSING_REFLECT_CONF_MSG, nameof } from './helpers';\nimport { injectMetadataInformation, } from './metadata';\nimport { extractOptionBase } from './options-base';\nimport { ArrayTypeDescriptor, ensureTypeDescriptor, ensureTypeThunk, } from './type-descriptor';\nexport function jsonArrayMember(maybeTypeThunk, options = {}) {\n    return (target, propKey) => {\n        var _a;\n        const decoratorName = `@jsonArrayMember on ${nameof(target.constructor)}.${String(propKey)}`;\n        const typeThunk = ensureTypeThunk(maybeTypeThunk, decoratorName);\n        const dimensions = options.dimensions == null ? 1 : options.dimensions;\n        if (!isNaN(dimensions) && dimensions < 1) {\n            logError(`${decoratorName}: 'dimensions' option must be at least 1.`);\n            return;\n        }\n        const reflectedType = isReflectMetadataSupported\n            ? Reflect.getMetadata('design:type', target, propKey)\n            : null;\n        if (reflectedType != null && reflectedType !== Array && reflectedType !== Object) {\n            logError(`${decoratorName}: property is not an Array. ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n        injectMetadataInformation(target, propKey, {\n            type: () => createArrayType(ensureTypeDescriptor(typeThunk()), dimensions),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: propKey.toString(),\n            name: (_a = options.name) !== null && _a !== void 0 ? _a : propKey.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\nexport function createArrayType(elementType, dimensions) {\n    let type = new ArrayTypeDescriptor(elementType);\n    for (let i = 1; i < dimensions; ++i) {\n        type = new ArrayTypeDescriptor(type);\n    }\n    return type;\n}\n","import { isReflectMetadataSupported, isSubtypeOf, isValueDefined, LAZY_TYPE_EXPLANATION, logError, logWarning, MISSING_REFLECT_CONF_MSG, nameof, } from './helpers';\nimport { injectMetadataInformation, } from './metadata';\nimport { extractOptionBase } from './options-base';\nimport { ArrayTypeDescriptor, ensureTypeDescriptor, ensureTypeThunk, isTypelike, isTypeThunk, MapTypeDescriptor, SetTypeDescriptor, TypeDescriptor, } from './type-descriptor';\nexport function jsonMember(optionsOrPrototype, propertyKeyOrOptions) {\n    if (typeof propertyKeyOrOptions === 'string' || typeof propertyKeyOrOptions === 'symbol') {\n        const property = propertyKeyOrOptions;\n        const prototype = optionsOrPrototype;\n        const decoratorName = `@jsonMember on ${nameof(prototype.constructor)}.${String(property)}`;\n        if (!isReflectMetadataSupported) {\n            logError(`${decoratorName}: ReflectDecorators is required if the type is not \\\nexplicitly provided with e.g. @jsonMember(Number)`);\n            return;\n        }\n        const reflectPropCtor = Reflect.getMetadata('design:type', prototype, property);\n        if (reflectPropCtor == null) {\n            logError(`${decoratorName}: could not resolve detected property constructor at \\\nruntime. Potential solutions:\n - ${LAZY_TYPE_EXPLANATION}\n - ${MISSING_REFLECT_CONF_MSG}`);\n            return;\n        }\n        const typeDescriptor = ensureTypeDescriptor(reflectPropCtor);\n        if (isSpecialPropertyType(decoratorName, typeDescriptor)) {\n            return;\n        }\n        injectMetadataInformation(prototype, property, {\n            type: () => typeDescriptor,\n            key: propertyKeyOrOptions.toString(),\n            name: propertyKeyOrOptions.toString(),\n        });\n        return;\n    }\n    return jsonMemberDecoratorFactory(optionsOrPrototype, propertyKeyOrOptions);\n}\nfunction jsonMemberDecoratorFactory(optionsOrType, options) {\n    return (target, property) => {\n        var _a;\n        const decoratorName = `@jsonMember on ${nameof(target.constructor)}.${String(property)}`;\n        let typeThunk;\n        if (isTypelike(optionsOrType) || isTypeThunk(optionsOrType)) {\n            typeThunk = ensureTypeThunk(optionsOrType, decoratorName);\n        }\n        else {\n            options = optionsOrType;\n        }\n        options = options !== null && options !== void 0 ? options : {};\n        if (Object.prototype.hasOwnProperty.call(options, 'constructor')) {\n            if (typeThunk !== undefined) {\n                throw new Error('Cannot both define constructor option and type. Only one allowed.');\n            }\n            if (!isValueDefined(options.constructor)) {\n                logError(`${decoratorName}: cannot resolve specified property constructor at \\\nruntime. ${LAZY_TYPE_EXPLANATION}`);\n                return;\n            }\n            const newTypeDescriptor = ensureTypeDescriptor(options.constructor);\n            typeThunk = () => newTypeDescriptor;\n            if (isReflectMetadataSupported && !isSubtypeOf(newTypeDescriptor.ctor, Reflect.getMetadata('design:type', target, property))) {\n                logWarning(`${decoratorName}: detected property type does not match`\n                    + ` 'constructor' option.`);\n            }\n        }\n        else if (typeThunk !== undefined) {\n        }\n        else if (isReflectMetadataSupported) {\n            const reflectCtor = Reflect.getMetadata('design:type', target, property);\n            if (reflectCtor == null) {\n                logError(`${decoratorName}: cannot resolve detected property constructor at \\\nruntime. ${LAZY_TYPE_EXPLANATION}`);\n                return;\n            }\n            typeThunk = () => ensureTypeDescriptor(reflectCtor);\n        }\n        else if (options.deserializer === undefined) {\n            logError(`${decoratorName}: Cannot determine type`);\n            return;\n        }\n        const typeToTest = typeThunk === null || typeThunk === void 0 ? void 0 : typeThunk();\n        if (typeToTest !== undefined && isSpecialPropertyType(decoratorName, typeToTest)) {\n            return;\n        }\n        injectMetadataInformation(target, property, {\n            type: typeThunk === undefined\n                ? undefined\n                : () => ensureTypeDescriptor(typeThunk()),\n            emitDefaultValue: options.emitDefaultValue,\n            isRequired: options.isRequired,\n            options: extractOptionBase(options),\n            key: property.toString(),\n            name: (_a = options.name) !== null && _a !== void 0 ? _a : property.toString(),\n            deserializer: options.deserializer,\n            serializer: options.serializer,\n        });\n    };\n}\nfunction isConstructorEqual(type, constructor) {\n    return type instanceof TypeDescriptor ? type.ctor === constructor : type === constructor;\n}\nfunction isSpecialPropertyType(decoratorName, typeDescriptor) {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor)\n        && isConstructorEqual(typeDescriptor, Array)) {\n        logError(`${decoratorName}: property is an Array. Use the jsonArrayMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n    if (!(typeDescriptor instanceof SetTypeDescriptor) && isConstructorEqual(typeDescriptor, Set)) {\n        logError(`${decoratorName}: property is a Set. Use the jsonSetMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n    if (!(typeDescriptor instanceof MapTypeDescriptor) && isConstructorEqual(typeDescriptor, Map)) {\n        logError(`${decoratorName}: property is a Map. Use the jsonMapMember decorator to`\n            + ` serialize this property.`);\n        return true;\n    }\n    return false;\n}\n","import { JsonObjectMetadata } from './metadata';\nimport { extractOptionBase } from './options-base';\nexport function jsonObject(optionsOrTarget) {\n    let options;\n    if (typeof optionsOrTarget === 'function') {\n        options = {};\n    }\n    else {\n        options = optionsOrTarget !== null && optionsOrTarget !== void 0 ? optionsOrTarget : {};\n    }\n    function decorator(target) {\n        const objectMetadata = JsonObjectMetadata.ensurePresentInPrototype(target.prototype);\n        objectMetadata.isExplicitlyMarked = true;\n        objectMetadata.onDeserializedMethodName = options.onDeserialized;\n        objectMetadata.beforeSerializationMethodName = options.beforeSerialization;\n        if (options.typeResolver != null) {\n            objectMetadata.typeResolver = options.typeResolver;\n        }\n        if (options.typeHintEmitter != null) {\n            objectMetadata.typeHintEmitter = options.typeHintEmitter;\n        }\n        objectMetadata.initializerCallback = options.initializer;\n        if (options.name != null) {\n            objectMetadata.name = options.name;\n        }\n        const optionsBase = extractOptionBase(options);\n        if (optionsBase !== undefined) {\n            objectMetadata.options = optionsBase;\n        }\n        if (options.knownTypes != null) {\n            options.knownTypes\n                .filter(knownType => Boolean(knownType))\n                .forEach(knownType => objectMetadata.knownTypes.add(knownType));\n        }\n    }\n    if (typeof optionsOrTarget === 'function') {\n        decorator(optionsOrTarget);\n    }\n    else {\n        return decorator;\n    }\n}\n","import { isDirectlySerializableNativeType, isTypeTypedArray, logError, nameof } from './helpers';\nexport const METADATA_FIELD_KEY = '__typedJsonJsonObjectMetadataInformation__';\nexport class JsonObjectMetadata {\n    constructor(classType) {\n        this.dataMembers = new Map();\n        this.knownTypes = new Set();\n        this.knownTypesDeferred = [];\n        this.isExplicitlyMarked = false;\n        this.isHandledWithoutAnnotation = false;\n        this.classType = classType;\n    }\n    static getJsonObjectName(ctor) {\n        const metadata = JsonObjectMetadata.getFromConstructor(ctor);\n        return metadata === undefined ? nameof(ctor) : nameof(metadata.classType);\n    }\n    static getFromConstructor(ctor) {\n        const prototype = ctor.prototype;\n        if (prototype == null) {\n            return;\n        }\n        let metadata;\n        if (Object.prototype.hasOwnProperty.call(prototype, METADATA_FIELD_KEY)) {\n            metadata = prototype[METADATA_FIELD_KEY];\n        }\n        if ((metadata === null || metadata === void 0 ? void 0 : metadata.isExplicitlyMarked) === true) {\n            return metadata;\n        }\n        if (JsonObjectMetadata.doesHandleWithoutAnnotation(ctor)) {\n            const primitiveMeta = new JsonObjectMetadata(ctor);\n            primitiveMeta.isExplicitlyMarked = true;\n            return primitiveMeta;\n        }\n    }\n    static ensurePresentInPrototype(prototype) {\n        if (Object.prototype.hasOwnProperty.call(prototype, METADATA_FIELD_KEY)) {\n            return prototype[METADATA_FIELD_KEY];\n        }\n        const objectMetadata = new JsonObjectMetadata(prototype.constructor);\n        const parentMetadata = prototype[METADATA_FIELD_KEY];\n        if (parentMetadata !== undefined) {\n            parentMetadata.dataMembers.forEach((memberMetadata, propKey) => {\n                objectMetadata.dataMembers.set(propKey, memberMetadata);\n            });\n            parentMetadata.knownTypes.forEach((knownType) => {\n                objectMetadata.knownTypes.add(knownType);\n            });\n            objectMetadata.typeResolver = parentMetadata.typeResolver;\n            objectMetadata.typeHintEmitter = parentMetadata.typeHintEmitter;\n        }\n        Object.defineProperty(prototype, METADATA_FIELD_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: objectMetadata,\n        });\n        return objectMetadata;\n    }\n    static getKnownTypeNameFromType(constructor) {\n        const metadata = JsonObjectMetadata.getFromConstructor(constructor);\n        return metadata === undefined ? nameof(constructor) : nameof(metadata.classType);\n    }\n    static doesHandleWithoutAnnotation(ctor) {\n        return isDirectlySerializableNativeType(ctor) || isTypeTypedArray(ctor)\n            || ctor === DataView || ctor === ArrayBuffer;\n    }\n    processDeferredKnownTypes() {\n        this.knownTypesDeferred.forEach(typeThunk => {\n            typeThunk().getTypes().forEach(ctor => this.knownTypes.add(ctor));\n        });\n        this.knownTypesDeferred = [];\n    }\n}\nexport function injectMetadataInformation(prototype, propKey, metadata) {\n    const decoratorName = `@jsonMember on ${nameof(prototype.constructor)}.${String(propKey)}`;\n    if (typeof prototype === 'function') {\n        logError(`${decoratorName}: cannot use a static property.`);\n        return;\n    }\n    if (typeof prototype[propKey] === 'function') {\n        logError(`${decoratorName}: cannot use a method property.`);\n        return;\n    }\n    if (metadata == null\n        || (metadata.type === undefined && metadata.deserializer === undefined)) {\n        logError(`${decoratorName}: JsonMemberMetadata has unknown type.`);\n        return;\n    }\n    const objectMetadata = JsonObjectMetadata.ensurePresentInPrototype(prototype);\n    if (metadata.deserializer === undefined) {\n        objectMetadata.knownTypesDeferred.push(metadata.type);\n    }\n    Object.keys(metadata)\n        .forEach((key) => (metadata[key] === undefined) && delete metadata[key]);\n    objectMetadata.dataMembers.set(metadata.name, metadata);\n}\n","const kAllOptions = [\n    'preserveNull',\n];\nexport function extractOptionBase(from) {\n    const options = Object.keys(from)\n        .filter(key => kAllOptions.indexOf(key) > -1)\n        .reduce((obj, key) => {\n        obj[key] = from[key];\n        return obj;\n    }, {});\n    return Object.keys(options).length > 0 ? options : undefined;\n}\nexport function getDefaultOptionOf(key) {\n    switch (key) {\n        case 'preserveNull':\n            return false;\n    }\n    return null;\n}\nexport function getOptionValue(key, options) {\n    if (options != null && options[key] != null) {\n        return options[key];\n    }\n    return getDefaultOptionOf(key);\n}\nexport function mergeOptions(existing, moreSpecific) {\n    return moreSpecific == null\n        ? existing\n        : Object.assign(Object.assign({}, existing), moreSpecific);\n}\n","import { defaultTypeResolver, Deserializer } from './deserializer';\nimport { logError, logWarning, nameof, parseToJSObject } from './helpers';\nimport { createArrayType } from './json-array-member';\nimport { JsonObjectMetadata, } from './metadata';\nimport { extractOptionBase } from './options-base';\nimport { defaultTypeEmitter, Serializer } from './serializer';\nimport { ensureTypeDescriptor, MapT, SetT } from './type-descriptor';\nexport { defaultTypeResolver, defaultTypeEmitter };\nexport class TypedJSON {\n    constructor(rootConstructor, settings) {\n        this.serializer = new Serializer();\n        this.deserializer = new Deserializer();\n        this.globalKnownTypes = [];\n        this.indent = 0;\n        const rootMetadata = JsonObjectMetadata.getFromConstructor(rootConstructor);\n        if (rootMetadata === undefined\n            || (!rootMetadata.isExplicitlyMarked && !rootMetadata.isHandledWithoutAnnotation)) {\n            throw new TypeError('The TypedJSON root data type must have the @jsonObject decorator used.');\n        }\n        this.nameResolver = (ctor) => nameof(ctor);\n        this.rootConstructor = rootConstructor;\n        this.errorHandler = (error) => logError(error);\n        this.config(settings);\n    }\n    static parse(object, rootType, settings) {\n        return new TypedJSON(rootType, settings).parse(object);\n    }\n    static parseAsArray(object, elementType, settings, dimensions) {\n        return new TypedJSON(elementType, settings).parseAsArray(object, dimensions);\n    }\n    static parseAsSet(object, elementType, settings) {\n        return new TypedJSON(elementType, settings).parseAsSet(object);\n    }\n    static parseAsMap(object, keyType, valueType, settings) {\n        return new TypedJSON(valueType, settings).parseAsMap(object, keyType);\n    }\n    static toPlainJson(object, rootType, settings) {\n        return new TypedJSON(rootType, settings).toPlainJson(object);\n    }\n    static toPlainArray(object, elementType, dimensions, settings) {\n        return new TypedJSON(elementType, settings).toPlainArray(object, dimensions);\n    }\n    static toPlainSet(object, elementType, settings) {\n        return new TypedJSON(elementType, settings).toPlainSet(object);\n    }\n    static toPlainMap(object, keyCtor, valueCtor, settings) {\n        return new TypedJSON(valueCtor, settings).toPlainMap(object, keyCtor);\n    }\n    static stringify(object, rootType, settings) {\n        return new TypedJSON(rootType, settings).stringify(object);\n    }\n    static stringifyAsArray(object, elementType, dimensions, settings) {\n        return new TypedJSON(elementType, settings).stringifyAsArray(object, dimensions);\n    }\n    static stringifyAsSet(object, elementType, settings) {\n        return new TypedJSON(elementType, settings).stringifyAsSet(object);\n    }\n    static stringifyAsMap(object, keyCtor, valueCtor, settings) {\n        return new TypedJSON(valueCtor, settings).stringifyAsMap(object, keyCtor);\n    }\n    static setGlobalConfig(config) {\n        Object.assign(this._globalConfig, config);\n    }\n    static mapType(type, converters) {\n        if (this._globalConfig.mappedTypes == null) {\n            this._globalConfig.mappedTypes = new Map();\n        }\n        this._globalConfig.mappedTypes.set(type, converters);\n    }\n    config(settings) {\n        settings = Object.assign(Object.assign({}, TypedJSON._globalConfig), settings);\n        if (settings.knownTypes != null\n            && TypedJSON._globalConfig.knownTypes != null) {\n            settings.knownTypes = Array.from(new Set(settings.knownTypes.concat(TypedJSON._globalConfig.knownTypes)));\n        }\n        const options = extractOptionBase(settings);\n        this.serializer.options = options;\n        this.deserializer.options = options;\n        if (settings.errorHandler != null) {\n            this.errorHandler = settings.errorHandler;\n            this.deserializer.setErrorHandler(settings.errorHandler);\n            this.serializer.setErrorHandler(settings.errorHandler);\n        }\n        if (settings.replacer != null) {\n            this.replacer = settings.replacer;\n        }\n        if (settings.typeResolver != null) {\n            this.deserializer.setTypeResolver(settings.typeResolver);\n        }\n        if (settings.typeHintEmitter != null) {\n            this.serializer.setTypeHintEmitter(settings.typeHintEmitter);\n        }\n        if (settings.indent != null) {\n            this.indent = settings.indent;\n        }\n        if (settings.mappedTypes != null) {\n            settings.mappedTypes.forEach((upDown, type) => {\n                this.setSerializationStrategies(type, upDown);\n            });\n        }\n        if (settings.nameResolver != null) {\n            this.nameResolver = settings.nameResolver;\n            this.deserializer.setNameResolver(settings.nameResolver);\n        }\n        if (settings.knownTypes != null) {\n            settings.knownTypes.forEach((knownType, i) => {\n                if (typeof knownType === 'undefined' || knownType === null) {\n                    logWarning(`TypedJSON.config: 'knownTypes' contains an undefined/null value`\n                        + ` (element ${i}).`);\n                }\n            });\n            this.globalKnownTypes = settings.knownTypes;\n        }\n    }\n    mapType(type, converters) {\n        this.setSerializationStrategies(type, converters);\n    }\n    parse(object) {\n        const json = parseToJSObject(object, this.rootConstructor);\n        let result;\n        try {\n            result = this.deserializer.convertSingleValue(json, ensureTypeDescriptor(this.rootConstructor), this.getKnownTypes());\n        }\n        catch (e) {\n            this.errorHandler(e);\n        }\n        return result;\n    }\n    parseAsArray(object, dimensions = 1) {\n        const json = parseToJSObject(object, Array);\n        return this.deserializer.convertSingleValue(json, createArrayType(ensureTypeDescriptor(this.rootConstructor), dimensions), this._mapKnownTypes(this.globalKnownTypes));\n    }\n    parseAsSet(object) {\n        const json = parseToJSObject(object, Set);\n        return this.deserializer.convertSingleValue(json, SetT(this.rootConstructor), this._mapKnownTypes(this.globalKnownTypes));\n    }\n    parseAsMap(object, keyConstructor) {\n        const json = parseToJSObject(object, Map);\n        return this.deserializer.convertSingleValue(json, MapT(keyConstructor, this.rootConstructor), this._mapKnownTypes(this.globalKnownTypes));\n    }\n    toPlainJson(object) {\n        try {\n            return this.serializer.convertSingleValue(object, ensureTypeDescriptor(this.rootConstructor));\n        }\n        catch (e) {\n            this.errorHandler(e);\n        }\n    }\n    toPlainArray(object, dimensions = 1) {\n        try {\n            return this.serializer.convertSingleValue(object, createArrayType(ensureTypeDescriptor(this.rootConstructor), dimensions));\n        }\n        catch (e) {\n            this.errorHandler(e);\n        }\n    }\n    toPlainSet(object) {\n        try {\n            return this.serializer.convertSingleValue(object, SetT(this.rootConstructor));\n        }\n        catch (e) {\n            this.errorHandler(e);\n        }\n    }\n    toPlainMap(object, keyConstructor) {\n        try {\n            return this.serializer.convertSingleValue(object, MapT(keyConstructor, this.rootConstructor));\n        }\n        catch (e) {\n            this.errorHandler(e);\n        }\n    }\n    stringify(object) {\n        const result = this.toPlainJson(object);\n        if (result === undefined) {\n            return '';\n        }\n        return JSON.stringify(result, this.replacer, this.indent);\n    }\n    stringifyAsArray(object, dimensions) {\n        return JSON.stringify(this.toPlainArray(object, dimensions), this.replacer, this.indent);\n    }\n    stringifyAsSet(object) {\n        return JSON.stringify(this.toPlainSet(object), this.replacer, this.indent);\n    }\n    stringifyAsMap(object, keyConstructor) {\n        return JSON.stringify(this.toPlainMap(object, keyConstructor), this.replacer, this.indent);\n    }\n    getKnownTypes() {\n        const rootMetadata = JsonObjectMetadata.getFromConstructor(this.rootConstructor);\n        const knownTypes = new Map();\n        this.globalKnownTypes.filter(ktc => ktc).forEach(knownTypeCtor => {\n            knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n        });\n        if (rootMetadata !== undefined) {\n            rootMetadata.processDeferredKnownTypes();\n            rootMetadata.knownTypes.forEach(knownTypeCtor => {\n                knownTypes.set(this.nameResolver(knownTypeCtor), knownTypeCtor);\n            });\n        }\n        return knownTypes;\n    }\n    _mapKnownTypes(constructors) {\n        const map = new Map();\n        constructors.filter(ctor => ctor).forEach(ctor => map.set(this.nameResolver(ctor), ctor));\n        return map;\n    }\n    setSerializationStrategies(type, converters) {\n        if (converters.deserializer != null) {\n            this.deserializer.setDeserializationStrategy(type, value => converters.deserializer(value, {\n                fallback: (so, td) => this.deserializer.convertSingleValue(so, ensureTypeDescriptor(td), this.getKnownTypes()),\n            }));\n        }\n        if (converters.serializer != null) {\n            this.serializer.setSerializationStrategy(type, value => converters.serializer(value, {\n                fallback: (so, td) => this.serializer.convertSingleValue(so, ensureTypeDescriptor(td)),\n            }));\n        }\n    }\n}\nTypedJSON._globalConfig = {};\n","import { identity, isInstanceOf, isValueDefined, logError, nameof, } from './helpers';\nimport { JsonObjectMetadata } from './metadata';\nimport { getOptionValue, mergeOptions } from './options-base';\nimport { AnyT, ArrayTypeDescriptor, ensureTypeDescriptor, MapTypeDescriptor, SetTypeDescriptor, } from './type-descriptor';\nexport function defaultTypeEmitter(targetObject, sourceObject, expectedSourceType, sourceTypeMetadata) {\n    var _a;\n    if (sourceObject.constructor !== expectedSourceType) {\n        targetObject.__type = (_a = sourceTypeMetadata === null || sourceTypeMetadata === void 0 ? void 0 : sourceTypeMetadata.name) !== null && _a !== void 0 ? _a : nameof(sourceObject.constructor);\n    }\n}\nexport class Serializer {\n    constructor() {\n        this.typeHintEmitter = defaultTypeEmitter;\n        this.errorHandler = logError;\n        this.serializationStrategy = new Map([\n            [AnyT.ctor, identity],\n            [Date, identity],\n            [Number, identity],\n            [String, identity],\n            [Boolean, identity],\n            [ArrayBuffer, convertAsArrayBuffer],\n            [DataView, convertAsDataView],\n            [Array, convertAsArray],\n            [Set, convertAsSet],\n            [Map, convertAsMap],\n            [Float32Array, convertAsTypedArray],\n            [Float64Array, convertAsTypedArray],\n            [Int8Array, convertAsTypedArray],\n            [Uint8Array, convertAsTypedArray],\n            [Uint8ClampedArray, convertAsTypedArray],\n            [Int16Array, convertAsTypedArray],\n            [Uint16Array, convertAsTypedArray],\n            [Int32Array, convertAsTypedArray],\n            [Uint32Array, convertAsTypedArray],\n        ]);\n    }\n    setSerializationStrategy(type, serializer) {\n        this.serializationStrategy.set(type, serializer);\n    }\n    setTypeHintEmitter(typeEmitterCallback) {\n        if (typeof typeEmitterCallback !== 'function') {\n            throw new TypeError('\\'typeEmitterCallback\\' is not a function.');\n        }\n        this.typeHintEmitter = typeEmitterCallback;\n    }\n    getTypeHintEmitter() {\n        return this.typeHintEmitter;\n    }\n    setErrorHandler(errorHandlerCallback) {\n        if (typeof errorHandlerCallback !== 'function') {\n            throw new TypeError('\\'errorHandlerCallback\\' is not a function.');\n        }\n        this.errorHandler = errorHandlerCallback;\n    }\n    getErrorHandler() {\n        return this.errorHandler;\n    }\n    retrievePreserveNull(memberOptions) {\n        return getOptionValue('preserveNull', mergeOptions(this.options, memberOptions));\n    }\n    convertSingleValue(sourceObject, typeDescriptor, memberName = 'object', memberOptions) {\n        if (this.retrievePreserveNull(memberOptions) && sourceObject === null) {\n            return null;\n        }\n        if (!isValueDefined(sourceObject)) {\n            return;\n        }\n        if (!isInstanceOf(sourceObject, typeDescriptor.ctor)) {\n            const expectedName = nameof(typeDescriptor.ctor);\n            const actualName = nameof(sourceObject.constructor);\n            this.errorHandler(new TypeError(`Could not serialize '${memberName}': expected '${expectedName}',`\n                + ` got '${actualName}'.`));\n            return;\n        }\n        const serializer = this.serializationStrategy.get(typeDescriptor.ctor);\n        if (serializer !== undefined) {\n            return serializer(sourceObject, typeDescriptor, memberName, this, memberOptions);\n        }\n        if (typeof sourceObject === 'object') {\n            return convertAsObject(sourceObject, typeDescriptor, memberName, this, memberOptions);\n        }\n        let error = `Could not serialize '${memberName}'; don't know how to serialize type`;\n        if (typeDescriptor.hasFriendlyName()) {\n            error += ` '${typeDescriptor.ctor.name}'`;\n        }\n        this.errorHandler(new TypeError(`${error}.`));\n    }\n}\nfunction convertAsObject(sourceObject, typeDescriptor, memberName, serializer, memberOptions) {\n    let sourceTypeMetadata;\n    let targetObject;\n    let typeHintEmitter = serializer.getTypeHintEmitter();\n    if (sourceObject.constructor !== typeDescriptor.ctor\n        && sourceObject instanceof typeDescriptor.ctor) {\n        sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(sourceObject.constructor);\n    }\n    else {\n        sourceTypeMetadata = JsonObjectMetadata.getFromConstructor(typeDescriptor.ctor);\n    }\n    if (sourceTypeMetadata === undefined) {\n        targetObject = Object.assign({}, sourceObject);\n    }\n    else {\n        const beforeSerializationMethodName = sourceTypeMetadata.beforeSerializationMethodName;\n        if (beforeSerializationMethodName != null) {\n            if (typeof sourceObject[beforeSerializationMethodName] === 'function') {\n                sourceObject[beforeSerializationMethodName]();\n            }\n            else if (typeof sourceObject.constructor[beforeSerializationMethodName]\n                === 'function') {\n                sourceObject.constructor[beforeSerializationMethodName]();\n            }\n            else {\n                serializer.getErrorHandler()(new TypeError(`beforeSerialization callback '`\n                    + `${nameof(sourceTypeMetadata.classType)}.${beforeSerializationMethodName}`\n                    + `' is not a method.`));\n            }\n        }\n        const sourceMeta = sourceTypeMetadata;\n        targetObject = {};\n        const classOptions = mergeOptions(serializer.options, sourceMeta.options);\n        if (sourceMeta.typeHintEmitter != null) {\n            typeHintEmitter = sourceMeta.typeHintEmitter;\n        }\n        sourceMeta.dataMembers.forEach((objMemberMetadata) => {\n            const objMemberOptions = mergeOptions(classOptions, objMemberMetadata.options);\n            let serialized;\n            if (objMemberMetadata.serializer != null) {\n                serialized = objMemberMetadata.serializer(sourceObject[objMemberMetadata.key], {\n                    fallback: (so, td) => serializer.convertSingleValue(so, ensureTypeDescriptor(td)),\n                });\n            }\n            else if (objMemberMetadata.type == null) {\n                throw new TypeError(`Could not serialize ${objMemberMetadata.name}, there is`\n                    + ` no constructor nor serialization function to use.`);\n            }\n            else {\n                serialized = serializer.convertSingleValue(sourceObject[objMemberMetadata.key], objMemberMetadata.type(), `${nameof(sourceMeta.classType)}.${objMemberMetadata.key}`, objMemberOptions);\n            }\n            if ((serializer.retrievePreserveNull(objMemberOptions) && serialized === null)\n                || isValueDefined(serialized)) {\n                targetObject[objMemberMetadata.name] = serialized;\n            }\n        });\n    }\n    typeHintEmitter(targetObject, sourceObject, typeDescriptor.ctor, sourceTypeMetadata);\n    return targetObject;\n}\nfunction convertAsArray(sourceObject, typeDescriptor, memberName, serializer, memberOptions) {\n    if (!(typeDescriptor instanceof ArrayTypeDescriptor)) {\n        throw new TypeError(`Could not serialize ${memberName} as Array: incorrect TypeDescriptor detected, please`\n            + ' use proper annotation or function for this type');\n    }\n    if (typeDescriptor.elementType == null) {\n        throw new TypeError(`Could not serialize ${memberName} as Array: missing element type definition.`);\n    }\n    sourceObject.forEach((element, i) => {\n        if (!(serializer.retrievePreserveNull(memberOptions) && element === null)\n            && !isInstanceOf(element, typeDescriptor.elementType.ctor)) {\n            const expectedTypeName = nameof(typeDescriptor.elementType.ctor);\n            const actualTypeName = element && nameof(element.constructor);\n            throw new TypeError(`Could not serialize ${memberName}[${i}]:`\n                + ` expected '${expectedTypeName}', got '${actualTypeName}'.`);\n        }\n    });\n    return sourceObject.map((element, i) => {\n        return serializer.convertSingleValue(element, typeDescriptor.elementType, `${memberName}[${i}]`, memberOptions);\n    });\n}\nfunction convertAsSet(sourceObject, typeDescriptor, memberName, serializer, memberOptions) {\n    if (!(typeDescriptor instanceof SetTypeDescriptor)) {\n        throw new TypeError(`Could not serialize ${memberName} as Set: incorrect TypeDescriptor detected, please`\n            + ' use proper annotation or function for this type');\n    }\n    if (typeDescriptor.elementType == null) {\n        throw new TypeError(`Could not serialize ${memberName} as Set: missing element type definition.`);\n    }\n    memberName += '[]';\n    const resultArray = [];\n    sourceObject.forEach((element) => {\n        const resultElement = serializer.convertSingleValue(element, typeDescriptor.elementType, memberName, memberOptions);\n        if (!isValueDefined(element) || isValueDefined(resultElement)) {\n            resultArray.push(resultElement);\n        }\n    });\n    return resultArray;\n}\nfunction convertAsMap(sourceObject, typeDescriptor, memberName, serializer, memberOptions) {\n    if (!(typeDescriptor instanceof MapTypeDescriptor)) {\n        throw new TypeError(`Could not serialize ${memberName} as Map: incorrect TypeDescriptor detected, please`\n            + ' use proper annotation or function for this type');\n    }\n    if (typeDescriptor.valueType == null) {\n        throw new TypeError(`Could not serialize ${memberName} as Map: missing value type definition.`);\n    }\n    if (typeDescriptor.keyType == null) {\n        throw new TypeError(`Could not serialize ${memberName} as Map: missing key type definition.`);\n    }\n    const keyMemberName = `${memberName}[].key`;\n    const valueMemberName = `${memberName}[].value`;\n    const resultShape = typeDescriptor.getCompleteOptions().shape;\n    const result = resultShape === 1 ? {} : [];\n    const preserveNull = serializer.retrievePreserveNull(memberOptions);\n    sourceObject.forEach((value, key) => {\n        const resultKeyValuePairObj = {\n            key: serializer.convertSingleValue(key, typeDescriptor.keyType, keyMemberName, memberOptions),\n            value: serializer.convertSingleValue(value, typeDescriptor.valueType, valueMemberName, memberOptions),\n        };\n        const keyDefined = isValueDefined(resultKeyValuePairObj.key);\n        const valueDefined = (resultKeyValuePairObj.value === null && preserveNull)\n            || isValueDefined(resultKeyValuePairObj.value);\n        if (keyDefined && valueDefined) {\n            if (resultShape === 1) {\n                result[resultKeyValuePairObj.key] = resultKeyValuePairObj.value;\n            }\n            else {\n                result.push(resultKeyValuePairObj);\n            }\n        }\n    });\n    return result;\n}\nfunction convertAsTypedArray(sourceObject) {\n    return Array.from(sourceObject);\n}\nfunction convertAsArrayBuffer(buffer) {\n    return Array.from(new Uint16Array(buffer))\n        .map(charCode => String.fromCharCode(charCode)).join('');\n}\nfunction convertAsDataView(dataView) {\n    return convertAsArrayBuffer(dataView.buffer);\n}\n","import { LAZY_TYPE_EXPLANATION } from './helpers';\nexport class TypeDescriptor {\n    constructor(ctor) {\n        this.ctor = ctor;\n    }\n    getTypes() {\n        return [this.ctor];\n    }\n    hasFriendlyName() {\n        return this.ctor.name !== 'Object';\n    }\n}\nexport class ConcreteTypeDescriptor extends TypeDescriptor {\n    constructor(ctor) {\n        super(ctor);\n    }\n}\nexport class GenericTypeDescriptor extends TypeDescriptor {\n    constructor(ctor) {\n        super(ctor);\n    }\n}\nexport class ArrayTypeDescriptor extends GenericTypeDescriptor {\n    constructor(elementType) {\n        super(Array);\n        this.elementType = elementType;\n    }\n    getTypes() {\n        return super.getTypes().concat(this.elementType.getTypes());\n    }\n}\nexport function ArrayT(elementType) {\n    return new ArrayTypeDescriptor(ensureTypeDescriptor(elementType));\n}\nexport class SetTypeDescriptor extends GenericTypeDescriptor {\n    constructor(elementType) {\n        super(Set);\n        this.elementType = elementType;\n    }\n    getTypes() {\n        return super.getTypes().concat(this.elementType.getTypes());\n    }\n}\nexport function SetT(elementType) {\n    return new SetTypeDescriptor(ensureTypeDescriptor(elementType));\n}\nexport class MapTypeDescriptor extends GenericTypeDescriptor {\n    constructor(keyType, valueType, options) {\n        super(Map);\n        this.keyType = keyType;\n        this.valueType = valueType;\n        this.options = options;\n    }\n    getTypes() {\n        return super.getTypes().concat(this.keyType.getTypes(), this.valueType.getTypes());\n    }\n    getCompleteOptions() {\n        var _a, _b;\n        return {\n            shape: (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.shape) !== null && _b !== void 0 ? _b : 0,\n        };\n    }\n}\nexport function MapT(keyType, valueType, options) {\n    return new MapTypeDescriptor(ensureTypeDescriptor(keyType), ensureTypeDescriptor(valueType), options);\n}\nexport const AnyT = new ConcreteTypeDescriptor(() => undefined);\nexport function isTypelike(type) {\n    return type != null && (typeof type === 'function' || type instanceof TypeDescriptor);\n}\nexport function isTypeThunk(candidate) {\n    return typeof candidate === 'function' && candidate.name === '';\n}\nexport function ensureTypeDescriptor(type) {\n    return type instanceof TypeDescriptor ? type : new ConcreteTypeDescriptor(type);\n}\nexport function ensureTypeThunk(typeThunkOrSerializable, decoratorName) {\n    if (typeThunkOrSerializable == null) {\n        throw new Error(`No type given on ${decoratorName}. ${LAZY_TYPE_EXPLANATION}`);\n    }\n    if (isTypeThunk(typeThunkOrSerializable)) {\n        return typeThunkOrSerializable;\n    }\n    return () => typeThunkOrSerializable;\n}\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}