{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/classes/EventLog/classifier.ts","./src/app/classes/EventLog/event.ts","./src/app/classes/EventLog/eventlog.ts","./src/app/classes/EventLog/eventlogattribute.ts","./src/app/classes/EventLog/trace.ts","./src/app/classes/diagram/GraphEvent.ts","./src/app/classes/diagram/GraphTrace.ts","./src/app/classes/diagram/diagram.ts","./src/app/classes/diagram/element.ts","./src/app/classes/directly-follows-graph/edge.ts","./src/app/classes/directly-follows-graph/graph.ts","./src/app/classes/directly-follows-graph/vertex.ts","./src/app/classes/parser/logParser.ts","./src/app/classes/parser/xesParser.ts","./src/app/components/change-view-button/change-view-button.component.ts","./src/app/components/change-view-button/change-view-button.component.html","./src/app/components/directly-follows-graph/directly-follows-graph.component.ts","./src/app/components/directly-follows-graph/directly-follows-graph.component.html","./src/app/components/drawingArea/drawingArea.component.ts","./src/app/components/drawingArea/drawingArea.component.html","./src/app/components/export-button/export-button.component.ts","./src/app/components/export-button/export-button.component.html","./src/app/components/export-button/export-menu-item/export-menu-item.component.ts","./src/app/components/export-button/export-menu-item/export-menu-item.component.html","./src/app/components/filter-area/filter-area.component.ts","./src/app/components/filter-area/filter-area.component.html","./src/app/components/footer/footer.component.ts","./src/app/components/footer/footer.component.html","./src/app/components/log-information-view/log-case/log-trace-case.component.ts","./src/app/components/log-information-view/log-case/log-trace-case.component.html","./src/app/components/log-information-view/log-information-view.component.ts","./src/app/components/log-information-view/log-information-view.component.html","./src/app/components/switch-direction-button/switch-direction-button.component.ts","./src/app/components/switch-direction-button/switch-direction-button.component.html","./src/app/components/upload-button/upload-button.component.ts","./src/app/components/upload-button/upload-button.component.html","./src/app/components/value-chain/value-chain.component.ts","./src/app/components/value-chain/value-chain.component.html","./src/app/directives/drag-drop-file/drag-drop-file-upload.directive.ts","./src/app/pipes/attribute-value.pipe.ts","./src/app/services/common/data/eventlog-data.service.ts","./src/app/services/common/display-service/display-base.service.ts","./src/app/services/common/layout-service/layout.service.ts","./src/app/services/common/svg-service/svg.service.ts","./src/app/services/common/trace-case-selection-service/trace-case-selection.service.ts","./src/app/services/file-operations/log/log-parser.service.ts","./src/app/services/file-operations/log/log.service.ts","./src/app/services/file-operations/xes/xes-parser.service.ts","./src/app/services/file-operations/xes/xes.service.ts","./src/app/services/views/directly-follows-graph/display.service.ts","./src/app/services/views/directly-follows-graph/layout.service.ts","./src/app/services/views/directly-follows-graph/svg.service.ts","./src/app/services/views/loading/loading.service.ts","./src/app/services/views/log-information/display-service/display.service.ts","./src/app/services/views/value-chain/display-service/display.service.ts","./src/app/services/views/value-chain/value-chain-controller.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component, HostListener, OnDestroy, ViewChild } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { LogParserService } from './services/file-operations/log/log-parser.service';\r\nimport { DisplayService } from './services/views/value-chain/display-service/display.service';\r\nimport { debounceTime, Subscription } from 'rxjs';\r\nimport { DirectlyFollowsGraphService } from './services/views/directly-follows-graph/display.service';\r\nimport { EventlogDataService } from './services/common/data/eventlog-data.service';\r\nimport { XesParserService } from './services/file-operations/xes/xes-parser.service';\r\nimport { LogService } from './services/file-operations/log/log.service';\r\nimport { DrawingAreaComponent } from './components/drawingArea/drawingArea.component';\r\nimport { TraceCaseSelectionService } from './services/common/trace-case-selection-service/trace-case-selection.service';\r\nimport { LoadingService } from './services/views/loading/loading.service';\r\nimport { ValueChainControllerService } from './services/views/value-chain/value-chain-controller.service';\r\nimport { EventLog } from './classes/EventLog/eventlog';\r\nimport { XesParser } from './classes/parser/xesParser';\r\nimport { TypedJSON } from 'typedjson';\r\nimport { LogParser } from './classes/parser/logParser';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnDestroy {\r\n    @ViewChild('drawingArea') drawingArea!: DrawingAreaComponent;\r\n\r\n    public textareaFc: FormControl;\r\n    private _sub: Subscription;\r\n    private _subSelectedTraces: Subscription;\r\n    public _selectedTraceCaseIds: Array<number> = [];\r\n\r\n    constructor(\r\n        private _logParserService: LogParserService,\r\n        private _xesParserService: XesParserService,\r\n        private _displayService: DisplayService,\r\n        private _valueChainControllerService: ValueChainControllerService,\r\n        private _traceCaseSelectionService: TraceCaseSelectionService,\r\n        private _logService: LogService,\r\n        private _directlyFollowsGraphService: DirectlyFollowsGraphService,\r\n        public _eventlogDataService: EventlogDataService,\r\n        private loadingSpinner: LoadingService\r\n    ) {\r\n        this.textareaFc = new FormControl();\r\n        this._sub = this.textareaFc.valueChanges\r\n            .pipe(debounceTime(400))\r\n            .subscribe(val => this.processSourceChange(val));\r\n\r\n        this._subSelectedTraces =\r\n            this._traceCaseSelectionService.selectedTraceCaseIds$.subscribe(\r\n                selectedTraceCaseIds => {\r\n                    this._selectedTraceCaseIds = selectedTraceCaseIds;\r\n                    this.updateViews();\r\n                }\r\n            );\r\n        this.textareaFc.setValue(this.logExampleValue());\r\n        this.updateViews();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._sub.unsubscribe();\r\n        this._subSelectedTraces.unsubscribe();\r\n    }\r\n\r\n    @HostListener('document:keydown', ['$event'])\r\n    handleKeyboardEvent(event: KeyboardEvent) {\r\n        var activeElement = document.activeElement;\r\n        var inputs = ['input', 'textarea'];\r\n        if (\r\n            activeElement &&\r\n            inputs.indexOf(activeElement.tagName.toLowerCase()) !== -1\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        if (event.key == 'Escape') {\r\n            this._traceCaseSelectionService.selectTraceCaseIds([]);\r\n        }\r\n    }\r\n\r\n    private processSourceChange(newSource: string) {\r\n        try {\r\n            const result = this._logParserService.parse(newSource);\r\n\r\n            this._traceCaseSelectionService.selectTraceCaseIds([]);\r\n\r\n            if (result !== undefined) {\r\n                this._eventlogDataService.eventLog = result;\r\n                this.updateViews();\r\n            }\r\n        } catch (e) {\r\n            if (e !== LogParser.PARSING_ERROR) {\r\n                alert(\r\n                    'Unexpected error occured while parsing a .log file ' + e\r\n                );\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    processImport([fileExtension, fileContent]: [string, string]) {\r\n        if (['log', 'txt'].includes(fileExtension)) {\r\n            this.processLogImport(fileContent);\r\n        } else if ('xes' === fileExtension) {\r\n            this.processXesImport(fileContent);\r\n        } else {\r\n            alert(\r\n                'The current filetype ' +\r\n                    fileExtension +\r\n                    ' can not be imported!'\r\n            );\r\n        }\r\n    }\r\n\r\n    async processLogImport(fileContent: string) {\r\n        this.loadingSpinner.show();\r\n        this.parseLogFile(fileContent)\r\n            .then(result => {\r\n                this._eventlogDataService.eventLog = result;\r\n                this.updateTextarea(fileContent, false);\r\n                this.updateViews();\r\n            })\r\n            .catch(reason => {\r\n                let message;\r\n                if (reason === LogParser.PARSING_ERROR) {\r\n                    message =\r\n                        'The uploaded .log file could not be parsed.\\n' +\r\n                        'Check the file for valid .log syntax and try again.';\r\n                } else {\r\n                    message =\r\n                        'Unexpected error occurred when parsing given .log file';\r\n                }\r\n                alert(message);\r\n            })\r\n            .finally(() => {\r\n                this.loadingSpinner.hide();\r\n            });\r\n    }\r\n\r\n    async processXesImport(fileContent: string) {\r\n        this.loadingSpinner.show();\r\n        this.parseXesFile(fileContent)\r\n            .then(result => {\r\n                this._eventlogDataService.eventLog = result;\r\n                this.updateTextarea(this._logService.generate(result), false);\r\n                this.updateViews();\r\n            })\r\n            .catch(reason => {\r\n                let message;\r\n                if (reason === XesParser.PARSING_ERROR) {\r\n                    message =\r\n                        'The uploaded XES file could not be parsed.\\n' +\r\n                        'Check the file for valid XES syntax and try again.';\r\n                } else {\r\n                    message =\r\n                        'Unexpected error occurred when parsing given XES file';\r\n                }\r\n                alert(message);\r\n            })\r\n            .finally(() => this.loadingSpinner.hide());\r\n    }\r\n\r\n    parseLogFile(fileContent: string) {\r\n        return new Promise<EventLog>((resolve, reject) => {\r\n            if (typeof Worker !== 'undefined') {\r\n                const worker = new Worker(\r\n                    new URL('./workers/log-parser.worker', import.meta.url)\r\n                );\r\n                worker.onmessage = ({ data }) => {\r\n                    if (data == null) {\r\n                        reject(LogParser.PARSING_ERROR);\r\n                    }\r\n                    const serializer = new TypedJSON(EventLog);\r\n                    const result = serializer.parse(data);\r\n                    if (result != undefined) {\r\n                        resolve(result);\r\n                    } else {\r\n                        reject(LogParser.PARSING_ERROR);\r\n                    }\r\n                };\r\n                worker.onerror = event => {\r\n                    event.preventDefault();\r\n                    reject(LogParser.PARSING_ERROR);\r\n                };\r\n                worker.postMessage(fileContent);\r\n            } else {\r\n                // web worker not available, fallback option\r\n                try {\r\n                    const result = this._logParserService.parse(fileContent);\r\n                    resolve(result);\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    parseXesFile(fileContent: string) {\r\n        return new Promise<EventLog>((resolve, reject) => {\r\n            if (typeof Worker !== 'undefined') {\r\n                const worker = new Worker(\r\n                    new URL('./workers/xes-parser.worker', import.meta.url)\r\n                );\r\n                worker.onmessage = ({ data }) => {\r\n                    if (data == null) {\r\n                        reject(XesParser.PARSING_ERROR);\r\n                    }\r\n                    const serializer = new TypedJSON(EventLog);\r\n                    const result = serializer.parse(data);\r\n                    if (result != undefined) {\r\n                        resolve(result);\r\n                    } else {\r\n                        reject(XesParser.PARSING_ERROR);\r\n                    }\r\n                };\r\n                worker.onerror = event => {\r\n                    event.preventDefault();\r\n                    reject(XesParser.PARSING_ERROR);\r\n                };\r\n                worker.postMessage(fileContent);\r\n            } else {\r\n                // web worker not available, fallback option\r\n                try {\r\n                    const result = this._xesParserService.parse(fileContent);\r\n                    resolve(result);\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    updateTextarea(fileContent: string, emitUpdateEvent = true) {\r\n        this._traceCaseSelectionService.selectTraceCaseIds([]);\r\n        this.textareaFc.setValue(fileContent, { emitEvent: emitUpdateEvent });\r\n    }\r\n\r\n    getTextareaValue() {\r\n        return this.textareaFc.value;\r\n    }\r\n\r\n    updateViews() {\r\n        this._valueChainControllerService.updateValueChain(\r\n            this._eventlogDataService.eventLog\r\n        );\r\n        this._directlyFollowsGraphService.displayDirectlyFollowsGraph(\r\n            this._eventlogDataService.eventLog\r\n        );\r\n    }\r\n\r\n    updateFilter(filter: String) {\r\n        this.updateViews();\r\n    }\r\n\r\n    logExampleValue() {\r\n        return (\r\n            '.type log\\n' +\r\n            '.attributes\\n' +\r\n            'case-id\\n' +\r\n            'concept:name\\n' +\r\n            'org:resource\\n' +\r\n            'lifecycle:transition\\n' +\r\n            'time:timestamp\\n' +\r\n            'numberRepairs\\n' +\r\n            'defectFixed\\n' +\r\n            'defectType\\n' +\r\n            'phoneType\\n' +\r\n            '.events\\n' +\r\n            '1 Register System complete 1970-01-02T12:23:00.000Z\\n' +\r\n            \"1 'Analyze Defect' Tester3 start 1970-01-02T12:23:00.000Z\\n\" +\r\n            \"1 'Analyze Defect' Tester3 complete 1970-01-02T12:30:00.000Z '' '' 6 T2\\n\" +\r\n            \"1 'Repair (Complex)' SolverC1 start 1970-01-02T12:31:00.000Z\\n\" +\r\n            \"1 'Repair (Complex)' SolverC1 complete 1970-01-02T12:49:00.000Z\\n\" +\r\n            \"1 'Test Repair' Tester3 start 1970-01-02T12:49:00.000Z\\n\" +\r\n            \"1 'Test Repair' Tester3 complete 1970-01-02T12:55:00.000Z 0 true\\n\" +\r\n            \"1 'Inform User' System complete 1970-01-02T13:10:00.000Z\\n\" +\r\n            \"1 'Archive Repair' System complete 1970-01-02T13:10:00.000Z 0 true\\n\" +\r\n            '10 Register System complete 1970-01-01T11:09:00.000Z\\n' +\r\n            \"10 'Analyze Defect' Tester2 start 1970-01-01T11:09:00.000Z\\n\" +\r\n            \"10 'Analyze Defect' Tester2 complete 1970-01-01T11:15:00.000Z '' '' 3 T1\\n\" +\r\n            \"10 'Repair (Simple)' SolverS1 start 1970-01-01T11:35:00.000Z\\n\" +\r\n            \"10 'Repair (Simple)' SolverS1 complete 1970-01-01T11:42:00.000Z\\n\" +\r\n            \"10 'Test Repair' Tester6 start 1970-01-01T11:42:00.000Z\\n\" +\r\n            \"10 'Test Repair' Tester6 complete 1970-01-01T11:48:00.000Z 1 false\\n\" +\r\n            \"10 'Restart Repair' System complete 1970-01-01T11:54:00.000Z\\n\" +\r\n            \"10 'Repair (Simple)' SolverS2 start 1970-01-01T11:54:00.000Z\\n\" +\r\n            \"10 'Inform User' System complete 1970-01-01T11:55:00.000Z\\n\" +\r\n            \"10 'Repair (Simple)' SolverS2 complete 1970-01-01T12:03:00.000Z\\n\" +\r\n            \"10 'Test Repair' Tester4 start 1970-01-01T12:03:00.000Z\\n\" +\r\n            \"10 'Test Repair' Tester4 complete 1970-01-01T12:09:00.000Z 2 true\\n\" +\r\n            \"10 'Archive Repair' System complete 1970-01-01T12:14:00.000Z 2 true\\n\" +\r\n            '100 Register System complete 1970-01-04T02:28:00.000Z\\n' +\r\n            \"100 'Analyze Defect' Tester4 start 1970-01-04T02:28:00.000Z\\n\" +\r\n            \"100 'Analyze Defect' Tester4 complete 1970-01-04T02:36:00.000Z '' '' 8 T2\\n\" +\r\n            \"100 'Repair (Complex)' SolverC1 start 1970-01-04T02:52:00.000Z\\n\" +\r\n            \"100 'Repair (Complex)' SolverC1 complete 1970-01-04T03:09:00.000Z\\n\" +\r\n            \"100 'Test Repair' Tester1 start 1970-01-04T03:09:00.000Z\\n\" +\r\n            \"100 'Test Repair' Tester1 complete 1970-01-04T03:18:00.000Z 0 true\\n\" +\r\n            \"100 'Inform User' System complete 1970-01-04T03:20:00.000Z\\n\" +\r\n            \"100 'Archive Repair' System complete 1970-01-04T03:28:00.000Z 0 true\"\r\n        );\r\n    }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n    <div class=\"header\">\r\n        <a href=\"https://www.fernuni-hagen.de/ilovepetrinets/\"\r\n            ><h1>I <span class=\"red\">❤</span> Petri Nets</h1></a\r\n        >\r\n        <h2>Show an event log as a Value-Chain or Directly-Follows-Graph.</h2>\r\n    </div>\r\n    <hr class=\"header-divider\" />\r\n    <div class=\"main-app-body\">\r\n        <app-drawing-area\r\n            (filterChanged)=\"updateFilter($event)\"></app-drawing-area>\r\n        <div class=\"menubar\" fxLayoutGap=\"20px\">\r\n            <div class=\"menu-buttons\" fxLayoutGap=\"20px\" fxFlex=\"1 0 auto\">\r\n                <app-upload-button\r\n                    [permittedFileExtensions]=\"['xes', 'log', 'txt']\"\r\n                    (newFileUploadedEventExtensionContent)=\"\r\n                        processImport($event)\r\n                    \"></app-upload-button>\r\n                <app-export-button\r\n                    (processImport)=\"processImport($event)\"></app-export-button>\r\n            </div>\r\n            <mat-form-field\r\n                appearance=\"outline\"\r\n                class=\"input-form-field\"\r\n                fxFlex=\"1 1 100%\">\r\n                <mat-label>Source file</mat-label>\r\n                <textarea\r\n                    class=\"textarea\"\r\n                    rows=\"13\"\r\n                    matInput\r\n                    [formControl]=\"textareaFc\"></textarea>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <hr />\r\n    <app-footer></app-footer>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { DrawingAreaComponent } from './components/drawingArea/drawingArea.component';\r\nimport { ValueChainComponent } from './components/value-chain/value-chain.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\nimport { UploadButtonComponent } from './components/upload-button/upload-button.component';\r\nimport { DragDropFileUploadDirective } from './directives/drag-drop-file/drag-drop-file-upload.directive';\r\nimport { ExportMenuItemComponent } from './components/export-button/export-menu-item/export-menu-item.component';\r\nimport { DirectlyFollowsGraphComponent } from './components/directly-follows-graph/directly-follows-graph.component';\r\nimport { ChangeViewButtonComponent } from './components/change-view-button/change-view-button.component';\r\nimport { APP_BASE_HREF } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { ExportButtonComponent } from './components/export-button/export-button.component';\r\nimport { SwitchDirectionButtonComponent } from './components/switch-direction-button/switch-direction-button.component';\r\nimport { FilterAreaComponent } from './components/filter-area/filter-area.component';\r\nimport { LogTraceCaseComponent } from './components/log-information-view/log-case/log-trace-case.component';\r\nimport { LogInformationViewComponent } from './components/log-information-view/log-information-view.component';\r\nimport { LayoutService } from './services/common/layout-service/layout.service';\r\nimport { SvgService } from './services/common/svg-service/svg.service';\r\nimport { AttributeValuePipe } from './pipes/attribute-value.pipe';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { GraphTrace } from './classes/diagram/GraphTrace';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\n\r\nconst logInformationLabelExtractor: (trace: GraphTrace) => string = trace =>\r\n    'case ' + trace.caseIds[0];\r\nconst logInformationLabelExtraSizeExtractor: (\r\n    trace: GraphTrace\r\n) => number = trace => trace.caseIds[0].toString().length;\r\nconst valueChainLabelExtractor: (trace: GraphTrace) => string = trace =>\r\n    trace.count + (trace.count == 1 ? ' case' : ' cases');\r\nconst valueChainLabelExtraSizeExtractor: (\r\n    trace: GraphTrace\r\n) => number = trace => trace.caseIds.length.toString().length;\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        ValueChainComponent,\r\n        DrawingAreaComponent,\r\n        FooterComponent,\r\n        UploadButtonComponent,\r\n        DragDropFileUploadDirective,\r\n        ExportMenuItemComponent,\r\n        DirectlyFollowsGraphComponent,\r\n        ChangeViewButtonComponent,\r\n        DrawingAreaComponent,\r\n        ExportButtonComponent,\r\n        SwitchDirectionButtonComponent,\r\n        FilterAreaComponent,\r\n        LogInformationViewComponent,\r\n        LogTraceCaseComponent,\r\n        AttributeValuePipe,\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        FlexLayoutModule,\r\n        FormsModule,\r\n        BrowserAnimationsModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatIconModule,\r\n        MatSidenavModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatSortModule,\r\n        MatMenuModule,\r\n        MatProgressSpinnerModule,\r\n        MatCheckboxModule,\r\n        ScrollingModule,\r\n    ],\r\n    providers: [\r\n        { provide: APP_BASE_HREF, useValue: '/' },\r\n        {\r\n            provide: LayoutService.VALUE_CHAIN_INSTANCE,\r\n            useFactory: () =>\r\n                new LayoutService(\r\n                    LayoutService.X_OFFSET_VALUE_CHAIN,\r\n                    LayoutService.Y_OFFSET_VALUE_CHAIN,\r\n                    LayoutService.X_STEP_VALUE_CHAIN,\r\n                    LayoutService.Y_STEP_VALUE_CHAIN,\r\n                    LayoutService.X_LABELSIZE_VALUE_CHAIN,\r\n                    valueChainLabelExtraSizeExtractor\r\n                ),\r\n        },\r\n        {\r\n            provide: LayoutService.LOG_INFORMATION_INSTANCE,\r\n            useFactory: () =>\r\n                new LayoutService(\r\n                    LayoutService.X_OFFSET_LOG_INFORMATION,\r\n                    LayoutService.Y_OFFSET_LOG_INFORMATION,\r\n                    LayoutService.X_STEP_LOG_INFORMATION,\r\n                    LayoutService.Y_STEP_LOG_INFORMATION,\r\n                    LayoutService.X_LABELSIZE_LOG_INFORMATION,\r\n                    logInformationLabelExtraSizeExtractor\r\n                ),\r\n        },\r\n        {\r\n            provide: SvgService.VALUE_CHAIN_INSTANCE,\r\n            useFactory: (layoutService: LayoutService) =>\r\n                new SvgService(\r\n                    layoutService,\r\n                    SvgService.MAXFONTWIDTH_VALUE_CHAIN,\r\n                    SvgService.BOX_WIDTH_VALUE_CHAIN,\r\n                    SvgService.BOX_HEIGHT_VALUE_CHAIN,\r\n                    valueChainLabelExtractor,\r\n                    valueChainLabelExtraSizeExtractor\r\n                ),\r\n            deps: [LayoutService.VALUE_CHAIN_INSTANCE],\r\n        },\r\n        {\r\n            provide: SvgService.LOG_INFORMATION_INSTANCE,\r\n            useFactory: (layoutService: LayoutService) =>\r\n                new SvgService(\r\n                    layoutService,\r\n                    SvgService.MAXFONTWIDTH_LOG_INFOMRATION,\r\n                    SvgService.BOX_WIDTH_LOG_INFORMATION,\r\n                    SvgService.BOX_HEIGHT_LOG_INFORMATION,\r\n                    logInformationLabelExtractor,\r\n                    logInformationLabelExtraSizeExtractor\r\n                ),\r\n            deps: [LayoutService.LOG_INFORMATION_INSTANCE],\r\n        },\r\n    ],\r\n    bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import 'reflect-metadata';\r\nimport { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject\r\nexport class Classifier {\r\n    @jsonMember(String)\r\n    private _name: string;\r\n    @jsonArrayMember(String)\r\n    private _keys: Array<string>;\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n    public set name(value: string) {\r\n        this._name = value;\r\n    }\r\n    public get keys(): Array<string> {\r\n        return this._keys;\r\n    }\r\n    public set keys(value: Array<string>) {\r\n        this._keys = value;\r\n    }\r\n\r\n    constructor(name: string, keys: Array<string>) {\r\n        this._name = name;\r\n        this._keys = keys;\r\n    }\r\n}\r\n","import {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from './eventlogattribute';\r\nimport 'reflect-metadata';\r\nimport { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject({\r\n    knownTypes: [\r\n        StringAttribute,\r\n        DateAttribute,\r\n        IntAttribute,\r\n        FloatAttribute,\r\n        BooleanAttribute,\r\n    ],\r\n})\r\nexport class Event {\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _attributes: Array<EventLogAttribute>;\r\n    @jsonMember(String)\r\n    private _activity: string;\r\n\r\n    public get attributes(): Array<EventLogAttribute> {\r\n        return this._attributes;\r\n    }\r\n    public set attributes(value: Array<EventLogAttribute>) {\r\n        this._attributes = value;\r\n    }\r\n\r\n    public get activity(): string {\r\n        return this._activity;\r\n    }\r\n\r\n    public set activity(value: string) {\r\n        this._activity = value;\r\n    }\r\n\r\n    public getAttribute(key: string): EventLogAttribute {\r\n        return this._attributes.filter(\r\n            attribute => key === attribute.key.toString()\r\n        )[0];\r\n    }\r\n\r\n    constructor(attributes: Array<EventLogAttribute>, activity: string) {\r\n        this._activity = activity;\r\n        this._attributes = attributes;\r\n    }\r\n}\r\n","import {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from './eventlogattribute';\r\nimport { Classifier } from './classifier';\r\nimport { Trace } from './trace';\r\nimport 'reflect-metadata';\r\nimport { jsonObject, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject({\r\n    knownTypes: [\r\n        StringAttribute,\r\n        DateAttribute,\r\n        IntAttribute,\r\n        FloatAttribute,\r\n        BooleanAttribute,\r\n    ],\r\n})\r\nexport class EventLog {\r\n    @jsonArrayMember(Classifier)\r\n    private _classifiers: Array<Classifier>;\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _globalEventAttributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _globalTraceAttributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _attributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(Trace)\r\n    private _traces: Array<Trace>;\r\n\r\n    public get classifiers(): Array<Classifier> {\r\n        return this._classifiers;\r\n    }\r\n    public set classifiers(value: Array<Classifier>) {\r\n        this._classifiers = value;\r\n    }\r\n\r\n    public get globalEventAttributes(): Array<EventLogAttribute> {\r\n        return this._globalEventAttributes;\r\n    }\r\n    public set globalEventAttributes(value: Array<EventLogAttribute>) {\r\n        this._globalEventAttributes = value;\r\n    }\r\n\r\n    public get globalTraceAttributes(): Array<EventLogAttribute> {\r\n        return this._globalTraceAttributes;\r\n    }\r\n    public set globalTraceAttributes(value: Array<EventLogAttribute>) {\r\n        this._globalTraceAttributes = value;\r\n    }\r\n\r\n    public get attributes(): Array<EventLogAttribute> {\r\n        return this._attributes;\r\n    }\r\n    public set attributes(value: Array<EventLogAttribute>) {\r\n        this._attributes = value;\r\n    }\r\n\r\n    public get traces(): Array<Trace> {\r\n        return this._traces;\r\n    }\r\n\r\n    public set traces(value: Array<Trace>) {\r\n        this._traces = value;\r\n    }\r\n\r\n    public get sortedTraces(): Array<Array<Trace>> {\r\n        let result = new Array<Array<Trace>>();\r\n\r\n        this._traces.forEach(trace => {\r\n            const index = result.findIndex(val => {\r\n                for (let i = 0; i < val[0].events.length; i++) {\r\n                    if (val[0].events.length !== trace.events.length) {\r\n                        return false;\r\n                    }\r\n                    if (\r\n                        val[0].events[i].activity !== trace.events[i].activity\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            if (index == -1) {\r\n                let arr = new Array<Trace>();\r\n                arr.push(trace);\r\n                result.push(arr);\r\n            } else {\r\n                result[index].push(trace); // Trace zu den anderen hinzufügen die die gleichen Events haben\r\n            }\r\n        });\r\n        result.sort((a, b) => {\r\n            return b.length - a.length;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    constructor(\r\n        classifiers: Array<Classifier>,\r\n        globalEventAttributes: Array<EventLogAttribute>,\r\n        globalTraceAttributes: Array<EventLogAttribute>,\r\n        traces: Array<Trace>,\r\n        attributes: Array<EventLogAttribute>\r\n    ) {\r\n        this._classifiers = classifiers;\r\n        this._globalEventAttributes = globalEventAttributes;\r\n        this._globalTraceAttributes = globalTraceAttributes;\r\n        this._attributes = attributes;\r\n        this._traces = traces;\r\n    }\r\n}\r\n","import 'reflect-metadata';\r\nimport { jsonObject, jsonMember } from 'typedjson';\r\n\r\nexport abstract class EventLogAttribute {\r\n    @jsonMember(String)\r\n    key: string = '';\r\n    abstract value: any;\r\n}\r\n\r\n@jsonObject\r\nexport class StringAttribute extends EventLogAttribute {\r\n    @jsonMember(String)\r\n    value: string;\r\n\r\n    constructor(value: string, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class DateAttribute extends EventLogAttribute {\r\n    @jsonMember(Date)\r\n    value: Date;\r\n\r\n    constructor(value: Date, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class IntAttribute extends EventLogAttribute {\r\n    @jsonMember(Number)\r\n    value: number;\r\n\r\n    constructor(value: number, key: string) {\r\n        super();\r\n        this.value = Math.round(value);\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class FloatAttribute extends EventLogAttribute {\r\n    @jsonMember(Number)\r\n    value: number;\r\n\r\n    constructor(value: number, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\n@jsonObject\r\nexport class BooleanAttribute extends EventLogAttribute {\r\n    @jsonMember(Boolean)\r\n    value: boolean;\r\n\r\n    constructor(value: boolean, key: string) {\r\n        super();\r\n        this.value = value;\r\n        this.key = key;\r\n    }\r\n}\r\n","import {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from './eventlogattribute';\r\nimport { Event } from './event';\r\nimport 'reflect-metadata';\r\nimport { jsonObject, jsonMember, jsonArrayMember } from 'typedjson';\r\n\r\n@jsonObject({\r\n    knownTypes: [\r\n        StringAttribute,\r\n        DateAttribute,\r\n        IntAttribute,\r\n        FloatAttribute,\r\n        BooleanAttribute,\r\n    ],\r\n})\r\nexport class Trace {\r\n    @jsonArrayMember(EventLogAttribute)\r\n    private _attributes: Array<EventLogAttribute>;\r\n    @jsonArrayMember(Event)\r\n    private _events: Array<Event>;\r\n    @jsonMember(Number)\r\n    private _caseId: number;\r\n\r\n    public get attributes(): Array<EventLogAttribute> {\r\n        return this._attributes;\r\n    }\r\n    public set attributes(value: Array<EventLogAttribute>) {\r\n        this._attributes = value;\r\n    }\r\n\r\n    public get events(): Array<Event> {\r\n        return this._events;\r\n    }\r\n    public set events(value: Array<Event>) {\r\n        this._events = value;\r\n    }\r\n\r\n    public get caseId(): number {\r\n        return this._caseId;\r\n    }\r\n    public set caseId(value: number) {\r\n        this._caseId = value;\r\n    }\r\n\r\n    constructor(\r\n        attributes: Array<EventLogAttribute>,\r\n        events: Array<Event>,\r\n        caseId: number\r\n    ) {\r\n        this._attributes = attributes;\r\n        this._events = events;\r\n        this._caseId = caseId;\r\n    }\r\n}\r\n","import { Element } from './element';\n\nexport class GraphEvent {\n    public get svgElements(): Array<Element> {\n        return this._svgElements;\n    }\n    public get activity(): String {\n        return this._activity;\n    }\n    constructor(\n        private readonly _activity: String,\n        private readonly _svgElements: Array<Element>\n    ) {}\n}\n","import { Element } from './element';\nimport { GraphEvent } from './GraphEvent';\n\nexport class GraphTrace {\n    public get caseIds(): Array<number> {\n        return this._caseIds;\n    }\n    public get svgElements(): Array<Element> {\n        return this._svgElements;\n    }\n    public get count(): number {\n        return this._count;\n    }\n    public get events(): Array<GraphEvent> {\n        return this._events;\n    }\n\n    constructor(\n        private readonly _events: Array<GraphEvent>,\n        private readonly _count: number,\n        private readonly _svgElements: Array<Element>,\n        private readonly _caseIds: Array<number>\n    ) {}\n}\n","import { GraphTrace } from './GraphTrace';\r\n\r\nexport class Diagram {\r\n    private readonly _traces: Array<GraphTrace>;\r\n\r\n    public get traces(): Array<GraphTrace> {\r\n        return this._traces;\r\n    }\r\n\r\n    constructor(traces: Array<GraphTrace>) {\r\n        this._traces = traces;\r\n    }\r\n}\r\n","export enum ElementType {\n    text,\n    box,\n}\n\nexport class Element {\n    private _x: number;\n    private _y: number;\n    private _svgElement: SVGElement | undefined;\n    private _type: ElementType;\n    private _selectTraceCaseIds: Function;\n\n    public get type(): ElementType {\n        return this._type;\n    }\n    public set type(value: ElementType) {\n        this._type = value;\n    }\n\n    constructor(type: ElementType, selectTraceCaseIds: Function) {\n        this._x = 0;\n        this._y = 0;\n        this._type = type;\n        this._selectTraceCaseIds = selectTraceCaseIds;\n    }\n\n    get x(): number {\n        return this._x;\n    }\n\n    set x(value: number) {\n        this._x = value;\n    }\n\n    get y(): number {\n        return this._y;\n    }\n\n    set y(value: number) {\n        this._y = value;\n    }\n\n    public registerSvg(svg: SVGElement) {\n        this._svgElement = svg;\n        this._svgElement.onmousedown = event => {\n            this.processMouseDown(event);\n        };\n        this._svgElement.onmouseup = event => {\n            this.processMouseUp(event);\n        };\n    }\n\n    private processMouseDown(event: MouseEvent) {\n        this._selectTraceCaseIds();\n    }\n\n    private processMouseUp(event: MouseEvent) {}\n}\n","import { Vertex } from './vertex';\r\n\r\nexport class Edge {\r\n    private _startVertex: Vertex;\r\n    private _endVertex: Vertex;\r\n    private _activityCount: number;\r\n    private _pathSvgElement: SVGElement | undefined;\r\n    private _textSvgElement: SVGElement | undefined;\r\n    private _isReversed: boolean;\r\n\r\n    public get startVertex(): Vertex {\r\n        return this._startVertex;\r\n    }\r\n    public set startVertex(value: Vertex) {\r\n        this._startVertex = value;\r\n    }\r\n\r\n    public get endVertex(): Vertex {\r\n        return this._endVertex;\r\n    }\r\n    public set endVertex(value: Vertex) {\r\n        this._endVertex = value;\r\n    }\r\n\r\n    public get activityCount(): number {\r\n        return this._activityCount;\r\n    }\r\n    public set activityCount(value: number) {\r\n        this._activityCount = value;\r\n    }\r\n\r\n    public get pathSvgElement(): SVGElement | undefined {\r\n        return this._pathSvgElement;\r\n    }\r\n\r\n    public set pathSvgElement(svgElement: SVGElement | undefined) {\r\n        this._pathSvgElement = svgElement;\r\n    }\r\n\r\n    public get textSvgElement(): SVGElement | undefined {\r\n        return this._textSvgElement;\r\n    }\r\n\r\n    public set textSvgElement(svgElement: SVGElement | undefined) {\r\n        this._textSvgElement = svgElement;\r\n    }\r\n\r\n    public get isReversed(): boolean {\r\n        return this._isReversed;\r\n    }\r\n    public set isReversed(value: boolean) {\r\n        this._isReversed = value;\r\n    }\r\n\r\n    constructor(\r\n        startVertex: Vertex,\r\n        endVertex: Vertex,\r\n        activityCount: number = 0,\r\n        isReversed: boolean = false\r\n    ) {\r\n        this._startVertex = startVertex;\r\n        this._endVertex = endVertex;\r\n        this._activityCount = activityCount;\r\n        this._isReversed = isReversed;\r\n    }\r\n\r\n    public reverse(): void {\r\n        let temp = this._startVertex;\r\n        this._startVertex = this._endVertex;\r\n        this._endVertex = temp;\r\n        this._isReversed = !this._isReversed;\r\n    }\r\n\r\n    public isTargetingSelf(): boolean {\r\n        return this._startVertex == this._endVertex;\r\n    }\r\n}\r\n","import { Edge } from './edge';\r\nimport { Vertex } from './vertex';\r\n\r\nexport class Graph {\r\n    private _vertices: Array<Vertex>;\r\n    private _edges: Array<Edge>;\r\n\r\n    public get vertices(): Array<Vertex> {\r\n        return this._vertices;\r\n    }\r\n\r\n    public get edges(): Array<Edge> {\r\n        return this._edges;\r\n    }\r\n\r\n    constructor(vertices: Array<Vertex>, edges: Array<Edge>) {\r\n        this._vertices = vertices;\r\n        this._edges = edges;\r\n    }\r\n\r\n    public addEdges(edges: Edge[]): void {\r\n        edges.forEach(edge => this.edges.push(edge));\r\n    }\r\n\r\n    public removeVertex(vertex: Vertex): void {\r\n        let index = this._vertices.findIndex(v => v === vertex);\r\n        if (index > -1) this._vertices.splice(index, 1);\r\n    }\r\n\r\n    public removeVertices(vertices: Vertex[]): void {\r\n        vertices.forEach(vertex => this.removeVertex(vertex));\r\n    }\r\n\r\n    public removeEdge(edge: Edge): void {\r\n        let index = this._edges.findIndex(e => e === edge);\r\n        if (index > -1) this._edges.splice(index, 1);\r\n    }\r\n\r\n    public removeEdges(edges: Edge[]): void {\r\n        edges.forEach(edge => this.removeEdge(edge));\r\n    }\r\n\r\n    public getSinks(): Vertex[] {\r\n        let vertices: Vertex[] = [];\r\n\r\n        this._vertices.forEach(vertex => {\r\n            let outgoingEdges = vertex.getOutgoingEdges(this._edges);\r\n            let incomingEdges = vertex.getIncomingEdges(this._edges);\r\n            if (outgoingEdges.length == 0 && incomingEdges.length != 0)\r\n                vertices.push(vertex);\r\n        });\r\n\r\n        return vertices;\r\n    }\r\n\r\n    public getIsolatedVertices(): Vertex[] {\r\n        let vertices: Vertex[] = [];\r\n\r\n        this._vertices.forEach(vertex => {\r\n            let outgoingEdges = vertex.getOutgoingEdges(this._edges);\r\n            let incomingEdges = vertex.getIncomingEdges(this._edges);\r\n            if (outgoingEdges.length == 0 && incomingEdges.length == 0)\r\n                vertices.push(vertex);\r\n        });\r\n\r\n        return vertices;\r\n    }\r\n\r\n    public getSources(): Vertex[] {\r\n        let vertices: Vertex[] = [];\r\n\r\n        this._vertices.forEach(vertex => {\r\n            let outgoingEdges = vertex.getOutgoingEdges(this._edges);\r\n            let incomingEdges = vertex.getIncomingEdges(this._edges);\r\n            if (outgoingEdges.length != 0 && incomingEdges.length == 0)\r\n                vertices.push(vertex);\r\n        });\r\n\r\n        return vertices;\r\n    }\r\n\r\n    //Gibt den Knoten zurück, der den maximalen Wert bezüglich ausgehender Kanten minus eingehender Kanten besitzt.\r\n    public getMaxEdgeDifferenceVertex(): Vertex {\r\n        let maxVertex: Vertex = this._vertices[0];\r\n        let maxDiff = Number.MIN_VALUE;\r\n\r\n        this._vertices.forEach(vertex => {\r\n            let outgoingEdges = vertex.getOutgoingEdges(this._edges);\r\n            let incomingEdges = vertex.getIncomingEdges(this._edges);\r\n            let diff = outgoingEdges.length - incomingEdges.length;\r\n\r\n            if (diff > maxDiff) {\r\n                maxVertex = vertex;\r\n                maxDiff = diff;\r\n            }\r\n        });\r\n\r\n        return maxVertex;\r\n    }\r\n\r\n    public getMaxVerticesOnLayer(): number {\r\n        let max: number = 0;\r\n\r\n        for (let layer = 1; layer <= this.getMaxLayer(); layer++)\r\n            max = Math.max(max, this.getVerticesByLayer(layer).length);\r\n\r\n        return max;\r\n    }\r\n\r\n    public getMaxLayer(): number {\r\n        let maxLayer: number = 0;\r\n\r\n        this.vertices.forEach(\r\n            vertex => (maxLayer = Math.max(maxLayer, vertex.layer))\r\n        );\r\n\r\n        return maxLayer;\r\n    }\r\n\r\n    public getVerticesByLayer(layer: number): Vertex[] {\r\n        return this.vertices.filter(vertex => vertex.layer === layer);\r\n    }\r\n\r\n    public getVerticesSortedByPosition(layer: number): Vertex[] {\r\n        return this.getVerticesByLayer(layer).sort((v1, v2) => {\r\n            if (v1.position > v2.position) return 1;\r\n            if (v1.position < v2.position || Math.random() < 0.5) return -1;\r\n            else return 0;\r\n        });\r\n    }\r\n\r\n    public getMaxActivityCountVertex(): number {\r\n        let max = 0;\r\n\r\n        this.vertices.forEach(vertex => {\r\n            max = Math.max(vertex.activityCount, max);\r\n        });\r\n\r\n        return max;\r\n    }\r\n\r\n    public getMaxPosition(): number {\r\n        let maxPosition = Number.MIN_VALUE;\r\n        this.vertices.forEach(\r\n            vertex => (maxPosition = Math.max(vertex.position, maxPosition))\r\n        );\r\n        return maxPosition;\r\n    }\r\n\r\n    public getMinPosition(): number {\r\n        let minPosition = Number.MAX_VALUE;\r\n        this.vertices.forEach(\r\n            vertex => (minPosition = Math.min(vertex.position, minPosition))\r\n        );\r\n        return minPosition;\r\n    }\r\n\r\n    public getEdgesByStartVertex(vertex: Vertex): Edge[] {\r\n        let edges: Edge[] = this.edges.filter(\r\n            edge => edge.startVertex === vertex\r\n        );\r\n        return edges;\r\n    }\r\n\r\n    public getEdgesByEndVertex(vertex: Vertex): Edge[] {\r\n        let edges: Edge[] = this.edges.filter(\r\n            edge => edge.endVertex === vertex\r\n        );\r\n        return edges;\r\n    }\r\n\r\n    public getEdgesByLayer(layer: number): Edge[] {\r\n        let edges: Edge[] = this.edges.filter(\r\n            edge =>\r\n                edge.startVertex.layer === layer ||\r\n                edge.endVertex.layer === layer\r\n        );\r\n        return edges;\r\n    }\r\n}\r\n","import { DirectlyFollowsGraphService } from 'src/app/services/views/directly-follows-graph/display.service';\r\nimport { Edge } from './edge';\r\n\r\nexport class Vertex {\r\n    private _activityName: String;\r\n    private _activityCount: number;\r\n    private _layer: number;\r\n    private _position: number;\r\n    private _svgElement: SVGElement | undefined;\r\n    private _isDummy: boolean;\r\n    private _isStart: boolean = false;\r\n    private _isEnd: boolean = false;\r\n\r\n    public get activityName(): String {\r\n        return this._activityName;\r\n    }\r\n\r\n    public set activityName(value: String) {\r\n        this._activityName = value;\r\n    }\r\n\r\n    public get activityCount(): number {\r\n        return this._activityCount;\r\n    }\r\n\r\n    public set activityCount(value: number) {\r\n        this._activityCount = value;\r\n    }\r\n\r\n    public get layer(): number {\r\n        return this._layer;\r\n    }\r\n\r\n    public set layer(value: number) {\r\n        this._layer = value;\r\n    }\r\n\r\n    public get position(): number {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(value: number) {\r\n        this._position = value;\r\n    }\r\n\r\n    public get svgElement(): SVGElement | undefined {\r\n        return this._svgElement;\r\n    }\r\n\r\n    public set svgElement(svgElement: SVGElement | undefined) {\r\n        this._svgElement = svgElement;\r\n\r\n        if (this._svgElement != undefined) {\r\n            let rect: SVGElement = this._svgElement?.children[0] as SVGElement;\r\n\r\n            //Anzeige von Dummyknoten, wenn sie ausgewählt werden sollen\r\n            if (\r\n                this._isDummy &&\r\n                rect !== undefined &&\r\n                !(this.isStart || this.isEnd)\r\n            ) {\r\n                this._svgElement.onmouseenter = event => {\r\n                    rect.setAttribute('fill', 'rgb(150, 150, 150)');\r\n                    rect.setAttribute('fill-opacity', '1');\r\n                    rect.setAttribute('stroke-width', '2');\r\n                    rect.setAttribute('stroke', 'black');\r\n                };\r\n                this._svgElement.onmouseleave = event => {\r\n                    rect.removeAttribute('fill');\r\n                    rect.setAttribute('fill-opacity', '0');\r\n                    rect.removeAttribute('stroke-width');\r\n                    rect.removeAttribute('stroke');\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    public get isDummy(): boolean {\r\n        return this._isDummy;\r\n    }\r\n\r\n    public get isStart(): boolean {\r\n        return this._isStart;\r\n    }\r\n\r\n    public set isStart(value: boolean) {\r\n        this._isStart = value;\r\n    }\r\n\r\n    public get isEnd(): boolean {\r\n        return this._isEnd;\r\n    }\r\n\r\n    public set isEnd(value: boolean) {\r\n        this._isEnd = value;\r\n    }\r\n\r\n    constructor(\r\n        activityName: String,\r\n        activityCount: number = 0,\r\n        isDummy: boolean = false\r\n    ) {\r\n        this._activityName = activityName;\r\n        this._activityCount = activityCount;\r\n        this._layer = 0;\r\n        this._position = 0;\r\n        this._isDummy = isDummy;\r\n    }\r\n\r\n    public getSvgElementXValue(): number {\r\n        let xString = this.svgElement?.getAttribute('x');\r\n        let x: number = 0;\r\n        if (xString != null) x = +xString;\r\n        return x;\r\n    }\r\n\r\n    public getSvgElementYValue(): number {\r\n        let yString = this.svgElement?.getAttribute('y');\r\n        let y: number = 0;\r\n        if (yString != null) y = +yString;\r\n        return y;\r\n    }\r\n\r\n    //Gibt alle Kanten mit Knoten niedrigerer Ebenen zurück\r\n    public getLowerLayerEdges(edges: Edge[]): Edge[] {\r\n        let lowerLayerEdges: Edge[] = [];\r\n\r\n        edges.forEach(edge => {\r\n            if (\r\n                (this === edge.startVertex &&\r\n                    edge.startVertex.layer > edge.endVertex.layer) ||\r\n                (this === edge.endVertex &&\r\n                    edge.startVertex.layer < edge.endVertex.layer)\r\n            )\r\n                lowerLayerEdges.push(edge);\r\n        });\r\n\r\n        return lowerLayerEdges;\r\n    }\r\n\r\n    //Gibt alle Kanten mit Knoten höherer Ebenen zurück\r\n    public getUpperLayerEdges(edges: Edge[]): Edge[] {\r\n        let upperLayerEdges: Edge[] = [];\r\n\r\n        edges.forEach(edge => {\r\n            if (\r\n                (this === edge.startVertex &&\r\n                    edge.startVertex.layer < edge.endVertex.layer) ||\r\n                (this === edge.endVertex &&\r\n                    edge.startVertex.layer > edge.endVertex.layer)\r\n            )\r\n                upperLayerEdges.push(edge);\r\n        });\r\n\r\n        return upperLayerEdges;\r\n    }\r\n\r\n    //Berechnet die Position einer Kante zu den anderen Kanten\r\n    public calculateEdgePosition(\r\n        edge: Edge,\r\n        edges: Edge[],\r\n        verticalDirection: boolean\r\n    ): number {\r\n        let position = 1;\r\n\r\n        edges.forEach(e => {\r\n            //Kanten verlaufen in die selbe Richtung\r\n            if (\r\n                edge.startVertex.layer < edge.endVertex.layer ===\r\n                e.startVertex.layer < e.endVertex.layer\r\n            ) {\r\n                if (\r\n                    //Bei vertikaler Ausrichtung überprüfe X Werte\r\n                    (verticalDirection &&\r\n                        ((this === e.startVertex &&\r\n                            edge.endVertex.getSvgElementXValue() >\r\n                                e.endVertex.getSvgElementXValue()) ||\r\n                            (this === e.endVertex &&\r\n                                edge.startVertex.getSvgElementXValue() >\r\n                                    e.startVertex.getSvgElementXValue()))) ||\r\n                    //Bei horizontaler Ausrichtung überprüfe Y Werte\r\n                    (!verticalDirection &&\r\n                        ((this === e.startVertex &&\r\n                            edge.endVertex.getSvgElementYValue() >\r\n                                e.endVertex.getSvgElementYValue()) ||\r\n                            (this === e.endVertex &&\r\n                                edge.startVertex.getSvgElementYValue() >\r\n                                    e.startVertex.getSvgElementYValue())))\r\n                )\r\n                    position++;\r\n            }\r\n            //Kanten verlaufen in gegengesetzte Richtungen\r\n            else {\r\n                if (\r\n                    //Bei vertikaler Ausrichtung überprüfe X Werte\r\n                    (verticalDirection &&\r\n                        ((this === e.startVertex &&\r\n                            edge.startVertex.getSvgElementXValue() >=\r\n                                e.endVertex.getSvgElementXValue()) ||\r\n                            (this === e.endVertex &&\r\n                                edge.endVertex.getSvgElementXValue() >=\r\n                                    e.startVertex.getSvgElementXValue()))) ||\r\n                    //Bei horizontaler Ausrichtung überprüfe Y Werte\r\n                    (!verticalDirection &&\r\n                        ((this === e.startVertex &&\r\n                            edge.startVertex.getSvgElementYValue() >=\r\n                                e.endVertex.getSvgElementYValue()) ||\r\n                            (this === e.endVertex &&\r\n                                edge.endVertex.getSvgElementYValue() >=\r\n                                    e.startVertex.getSvgElementYValue())))\r\n                )\r\n                    position++;\r\n            }\r\n\r\n            //Verlaufen zwischen 2 Knoten Kanten in beide Richtungen, positioniere eine Kante weiter links\r\n            if (\r\n                (edge.startVertex == this &&\r\n                    edge.endVertex == e.startVertex &&\r\n                    edge.startVertex.layer < edge.endVertex.layer) ||\r\n                (edge.endVertex == this &&\r\n                    edge.startVertex == e.endVertex &&\r\n                    edge.startVertex.layer < edge.endVertex.layer)\r\n            )\r\n                position--;\r\n        });\r\n\r\n        return position;\r\n    }\r\n\r\n    //Gibt alle ausgehenden Kanten zurück\r\n    public getOutgoingEdges(edges: Edge[]): Edge[] {\r\n        let outgoingEdges: Edge[] = [];\r\n\r\n        edges.forEach(edge => {\r\n            if (this === edge.startVertex && !edge.isTargetingSelf())\r\n                outgoingEdges.push(edge);\r\n        });\r\n\r\n        return outgoingEdges;\r\n    }\r\n\r\n    //Gibt alle eingehenden Kanten zurück\r\n    public getIncomingEdges(edges: Edge[]): Edge[] {\r\n        let incomingEdges: Edge[] = [];\r\n\r\n        edges.forEach(edge => {\r\n            if (this === edge.endVertex && !edge.isTargetingSelf())\r\n                incomingEdges.push(edge);\r\n        });\r\n\r\n        return incomingEdges;\r\n    }\r\n}\r\n","import { EventLog } from '../EventLog/eventlog';\r\nimport { Event } from '../EventLog/event';\r\nimport { Trace } from '../EventLog/trace';\r\nimport {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from '../EventLog/eventlogattribute';\r\n\r\nexport class LogParser {\r\n    public static PARSING_ERROR = new Error(\r\n        'given .type log string can not be parsed'\r\n    );\r\n\r\n    private readonly _undefinedValue = \"''\";\r\n\r\n    private readonly _typeLogElement = '.type log';\r\n    private readonly _attributesElement = '.attributes';\r\n    private readonly _eventsElement = '.events';\r\n\r\n    private readonly _caseIdElement = 'case-id';\r\n    private readonly _activityElement = 'concept:name';\r\n    private readonly _escapeString = \"'\";\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * Liest einen String im .type log Format ein, das von Robin Bergenthum und Jakub Kovar definiert wurde und wandelt es in die\r\n     * intern verwendete Repräsentation als {@link EventLog} um\r\n     *\r\n     * @param text String im .type log Format, der geparst werden soll\r\n     * @return interne Darstellung als {@link EventLog}\r\n     */\r\n    public parse(text: string): EventLog {\r\n        if (text.trim() === '') {\r\n            return new EventLog([], [], [], [], []);\r\n        }\r\n\r\n        const lines: string[] = text.split(/\\r?\\n/);\r\n\r\n        const indexLog = LogParser.indexOfTokenIfExists(\r\n            lines,\r\n            this._typeLogElement\r\n        );\r\n        const indexAttributes = LogParser.indexOfTokenIfExists(\r\n            lines,\r\n            this._attributesElement\r\n        );\r\n        const indexEvents = LogParser.indexOfTokenIfExists(\r\n            lines,\r\n            this._eventsElement\r\n        );\r\n        const max = lines.length;\r\n        const keywordIndices: number[] = [\r\n            indexLog,\r\n            indexAttributes,\r\n            indexEvents,\r\n            max,\r\n        ];\r\n\r\n        const attributesLines: string[] = lines.slice(\r\n            indexAttributes + 1,\r\n            LogParser.nextKeyword(keywordIndices, indexAttributes)\r\n        );\r\n        const headers: string[] = attributesLines.map(attribute =>\r\n            attribute.trim()\r\n        );\r\n\r\n        const eventLines: string[] = lines.slice(\r\n            indexEvents + 1,\r\n            LogParser.nextKeyword(keywordIndices, indexEvents)\r\n        );\r\n\r\n        const traces: Trace[] = this.parseTraces(headers, eventLines);\r\n        return new EventLog([], [], [], traces, []);\r\n    }\r\n\r\n    private parseTraces(headers: string[], eventLines: string[]): Trace[] {\r\n        const asTable = eventLines.map(eventLine =>\r\n            this.splitEventLineString(eventLine)\r\n        );\r\n\r\n        const dictCaseIdentifierToTrace: Map<number, Trace> = new Map();\r\n        asTable.forEach(eventLineSplit => {\r\n            if (\r\n                eventLineSplit[headers.indexOf(this._caseIdElement)] ===\r\n                    undefined ||\r\n                eventLineSplit[headers.indexOf(this._activityElement)] ===\r\n                    undefined\r\n            ) {\r\n                throw LogParser.PARSING_ERROR;\r\n            }\r\n\r\n            const caseId: number = parseInt(\r\n                eventLineSplit[headers.indexOf(this._caseIdElement)]\r\n            );\r\n            const activity: string =\r\n                eventLineSplit[headers.indexOf(this._activityElement)];\r\n\r\n            const eventLogAttributes: EventLogAttribute[] = headers\r\n                .filter(\r\n                    header =>\r\n                        ![this._caseIdElement, this._activityElement].includes(\r\n                            header\r\n                        )\r\n                )\r\n                .filter(\r\n                    header => headers.indexOf(header) < eventLineSplit.length\r\n                )\r\n                .filter(\r\n                    header =>\r\n                        eventLineSplit[headers.indexOf(header)] !==\r\n                        this._undefinedValue\r\n                )\r\n                .map(header =>\r\n                    LogParser.eventLogAttributeOf(\r\n                        header,\r\n                        eventLineSplit[headers.indexOf(header)]\r\n                    )\r\n                );\r\n\r\n            if (!dictCaseIdentifierToTrace.has(caseId)) {\r\n                dictCaseIdentifierToTrace.set(\r\n                    caseId,\r\n                    new Trace([], [], caseId)\r\n                );\r\n            }\r\n            dictCaseIdentifierToTrace\r\n                .get(caseId)\r\n                ?.events.push(new Event(eventLogAttributes, activity));\r\n        });\r\n\r\n        return Array.from(dictCaseIdentifierToTrace.values());\r\n    }\r\n\r\n    private splitEventLineString(eventLine: string): string[] {\r\n        let lineSplit = [];\r\n        while (eventLine !== '') {\r\n            let startIndex: number;\r\n            let endIndex: number | undefined;\r\n            let nextIndex: number | undefined;\r\n            if (eventLine.startsWith(this._undefinedValue)) {\r\n                lineSplit.push(this._undefinedValue);\r\n                eventLine = eventLine.slice(this._undefinedValue.length + 1);\r\n                continue;\r\n            } else if (eventLine.startsWith(this._escapeString)) {\r\n                startIndex = 1;\r\n                for (\r\n                    let actIndex = startIndex;\r\n                    actIndex < eventLine.length;\r\n                    actIndex++\r\n                ) {\r\n                    if (\r\n                        eventLine.charAt(actIndex) == this._escapeString &&\r\n                        eventLine.charAt(actIndex - 1) !== '\\\\'\r\n                    ) {\r\n                        endIndex = actIndex;\r\n                        nextIndex = endIndex + 2;\r\n                        break;\r\n                    }\r\n                }\r\n                if (endIndex === undefined || nextIndex === undefined) {\r\n                    throw LogParser.PARSING_ERROR;\r\n                }\r\n            } else {\r\n                startIndex = 0;\r\n                if (eventLine.indexOf(' ') === -1) {\r\n                    endIndex = eventLine.length;\r\n                } else {\r\n                    endIndex = eventLine.indexOf(' ');\r\n                }\r\n                nextIndex = endIndex + 1;\r\n            }\r\n            lineSplit.push(\r\n                eventLine\r\n                    .slice(startIndex, endIndex)\r\n                    .replace(new RegExp(\"\\\\\\\\'\", 'g'), \"'\")\r\n            );\r\n            eventLine = eventLine.slice(nextIndex);\r\n        }\r\n        return lineSplit;\r\n    }\r\n\r\n    private static eventLogAttributeOf(\r\n        key: string,\r\n        value: string\r\n    ): EventLogAttribute {\r\n        switch (value) {\r\n            case 'true':\r\n                return new BooleanAttribute(true, key);\r\n            case 'false':\r\n                return new BooleanAttribute(false, key);\r\n        }\r\n\r\n        if (value.includes('T') || value.includes(':') || value.includes('-')) {\r\n            const timestamp = Date.parse(value);\r\n            if (!isNaN(timestamp)) {\r\n                return new DateAttribute(new Date(timestamp), key);\r\n            }\r\n        }\r\n\r\n        if (value.includes('.') || value.includes(',')) {\r\n            const asFloat = parseFloat(value);\r\n            if (!isNaN(asFloat)) {\r\n                return new FloatAttribute(asFloat, key);\r\n            }\r\n        }\r\n\r\n        const asInt = parseInt(value);\r\n        if (!isNaN(asInt)) {\r\n            return new IntAttribute(asInt, key);\r\n        }\r\n\r\n        return new StringAttribute(value, key);\r\n    }\r\n\r\n    private static indexOfTokenIfExists(\r\n        lines: string[],\r\n        token: string\r\n    ): number {\r\n        const indexOfToken = lines.indexOf(token);\r\n        if (indexOfToken === -1) {\r\n            throw LogParser.PARSING_ERROR;\r\n        }\r\n        return indexOfToken;\r\n    }\r\n\r\n    private static nextKeyword(\r\n        keywordIndices: number[],\r\n        actKeyWord: number\r\n    ): number {\r\n        const result = Math.min(\r\n            ...keywordIndices.filter(value => value > actKeyWord)\r\n        );\r\n        if (isNaN(result)) {\r\n            throw LogParser.PARSING_ERROR;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import { EventLog } from '../EventLog/eventlog';\r\nimport * as xml2js from 'xml2js';\r\nimport { Classifier } from '../EventLog/classifier';\r\nimport {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from '../EventLog/eventlogattribute';\r\nimport { Trace } from '../EventLog/trace';\r\nimport { Event } from '../EventLog/event';\r\n\r\nexport class XesParser {\r\n    public static PARSING_ERROR = new Error(\r\n        'given xes string can not be parsed'\r\n    );\r\n\r\n    constructor() {}\r\n\r\n    private readonly _logToken = 'LOG';\r\n    private readonly _attributesToken = '$';\r\n    private readonly _extensionToken = 'EXTENSION';\r\n    private readonly _classifierToken = 'CLASSIFIER';\r\n    private readonly _globalToken = 'GLOBAL';\r\n    private readonly _traceToken = 'TRACE';\r\n    private readonly _eventToken = 'EVENT';\r\n    private readonly _scopeToken = 'SCOPE';\r\n    private readonly _stringAttributeToken = 'STRING';\r\n    private readonly _dateAttributeToken = 'DATE';\r\n    private readonly _intAttributeToken = 'INT';\r\n    private readonly _floatAttributeToken = 'FLOAT';\r\n    private readonly _booleanAttributeToken = 'BOOLEAN';\r\n    private readonly _nameToken = 'NAME';\r\n    private readonly _keysToken = 'KEYS';\r\n    private readonly _keyToken = 'KEY';\r\n    private readonly _valueToken = 'VALUE';\r\n    private readonly _activityEventLogAttributeKey = 'concept:name';\r\n    private readonly _eventScopeValue = 'event';\r\n    private readonly _traceScopeValue = 'trace';\r\n\r\n    private readonly _allXesElements = [\r\n        this._stringAttributeToken,\r\n        this._dateAttributeToken,\r\n        this._intAttributeToken,\r\n        this._floatAttributeToken,\r\n        this._booleanAttributeToken,\r\n    ];\r\n\r\n    /**\r\n     * Liest einen String im Xes-Format ein und wandelt es in dieintern verwendete Repräsentation als {@link EventLog} um\r\n     *\r\n     * @param xmlString String im Xes-Format, der geparst werden soll\r\n     * @return interne Darstellung als {@link EventLog}\r\n     */\r\n    public parse(xmlString: string): EventLog {\r\n        const parser = new xml2js.Parser({ strict: false, trim: true });\r\n        let parsedXmlObj = undefined;\r\n\r\n        parser.parseString(xmlString, (err: Error | null, result: any) => {\r\n            if (err == null) {\r\n                parsedXmlObj = result;\r\n            } else {\r\n                throw XesParser.PARSING_ERROR;\r\n            }\r\n        });\r\n\r\n        if (parsedXmlObj == null) {\r\n            throw XesParser.PARSING_ERROR;\r\n        }\r\n        try {\r\n            return this.convertToEventLog(parsedXmlObj);\r\n        } catch (e) {\r\n            throw XesParser.PARSING_ERROR;\r\n        }\r\n    }\r\n\r\n    private convertToEventLog(result: any): EventLog {\r\n        if (result == null || result[this._logToken] == null) {\r\n            return new EventLog([], [], [], [], []);\r\n        }\r\n        const logObj = result[this._logToken];\r\n        const logElements = this.readElementsOfAttribute(logObj);\r\n        const extensions = this.convertToExtensions(\r\n            logObj[this._extensionToken]\r\n        );\r\n        if (logElements == null || extensions == null) {\r\n            throw XesParser.PARSING_ERROR;\r\n        }\r\n        const classifiers = this.convertToClassifiers(\r\n            logObj[this._classifierToken]\r\n        );\r\n        const globalAttributes = logObj[this._globalToken];\r\n        const globalEventAttributes = this.convertToGlobalAttributes(\r\n            this._eventScopeValue,\r\n            globalAttributes\r\n        );\r\n        const globalTraceAttributes = this.convertToGlobalAttributes(\r\n            this._traceScopeValue,\r\n            globalAttributes\r\n        );\r\n\r\n        const traces = this.convertToTraces(logObj[this._traceToken]);\r\n\r\n        const logAttributes = this.extractEventLogAttributes(logObj);\r\n\r\n        return new EventLog(\r\n            classifiers,\r\n            globalEventAttributes,\r\n            globalTraceAttributes,\r\n            traces,\r\n            logAttributes\r\n        );\r\n    }\r\n\r\n    private readElementsOfAttribute(objWithAttributes: any): Map<string, any> {\r\n        const attributeToValueMap: Map<string, any> = new Map();\r\n        const attributesObj = objWithAttributes[this._attributesToken];\r\n        if (attributesObj != null) {\r\n            Object.entries(attributesObj)\r\n                .filter(value => value.length == 2)\r\n                .forEach(attribute =>\r\n                    attributeToValueMap.set(attribute[0], attribute[1])\r\n                );\r\n        }\r\n        return attributeToValueMap;\r\n    }\r\n\r\n    private convertToExtensions(extensionsObj: any): Map<string, string> {\r\n        if (extensionsObj == null) {\r\n            return new Map<string, string>();\r\n        }\r\n        return extensionsObj.map((extensionsObj: any) =>\r\n            this.readElementsOfAttribute(extensionsObj)\r\n        );\r\n    }\r\n\r\n    private convertToClassifiers(classifiersObj: any): Classifier[] {\r\n        if (classifiersObj == null) {\r\n            return [];\r\n        }\r\n        return classifiersObj\r\n            .map((classifierObj: any) =>\r\n                this.readElementsOfAttribute(classifierObj)\r\n            )\r\n            .map(\r\n                (elementsMap: any) =>\r\n                    new Classifier(\r\n                        elementsMap.get(this._nameToken),\r\n                        elementsMap.get(this._keysToken).split(' ')\r\n                    )\r\n            );\r\n    }\r\n\r\n    private convertToGlobalAttributes(\r\n        scope: string,\r\n        globalAttributes: any\r\n    ): EventLogAttribute[] {\r\n        if (globalAttributes == null) {\r\n            return [];\r\n        }\r\n        const result = globalAttributes\r\n            .filter(\r\n                (scopedAttributes: any) =>\r\n                    this.readElementsOfAttribute(scopedAttributes).get(\r\n                        this._scopeToken\r\n                    ) === scope\r\n            )\r\n            .map((scopedAttributes: any) =>\r\n                this.extractEventLogAttributes(scopedAttributes)\r\n            )[0];\r\n        return result != null ? result : [];\r\n    }\r\n\r\n    private convertToTraces(tracesObj: any): Trace[] {\r\n        if (tracesObj == null) {\r\n            return [];\r\n        }\r\n        return tracesObj\r\n            .map((traceObj: any, caseId: number) =>\r\n                this.convertToTrace(traceObj, caseId)\r\n            )\r\n            .filter((trace: Trace | undefined) => trace != null);\r\n    }\r\n\r\n    convertToTrace(traceObj: any, caseId: number): Trace | undefined {\r\n        if (traceObj == null) {\r\n            return undefined;\r\n        }\r\n        const attributes = this.extractEventLogAttributes(traceObj);\r\n        const extractedCaseId = XesParser.extractCaseId(attributes);\r\n        const events: Event[] = this.convertToEvents(\r\n            traceObj[this._eventToken]\r\n        );\r\n        return new Trace(\r\n            attributes,\r\n            events,\r\n            extractedCaseId ? extractedCaseId : caseId\r\n        );\r\n    }\r\n\r\n    private convertToEvents(eventsObj: any): Event[] {\r\n        if (eventsObj == null) {\r\n            return [];\r\n        }\r\n        return eventsObj\r\n            .map((eventObj: any) => this.convertToEvent(eventObj))\r\n            .filter((event: Event | undefined) => event != null);\r\n    }\r\n\r\n    private convertToEvent(eventObj: any): Event | undefined {\r\n        if (eventObj == null) {\r\n            return undefined;\r\n        }\r\n        const eventLogAttributes = this.extractEventLogAttributes(eventObj);\r\n        const activityArr = eventLogAttributes\r\n            .filter(\r\n                eventLogAttribute =>\r\n                    eventLogAttribute.key.toLowerCase() ===\r\n                    this._activityEventLogAttributeKey\r\n            )\r\n            .map(eventLogAttribute => eventLogAttribute.value);\r\n        if (activityArr.length !== 1) {\r\n            throw XesParser.PARSING_ERROR;\r\n        }\r\n        const eventLogAttributesWithoutActivity = eventLogAttributes.filter(\r\n            eventLogAttribute =>\r\n                eventLogAttribute.key.toLowerCase() !==\r\n                this._activityEventLogAttributeKey\r\n        );\r\n        return new Event(eventLogAttributesWithoutActivity, activityArr[0]);\r\n    }\r\n\r\n    private extractEventLogAttributes(eventObj: any): EventLogAttribute[] {\r\n        if (eventObj == null) {\r\n            return [];\r\n        }\r\n        return Object.entries(eventObj)\r\n            .filter(value => value.length == 2)\r\n            .filter(value => this._allXesElements.includes(value[0]))\r\n            .map(value =>\r\n                this.extractEventLogAttributesOfType(value[0], value[1])\r\n            )\r\n            .flatMap(attributesPerType => attributesPerType);\r\n    }\r\n\r\n    private extractEventLogAttributesOfType(\r\n        type: string,\r\n        attributes: any\r\n    ): EventLogAttribute[] {\r\n        if (attributes == null) {\r\n            return [];\r\n        }\r\n        const directAttributes = attributes\r\n            .map(\r\n                (attribute: { [x: string]: any }) =>\r\n                    attribute[this._attributesToken]\r\n            )\r\n            .filter(\r\n                (attribute: { [x: string]: any }) =>\r\n                    attribute[this._valueToken].trim() !== '' &&\r\n                    attribute[this._keyToken].trim() !== ''\r\n            )\r\n            .map((attribute: { [x: string]: any }) =>\r\n                this.buildAttribute(\r\n                    type,\r\n                    attribute[this._valueToken],\r\n                    attribute[this._keyToken]\r\n                )\r\n            )\r\n            .filter(\r\n                (attribute: EventLogAttribute | undefined) => attribute != null\r\n            );\r\n        const subAttributes = attributes\r\n            .map((attribute: { [x: string]: any }) => attribute[type])\r\n            .flatMap((subAttribute: any) =>\r\n                this.extractEventLogAttributesOfType(type, subAttribute)\r\n            );\r\n        return directAttributes.concat(subAttributes);\r\n    }\r\n\r\n    private buildAttribute(\r\n        type: string,\r\n        value: any,\r\n        key: string\r\n    ): EventLogAttribute | undefined {\r\n        switch (type) {\r\n            case this._stringAttributeToken:\r\n                return new StringAttribute(value, key);\r\n            case this._dateAttributeToken:\r\n                return new DateAttribute(new Date(value), key);\r\n            case this._intAttributeToken:\r\n                return new IntAttribute(Number(value), key);\r\n            case this._floatAttributeToken:\r\n                return new FloatAttribute(Number(value), key);\r\n            case this._booleanAttributeToken:\r\n                return new BooleanAttribute(Boolean(value), key);\r\n            default:\r\n                console.error(\r\n                    'unknown attribute type ' +\r\n                        type +\r\n                        ' with value ' +\r\n                        value +\r\n                        ' will be ignored'\r\n                );\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    private static extractCaseId(\r\n        attributes: EventLogAttribute[]\r\n    ): number | undefined {\r\n        const filterAttributes = attributes.filter(\r\n            attr => attr.key === 'concept:name' || attr.key === 'case-id'\r\n        );\r\n        if (filterAttributes.length > 0) {\r\n            return parseInt(filterAttributes[0].value);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-change-view-button',\r\n    templateUrl: './change-view-button.component.html',\r\n    styleUrls: ['./change-view-button.component.scss'],\r\n})\r\nexport class ChangeViewButtonComponent {\r\n    @Input() buttonText: string = 'Change View';\r\n    @Output() changeViewEvent = new EventEmitter<string>();\r\n\r\n    public classReference = ChangeViewButtonComponent;\r\n\r\n    public static readonly valueChainView = 'valueChainView';\r\n    public static readonly directlyFollowsGraphView =\r\n        'directlyFollowsGraphView';\r\n    public static readonly logInformationView = 'logInformationView';\r\n\r\n    currentView: string = ChangeViewButtonComponent.valueChainView;\r\n\r\n    changeView(nextView: string) {\r\n        this.changeViewEvent.emit(nextView);\r\n        this.currentView = nextView;\r\n    }\r\n}\r\n","<button class=\"switch-view-button\" [mat-menu-trigger-for]=\"switchViewMenu\">\r\n    {{ buttonText }}\r\n</button>\r\n\r\n<mat-menu #switchViewMenu=\"matMenu\">\r\n    <button\r\n        *ngIf=\"currentView !== classReference.valueChainView\"\r\n        mat-menu-item\r\n        (click)=\"changeView(classReference.valueChainView)\">\r\n        Value-Chain\r\n    </button>\r\n    <button\r\n        *ngIf=\"currentView !== classReference.directlyFollowsGraphView\"\r\n        mat-menu-item\r\n        (click)=\"changeView(classReference.directlyFollowsGraphView)\">\r\n        Directly-Follows-Graph\r\n    </button>\r\n    <button\r\n        *ngIf=\"currentView !== classReference.logInformationView\"\r\n        mat-menu-item\r\n        (click)=\"changeView(classReference.logInformationView)\">\r\n        Log-Information\r\n    </button>\r\n</mat-menu>\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    OnDestroy,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { Graph } from 'src/app/classes/directly-follows-graph/graph';\r\nimport { Vertex } from 'src/app/classes/directly-follows-graph/vertex';\r\nimport { DirectlyFollowsGraphService } from 'src/app/services/views/directly-follows-graph/display.service';\r\nimport { LayoutService } from 'src/app/services/views/directly-follows-graph/layout.service';\r\nimport { SvgService } from 'src/app/services/views/directly-follows-graph/svg.service';\r\n\r\n@Component({\r\n    selector: 'app-directly-follows-graph',\r\n    templateUrl: './directly-follows-graph.component.html',\r\n    styleUrls: ['./directly-follows-graph.component.scss'],\r\n})\r\nexport class DirectlyFollowsGraphComponent implements OnDestroy, AfterViewInit {\r\n    @ViewChild('directlyFollowsGraph') directlyFollowsGraph:\r\n        | ElementRef<SVGElement>\r\n        | undefined;\r\n\r\n    private _graphSubscription: Subscription;\r\n    private _graph: Graph | undefined;\r\n    private _directionSubscription: Subscription;\r\n    public heightPx: number = 390;\r\n    public widthPx: number = 100;\r\n    private _svg: SVGElement | undefined;\r\n    private _draggingVertex: Vertex | undefined;\r\n\r\n    constructor(\r\n        private _layoutService: LayoutService,\r\n        private _svgService: SvgService,\r\n        private _displayService: DirectlyFollowsGraphService\r\n    ) {\r\n        this._graphSubscription = this._displayService.graph$.subscribe(\r\n            graph => {\r\n                this._graph = graph;\r\n                this._layoutService.layout(this._graph);\r\n                this.draw();\r\n            }\r\n        );\r\n        this._directionSubscription =\r\n            this._displayService.verticalDirection$.subscribe(direction =>\r\n                this.draw()\r\n            );\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this._svg = this.directlyFollowsGraph?.nativeElement as SVGElement;\r\n        this._svg.onmousedown = event => {\r\n            this.processMouseDown(event);\r\n        };\r\n    }\r\n\r\n    private processMouseDown(event: MouseEvent) {\r\n        event.preventDefault();\r\n        this.calcGraphSize();\r\n\r\n        let target = event.target as SVGElement;\r\n        this._draggingVertex = this._graph?.vertices.find(\r\n            vertex => vertex.activityName === target.getAttribute('name')\r\n        );\r\n\r\n        let current: string | null | undefined;\r\n        let mouseStart: number;\r\n\r\n        if (this._displayService.verticalDirection) {\r\n            current = this._draggingVertex?.svgElement?.getAttribute('x');\r\n            mouseStart = event.clientX;\r\n        } else {\r\n            current = this._draggingVertex?.svgElement?.getAttribute('y');\r\n            mouseStart = event.clientY;\r\n        }\r\n\r\n        if (this._svg === undefined || current === undefined) return;\r\n\r\n        this._svg.onmouseup = event => {\r\n            this.processMouseUp(event);\r\n        };\r\n\r\n        this._svg.onmousemove = event => {\r\n            this.processMouseMove(event, current!, mouseStart);\r\n        };\r\n    }\r\n\r\n    private processMouseMove(\r\n        event: MouseEvent,\r\n        current: string | null,\r\n        mouseStart: number\r\n    ) {\r\n        event.preventDefault();\r\n\r\n        if (\r\n            this._draggingVertex === undefined ||\r\n            this._draggingVertex.svgElement === undefined ||\r\n            this._graph === undefined ||\r\n            current === undefined ||\r\n            current === null\r\n        )\r\n            return;\r\n\r\n        if (this._displayService.verticalDirection) {\r\n            let x: number = +current + event.clientX - mouseStart;\r\n            this._draggingVertex.svgElement.setAttribute('x', x.toString());\r\n        } else {\r\n            let y: number = +current + event.clientY - mouseStart;\r\n            this._draggingVertex.svgElement.setAttribute('y', y.toString());\r\n        }\r\n\r\n        this._svgService.updateLayer(this._draggingVertex, this._graph);\r\n\r\n        this.calcGraphSize();\r\n    }\r\n\r\n    private processMouseUp(event: MouseEvent) {\r\n        event.preventDefault();\r\n        if (this._svg !== undefined) this._svg.onmousemove = null;\r\n\r\n        this._draggingVertex = undefined;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._graphSubscription.unsubscribe();\r\n        this._directionSubscription.unsubscribe();\r\n    }\r\n\r\n    private draw() {\r\n        if (this.directlyFollowsGraph === undefined) {\r\n            console.debug('drawing area not ready yet');\r\n            return;\r\n        }\r\n\r\n        this.clearDrawingArea();\r\n        const svgElements = this._svgService.createSvgElements(\r\n            this._displayService.graph\r\n        );\r\n        for (const svgElement of svgElements) {\r\n            this.directlyFollowsGraph.nativeElement.appendChild(svgElement);\r\n        }\r\n\r\n        this.calcGraphSize();\r\n    }\r\n\r\n    private clearDrawingArea() {\r\n        this.heightPx = 390;\r\n        this.widthPx = 100;\r\n\r\n        const drawingArea = this.directlyFollowsGraph?.nativeElement;\r\n        if (drawingArea?.childElementCount === undefined) {\r\n            return;\r\n        }\r\n\r\n        while (drawingArea?.childElementCount > 0) {\r\n            drawingArea.removeChild(drawingArea.lastChild as ChildNode);\r\n        }\r\n    }\r\n\r\n    private calcGraphSize() {\r\n        if (this._graph !== undefined) {\r\n            this.calcGraphWidth(this._graph);\r\n            this.calcGraphHeight(this._graph);\r\n        }\r\n    }\r\n\r\n    private calcGraphWidth(graph: Graph): void {\r\n        if (this._displayService.verticalDirection)\r\n            this.widthPx =\r\n                (graph.getMaxPosition() + 1) * this._svgService.offsetXValue;\r\n        else this.widthPx = graph.getMaxLayer() * this._svgService.offsetXValue;\r\n\r\n        if (this.directlyFollowsGraph !== undefined) {\r\n            let drawingArea = document.getElementsByClassName('drawingArea');\r\n            if (drawingArea !== undefined)\r\n                this.widthPx = Math.max(\r\n                    this.widthPx,\r\n                    drawingArea[0].getBoundingClientRect().width * 0.95\r\n                );\r\n        }\r\n    }\r\n\r\n    private calcGraphHeight(graph: Graph): void {\r\n        if (this._displayService.verticalDirection)\r\n            this.heightPx = graph.getMaxLayer() * this._svgService.offsetYValue;\r\n        else\r\n            this.heightPx =\r\n                (graph.getMaxPosition() + 1) * this._svgService.offsetYValue;\r\n\r\n        if (this.directlyFollowsGraph !== undefined) {\r\n            let drawingArea = document.getElementsByClassName('drawingArea');\r\n            if (drawingArea !== undefined)\r\n                this.heightPx = Math.max(\r\n                    this.heightPx,\r\n                    drawingArea[0].getBoundingClientRect().height * 0.95\r\n                );\r\n        }\r\n    }\r\n}\r\n","<svg\n    #directlyFollowsGraph\n    class=\"canvas\"\n    [style.height.px]=\"heightPx\"\n    [style.width.px]=\"widthPx\">\n    >\n</svg>\n","import {\r\n    AfterContentChecked,\r\n    Component,\r\n    ElementRef,\r\n    Output,\r\n    ViewChild,\r\n    EventEmitter,\r\n} from '@angular/core';\r\nimport { DirectlyFollowsGraphService } from 'src/app/services/views/directly-follows-graph/display.service';\r\nimport { EventlogDataService } from 'src/app/services/common/data/eventlog-data.service';\r\nimport { ChangeViewButtonComponent } from '../change-view-button/change-view-button.component';\r\nimport { TraceCaseSelectionService } from '../../services/common/trace-case-selection-service/trace-case-selection.service';\r\nimport { FilterArgument } from '../filter-area/filter-area.component';\r\nimport { LoadingService } from '../../services/views/loading/loading.service';\r\n\r\n@Component({\r\n    selector: 'app-drawing-area',\r\n    templateUrl: './drawingArea.component.html',\r\n    styleUrls: ['./drawingArea.component.scss'],\r\n})\r\nexport class DrawingAreaComponent implements AfterContentChecked {\r\n    @ViewChild('drawingArea') drawingArea!: ElementRef;\r\n\r\n    loading$ = this.loader.loading$;\r\n    public canvasWidth: number = 0;\r\n    valueChainHidden: boolean = false;\r\n    directlyFollowsGraphHidden: boolean = true;\r\n    logInformationHidden: boolean = true;\r\n\r\n    @Output() filterChanged = new EventEmitter();\r\n\r\n    constructor(\r\n        private _directlyFollowsGraphService: DirectlyFollowsGraphService,\r\n        private _traceCaseSelectionService: TraceCaseSelectionService,\r\n        private _eventlogDataService: EventlogDataService,\r\n        public loader: LoadingService\r\n    ) {}\r\n\r\n    ngAfterContentChecked() {\r\n        if (this.drawingArea != undefined) {\r\n            this.canvasWidth = this.drawingArea?.nativeElement.clientWidth;\r\n        }\r\n    }\r\n\r\n    switchDirection() {\r\n        this._directlyFollowsGraphService.switchDirection();\r\n    }\r\n\r\n    changeView(nextView: string) {\r\n        switch (nextView) {\r\n            case ChangeViewButtonComponent.valueChainView:\r\n                this.valueChainHidden = false;\r\n                this.directlyFollowsGraphHidden = true;\r\n                this.logInformationHidden = true;\r\n                break;\r\n            case ChangeViewButtonComponent.directlyFollowsGraphView:\r\n                this.valueChainHidden = true;\r\n                this.directlyFollowsGraphHidden = false;\r\n                this.logInformationHidden = true;\r\n                break;\r\n            case ChangeViewButtonComponent.logInformationView:\r\n                this.directlyFollowsGraphHidden = true;\r\n                this.valueChainHidden = true;\r\n                this.logInformationHidden = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    applyFilter(FilterArgument: FilterArgument) {\r\n        this._eventlogDataService.changeFilter(FilterArgument);\r\n        this.filterChanged.emit(FilterArgument);\r\n    }\r\n\r\n    clickDrawArea() {\r\n        if (this.directlyFollowsGraphHidden)\r\n            this._traceCaseSelectionService.selectTraceCaseIds([]);\r\n    }\r\n}\r\n","<div fxLayout=\"row\">\r\n    <div class=\"card\">\r\n        <span>\r\n            <app-change-view-button\r\n                (changeViewEvent)=\"changeView($event)\"></app-change-view-button>\r\n            <app-switch-direction-button\r\n                *ngIf=\"!directlyFollowsGraphHidden\"\r\n                (switchDirectionEvent)=\"\r\n                    switchDirection()\r\n                \"></app-switch-direction-button>\r\n        </span>\r\n    </div>\r\n    <app-filter-area (filterChanged)=\"applyFilter($event)\"></app-filter-area>\r\n</div>\r\n<div class=\"loading-screen\" *ngIf=\"loading$ | async\">\r\n    <mat-progress-spinner [mode]=\"'indeterminate'\"></mat-progress-spinner>\r\n</div>\r\n<div #drawingArea class=\"drawingArea\" (click)=\"clickDrawArea()\">\r\n    <app-value-chain\r\n        [clientWidth]=\"canvasWidth\"\r\n        [hidden]=\"valueChainHidden\"\r\n        class=\"padding full-size\"></app-value-chain>\r\n    <app-directly-follows-graph\r\n        [hidden]=\"directlyFollowsGraphHidden\"\r\n        class=\"padding full-size\"></app-directly-follows-graph>\r\n    <app-log-information-view\r\n        *ngIf=\"!logInformationHidden\"></app-log-information-view>\r\n</div>\r\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\r\nimport { DisplayService } from '../../services/views/value-chain/display-service/display.service';\r\nimport { LogService } from '../../services/file-operations/log/log.service';\r\nimport { DirectlyFollowsGraphService } from '../../services/views/directly-follows-graph/display.service';\r\nimport { XesService } from '../../services/file-operations/xes/xes.service';\r\nimport { EventlogDataService } from '../../services/common/data/eventlog-data.service';\r\nimport { SvgService as DirectlyFollowsGraphSvgService } from '../../services/views/directly-follows-graph/svg.service';\r\nimport { saveAs } from 'file-saver';\r\nimport { SvgService } from '../../services/common/svg-service/svg.service';\r\nimport { TraceCaseSelectionService } from '../../services/common/trace-case-selection-service/trace-case-selection.service';\r\n\r\n@Component({\r\n    selector: 'app-export-button',\r\n    templateUrl: './export-button.component.html',\r\n    styleUrls: ['./export-button.component.scss'],\r\n})\r\nexport class ExportButtonComponent {\r\n    @Output() processImport = new EventEmitter<[string, string]>();\r\n    public _selectedTraceCaseIds: Array<number> = [];\r\n\r\n    constructor(\r\n        public _eventLogDataService: EventlogDataService,\r\n        private _displayService: DisplayService,\r\n        private _traceCaseSelectionService: TraceCaseSelectionService,\r\n        private _logService: LogService,\r\n        private _directlyFollowsGraphService: DirectlyFollowsGraphService,\r\n        private _xesService: XesService,\r\n        @Inject(SvgService.VALUE_CHAIN_INSTANCE)\r\n        private _valueChainSvgService: SvgService,\r\n        private _directlyFollowsGraphSvgService: DirectlyFollowsGraphSvgService\r\n    ) {\r\n        this._traceCaseSelectionService.selectedTraceCaseIds$.subscribe(\r\n            selectedTraceCaseIds => {\r\n                this._selectedTraceCaseIds = selectedTraceCaseIds;\r\n            }\r\n        );\r\n    }\r\n\r\n    exportLog(completeEventLog: boolean) {\r\n        this.saveFile(\r\n            this._logService.generate(\r\n                completeEventLog\r\n                    ? this._eventLogDataService.eventLog\r\n                    : this._eventLogDataService\r\n                          .eventLogWithSelectedOrNothingWhenNothingSelected\r\n            ),\r\n            'text/plain;charset=utf-8',\r\n            true,\r\n            'event.log'\r\n        );\r\n    }\r\n\r\n    exportXes(completeEventLog: boolean) {\r\n        this.saveFile(\r\n            this._xesService.generate(\r\n                completeEventLog\r\n                    ? this._eventLogDataService.eventLog\r\n                    : this._eventLogDataService\r\n                          .eventLogWithSelectedOrNothingWhenNothingSelected\r\n            ),\r\n            'text/plain;charset=utf-8',\r\n            true,\r\n            'event.xes'\r\n        );\r\n    }\r\n\r\n    processReimport() {\r\n        this.processImport.emit([\r\n            'log',\r\n            this._logService.generate(\r\n                this._eventLogDataService\r\n                    .eventLogWithSelectedOrNothingWhenNothingSelected\r\n            ),\r\n        ]);\r\n        this._traceCaseSelectionService.selectTraceCaseIds([]);\r\n    }\r\n\r\n    exportSvgValueChain() {\r\n        const elements = this._valueChainSvgService.createSvgElements(\r\n            this._displayService.diagram,\r\n            this._selectedTraceCaseIds,\r\n            true,\r\n            true\r\n        );\r\n        this.saveFile(\r\n            this.getSvg(elements),\r\n            'text/plain;charset=utf-8',\r\n            true,\r\n            'event.svg'\r\n        );\r\n    }\r\n\r\n    exportSvgDirectlyFollowsGraph() {\r\n        const elements = this._directlyFollowsGraphSvgService.createSvgElements(\r\n            this._directlyFollowsGraphService.graph\r\n        );\r\n        this.saveFile(\r\n            this.getSvg(elements),\r\n            'text/plain;charset=utf-8',\r\n            true,\r\n            'event.svg'\r\n        );\r\n    }\r\n\r\n    getSvg(elements: SVGElement[]) {\r\n        let svg =\r\n            '<svg width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink= \"http://www.w3.org/1999/xlink\">';\r\n        elements.forEach(element => {\r\n            svg += element.outerHTML;\r\n        });\r\n        svg += '</svg>';\r\n        return svg;\r\n    }\r\n\r\n    saveFile(\r\n        fileContent: string,\r\n        fileType: string,\r\n        datePrefix: boolean,\r\n        fileName: string\r\n    ) {\r\n        saveAs(\r\n            new Blob([fileContent], { type: fileType }),\r\n            (datePrefix ? new Date().toLocaleString() + '_' : '') + fileName\r\n        );\r\n    }\r\n\r\n    shouldDisableExport(selectedOnly: boolean) {\r\n        if (this._eventLogDataService.eventLog.traces.length === 0) {\r\n            return true;\r\n        }\r\n        if (selectedOnly && this._selectedTraceCaseIds.length === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n    <div\r\n        class=\"interactive-square\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"center center\"\r\n        [matMenuTriggerFor]=\"exportMenu\">\r\n        <mat-icon class=\"larger-icon\">file_download</mat-icon>\r\n    </div>\r\n    Export...\r\n</div>\r\n\r\n<mat-menu #exportMenu=\"matMenu\">\r\n    <button mat-menu-item [matMenuTriggerFor]=\"exportAsLog\">as .log</button>\r\n    <button mat-menu-item [matMenuTriggerFor]=\"exportAsXes\">as .xes</button>\r\n    <button mat-menu-item [matMenuTriggerFor]=\"exportAsSvg\">as .svg</button>\r\n</mat-menu>\r\n\r\n<mat-menu #exportAsLog=\"matMenu\">\r\n    <app-export-menu-item\r\n        buttonText=\"Complete Eventlog\"\r\n        (exportFile)=\"exportLog(true)\"\r\n        [disabled]=\"shouldDisableExport(false)\"\r\n        [reimport]=\"false\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n    <app-export-menu-item\r\n        buttonText=\"Selected Cases\"\r\n        (exportFile)=\"exportLog(false)\"\r\n        [disabled]=\"shouldDisableExport(true)\"\r\n        [reimport]=\"false\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n    <app-export-menu-item\r\n        buttonText=\"Selected Cases and Reimport\"\r\n        (exportFile)=\"exportLog(false)\"\r\n        [disabled]=\"shouldDisableExport(true)\"\r\n        [reimport]=\"true\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n</mat-menu>\r\n\r\n<mat-menu #exportAsXes=\"matMenu\">\r\n    <app-export-menu-item\r\n        buttonText=\"Complete Eventlog\"\r\n        (exportFile)=\"exportXes(true)\"\r\n        [disabled]=\"shouldDisableExport(false)\"\r\n        [reimport]=\"false\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n    <app-export-menu-item\r\n        buttonText=\"Selected Cases\"\r\n        (exportFile)=\"exportXes(false)\"\r\n        [disabled]=\"shouldDisableExport(true)\"\r\n        [reimport]=\"false\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n    <app-export-menu-item\r\n        buttonText=\"Selected Cases and Reimport\"\r\n        (exportFile)=\"exportXes(false)\"\r\n        [disabled]=\"shouldDisableExport(true)\"\r\n        [reimport]=\"true\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n</mat-menu>\r\n\r\n<mat-menu #exportAsSvg=\"matMenu\">\r\n    <app-export-menu-item\r\n        buttonText=\"Value-Chain\"\r\n        (exportFile)=\"exportSvgValueChain()\"\r\n        [disabled]=\"shouldDisableExport(false)\"\r\n        [reimport]=\"false\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n    <app-export-menu-item\r\n        buttonText=\"Directly-Follows-Graph\"\r\n        (exportFile)=\"exportSvgDirectlyFollowsGraph()\"\r\n        [disabled]=\"shouldDisableExport(false)\"\r\n        [reimport]=\"false\"\r\n        (processReimport)=\"processReimport()\"></app-export-menu-item>\r\n</mat-menu>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-export-menu-item',\r\n    templateUrl: './export-menu-item.component.html',\r\n    styleUrls: ['./export-menu-item.component.scss'],\r\n})\r\nexport class ExportMenuItemComponent {\r\n    @Input() buttonText: string | undefined;\r\n    @Input() disabled: boolean = false;\r\n    @Input() reimport: boolean = false;\r\n    @Output() exportFile = new EventEmitter();\r\n    @Output() processReimport = new EventEmitter();\r\n\r\n    constructor() {}\r\n\r\n    processMouseClick(e: MouseEvent) {\r\n        this.exportFile.emit();\r\n        if (this.reimport) {\r\n            this.processReimport.emit();\r\n        }\r\n    }\r\n}\r\n","<button\r\n    mat-menu-item\r\n    (click)=\"processMouseClick($event)\"\r\n    disabled=\"{{ disabled }}\">\r\n    {{ buttonText }}\r\n</button>\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { MatButtonToggleChange } from '@angular/material/button-toggle';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\n\r\nexport class FilterArgument {\r\n    constructor(\r\n        public filterValue: string,\r\n        public filterActivity: boolean,\r\n        public filterAttributeValues: boolean,\r\n        public matchCase: boolean\r\n    ) {}\r\n}\r\n\r\n@Component({\r\n    selector: 'app-filter-area',\r\n    templateUrl: './filter-area.component.html',\r\n    styleUrls: ['./filter-area.component.scss'],\r\n})\r\nexport class FilterAreaComponent {\r\n    constructor() {}\r\n\r\n    @Output() filterChanged = new EventEmitter();\r\n\r\n    _filterActivity: boolean = true;\r\n    _filterAttributeValues: boolean = false;\r\n    _filterUsed: boolean = false;\r\n    _matchCase: boolean = false;\r\n    _filterValue: string = '';\r\n\r\n    toggleMatchCase($event: MatButtonToggleChange) {\r\n        this._matchCase = $event.source.checked;\r\n        if (this._filterUsed) {\r\n            this.filterChanged.emit(\r\n                new FilterArgument(\r\n                    this._filterValue,\r\n                    this._filterActivity,\r\n                    this._filterAttributeValues,\r\n                    this._matchCase\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    toggleFilter($event: MatButtonToggleChange) {\r\n        this._filterUsed = $event.source.checked;\r\n        if (this._filterUsed) {\r\n            this.filterChanged.emit(\r\n                new FilterArgument(\r\n                    this._filterValue,\r\n                    this._filterActivity,\r\n                    this._filterAttributeValues,\r\n                    this._matchCase\r\n                )\r\n            );\r\n        } else {\r\n            this.filterChanged.emit(\r\n                new FilterArgument('', false, false, false)\r\n            );\r\n        }\r\n    }\r\n\r\n    toggleActivity($event: MatCheckboxChange) {\r\n        if (!this._filterAttributeValues && !this._filterActivity) {\r\n            this._filterAttributeValues = true; // Eine Checkbox muss immer aktiv sein\r\n        }\r\n        if (!this._filterUsed) {\r\n            return;\r\n        }\r\n        this.filterChanged.emit(\r\n            new FilterArgument(\r\n                this._filterValue,\r\n                this._filterActivity,\r\n                this._filterAttributeValues,\r\n                this._matchCase\r\n            )\r\n        );\r\n    }\r\n\r\n    toggleValues($event: MatCheckboxChange) {\r\n        if (!this._filterAttributeValues && !this._filterActivity) {\r\n            this._filterActivity = true; // Eine Checkbox muss immer aktiv sein\r\n        }\r\n        if (!this._filterUsed) {\r\n            return;\r\n        }\r\n        this.filterChanged.emit(\r\n            new FilterArgument(\r\n                this._filterValue,\r\n                this._filterActivity,\r\n                this._filterAttributeValues,\r\n                this._matchCase\r\n            )\r\n        );\r\n    }\r\n\r\n    applyFilter(filterValue: string) {\r\n        this._filterValue = filterValue;\r\n        if (!this._filterUsed) {\r\n            this._filterUsed = true;\r\n        }\r\n        this.filterChanged.emit(\r\n            new FilterArgument(\r\n                this._filterValue,\r\n                this._filterActivity,\r\n                this._filterAttributeValues,\r\n                this._matchCase\r\n            )\r\n        );\r\n    }\r\n}\r\n","<div class=\"card\">\r\n    <div fxLayout=\"row\">\r\n        <mat-button-toggle\r\n            [checked]=\"_filterUsed\"\r\n            (change)=\"toggleFilter($event)\"\r\n            class=\"filter-button\"\r\n            ><mat-icon>filter_alt</mat-icon></mat-button-toggle\r\n        >\r\n        <mat-form-field class=\"filter-field\" floatLabel=\"always\">\r\n            <div fyLayout=\"row\" fxLayoutAlign=\"center end\">\r\n                <input\r\n                    class=\"filter-input\"\r\n                    matInput\r\n                    #filter\r\n                    (keyup)=\"applyFilter(filter.value)\"\r\n                    placeholder=\"Filter\" />\r\n                <mat-button-toggle\r\n                    [checked]=\"_matchCase\"\r\n                    (change)=\"toggleMatchCase($event)\"\r\n                    class=\"filter-button-small\"\r\n                    ><div class=\"icon-small\" inline=\"true\">Aa</div>\r\n                </mat-button-toggle>\r\n            </div>\r\n        </mat-form-field>\r\n        <div fxLayout=\"column\" fxLayoutAlign=\"center\" class=\"filter-checkboxes\">\r\n            <mat-checkbox\r\n                [(ngModel)]=\"_filterActivity\"\r\n                (change)=\"toggleActivity($event)\"\r\n                >Filter Activity Name</mat-checkbox\r\n            >\r\n            <mat-checkbox\r\n                [(ngModel)]=\"_filterAttributeValues\"\r\n                (change)=\"toggleValues($event)\"\r\n                >Filter Attribute Values</mat-checkbox\r\n            >\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-footer',\n    templateUrl: './footer.component.html',\n    styleUrls: ['./footer.component.scss'],\n})\nexport class FooterComponent {\n    constructor() {}\n}\n","<div class=\"footer-font\">\r\n    ...and I know you do too!\r\n    <br />\r\n    <br />\r\n    Developed by\r\n    <a href=\"https://github.com/noahboerger\">Noah Börger</a>,\r\n    <a href=\"https://github.com/ThomasKaputa\">Thomas Kaputa</a>,\r\n    <br />\r\n    <a href=\"https://github.com/TobStr90\">Tobias Stritzinger</a>,\r\n    <a href=\"https://github.com/eawetchy\">Elisabeth Wetchy</a> and\r\n    <a href=\"https://github.com/yannikworthmann\">Yannik Worthmann</a>\r\n    <br />\r\n    Supervised by\r\n    <a\r\n        href=\"https://www.fernuni-hagen.de/mi/fakultaet/lehrende/bergenthum/index.shtml\"\r\n        >Robin Bergenthum</a\r\n    >\r\n    and\r\n    <a href=\"https://www.fernuni-hagen.de/ps/team/Jakub.Kovar.shtml\"\r\n        >Jakub Kovář</a\r\n    >\r\n    <br />\r\n    Fakultät für Mathematik und Informatik\r\n    <br />\r\n    Fernuni in Hagen, Germany\r\n    <br />\r\n    <a href=\"https://www.fernuni-hagen.de/service/impressum.shtml\">Impressum</a>\r\n    ·\r\n    <a href=\"https://www.fernuni-hagen.de/service/datenschutz.shtml\"\r\n        >Datenschutz</a\r\n    >\r\n</div>\r\n","import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Trace } from '../../../classes/EventLog/trace';\r\nimport { DisplayService } from '../../../services/views/log-information/display-service/display.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Diagram } from '../../../classes/diagram/diagram';\r\nimport { LayoutService } from '../../../services/common/layout-service/layout.service';\r\nimport { SvgService } from '../../../services/common/svg-service/svg.service';\r\nimport { TraceCaseSelectionService } from '../../../services/common/trace-case-selection-service/trace-case-selection.service';\r\n\r\n@Component({\r\n    selector: 'app-log-trace-case',\r\n    providers: [DisplayService],\r\n    templateUrl: './log-trace-case.component.html',\r\n    styleUrls: ['./log-trace-case.component.scss'],\r\n})\r\nexport class LogTraceCaseComponent\r\n    implements OnInit, AfterViewInit, OnChanges, OnDestroy\r\n{\r\n    @ViewChild('canvas') canvas: ElementRef<SVGElement> | undefined;\r\n\r\n    @Input() traceCaseItem?: Trace;\r\n    @Input() maxCaseIdsLetters?: number;\r\n    @Input() closedStatus: string = 'show';\r\n    @Input() openStatus: string = 'hide';\r\n\r\n    public layoutService = LayoutService;\r\n\r\n    public svgWidthPx: number = 0;\r\n    public svgHeightPx: number = 0;\r\n\r\n    private _sub: Subscription | undefined;\r\n    private _diagram: Diagram | undefined;\r\n    private _subSelectedTraces: Subscription | undefined;\r\n    private _selectedTraceCaseIds: Array<number> = [];\r\n    public dataWidthPx: number = this.getDataWidthStyle();\r\n    public tableLeftMarginPx: number = this.getTableMarginLeftPx();\r\n\r\n    status: string = this.closedStatus;\r\n\r\n    constructor(\r\n        private _displayService: DisplayService,\r\n        private _traceCaseSelectionService: TraceCaseSelectionService,\r\n        @Inject(LayoutService.LOG_INFORMATION_INSTANCE)\r\n        private _layoutService: LayoutService,\r\n        @Inject(SvgService.LOG_INFORMATION_INSTANCE)\r\n        private _svgService: SvgService\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this._sub = this._displayService.diagram$.subscribe(diagram => {\r\n            this._diagram = diagram;\r\n            [this.svgWidthPx, this.svgHeightPx] = this._layoutService.layout(\r\n                this._diagram,\r\n                this.maxCaseIdsLetters\r\n            );\r\n            this.dataWidthPx = this.getDataWidthStyle();\r\n            this.tableLeftMarginPx = this.getTableMarginLeftPx();\r\n\r\n            if (this.canvas == undefined) {\r\n                console.log('UNDEFINED DRAWING AREA');\r\n            }\r\n            this.draw();\r\n        });\r\n        this._subSelectedTraces =\r\n            this._traceCaseSelectionService.selectedTraceCaseIds$.subscribe(\r\n                selectedTraceCaseIds => {\r\n                    this._selectedTraceCaseIds = selectedTraceCaseIds;\r\n                    this.draw();\r\n                }\r\n            );\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.draw();\r\n    }\r\n\r\n    ngOnChanges(): void {\r\n        if (this.traceCaseItem) {\r\n            this._displayService.displayLogTraceCase(this.traceCaseItem);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._sub?.unsubscribe();\r\n        this._subSelectedTraces?.unsubscribe();\r\n    }\r\n\r\n    private draw() {\r\n        if (this.canvas === undefined) {\r\n            console.debug('drawing area not ready yet');\r\n            return;\r\n        }\r\n\r\n        this.clearDrawingArea();\r\n        const elements = this._svgService.createSvgElements(\r\n            this._displayService.diagram,\r\n            this._selectedTraceCaseIds,\r\n            true,\r\n            false,\r\n            this.maxCaseIdsLetters\r\n        );\r\n        for (const element of elements) {\r\n            this.canvas.nativeElement.appendChild(element);\r\n        }\r\n    }\r\n\r\n    private clearDrawingArea() {\r\n        const canvas = this.canvas?.nativeElement;\r\n        if (canvas?.childElementCount === undefined) {\r\n            return;\r\n        }\r\n\r\n        while (canvas.childElementCount > 0) {\r\n            canvas.removeChild(canvas.lastChild as ChildNode);\r\n        }\r\n    }\r\n\r\n    toggleStatus() {\r\n        if (this.status === this.closedStatus) {\r\n            this.status = this.openStatus;\r\n        } else {\r\n            this.status = this.closedStatus;\r\n        }\r\n    }\r\n\r\n    public getDataWidthStyle() {\r\n        return (\r\n            this.svgWidthPx -\r\n            LayoutService.X_LABELSIZE_LOG_INFORMATION -\r\n            (this.maxCaseIdsLetters == null ? 1 : this.maxCaseIdsLetters) *\r\n                LayoutService.X_LABEL_CHAR_EXTRA_OFFSET -\r\n            LayoutService.X_OFFSET_LOG_INFORMATION\r\n        );\r\n    }\r\n\r\n    public getTableMarginLeftPx() {\r\n        const maxLetters =\r\n            this.maxCaseIdsLetters == null ? 1 : this.maxCaseIdsLetters;\r\n        return 98 + maxLetters * LayoutService.X_LABEL_CHAR_EXTRA_OFFSET;\r\n    }\r\n}\r\n","<div>\r\n    <div>\r\n        <svg\r\n            #canvas\r\n            [style.height.px]=\"svgHeightPx\"\r\n            [style.width.px]=\"svgWidthPx\"\r\n            class=\"canvas\"></svg>\r\n    </div>\r\n    <div>\r\n        <details\r\n            (toggle)=\"toggleStatus()\"\r\n            [style.width.px]=\"dataWidthPx\"\r\n            [style.margin-left.px]=\"tableLeftMarginPx\">\r\n            <summary>{{ status }} attributes</summary>\r\n            <div>\r\n                <span *ngFor=\"let event of traceCaseItem?.events\">\r\n                    <span class=\"event-item-span\">\r\n                        <table class=\"outer-table\">\r\n                            <tr>\r\n                                <td>\r\n                                    <table class=\"inner-upper-table\">\r\n                                        <tr class=\"upper-table-row\">\r\n                                            <th>key</th>\r\n                                            <th>value</th>\r\n                                        </tr>\r\n                                    </table>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <div class=\"inner-lower-table-div\">\r\n                                        <table class=\"inner-lower-table\">\r\n                                            <tr\r\n                                                *ngFor=\"\r\n                                                    let attribute of event.attributes\r\n                                                \">\r\n                                                <td class=\"table-data\">\r\n                                                    {{ attribute.key }}\r\n                                                </td>\r\n                                                <td class=\"table-data\">\r\n                                                    {{\r\n                                                        attribute\r\n                                                            | attributeValue\r\n                                                    }}\r\n                                                </td>\r\n                                            </tr>\r\n                                        </table>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </details>\r\n    </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { EventlogDataService } from 'src/app/services/common/data/eventlog-data.service';\r\nimport { Trace } from '../../classes/EventLog/trace';\r\nimport { Subscription } from 'rxjs';\r\nimport { ValueChainControllerService } from '../../services/views/value-chain/value-chain-controller.service';\r\n\r\n@Component({\r\n    selector: 'app-log-information-view',\r\n    templateUrl: './log-information-view.component.html',\r\n    styleUrls: ['./log-information-view.component.scss'],\r\n})\r\nexport class LogInformationViewComponent implements OnInit, OnDestroy {\r\n    private _sub: Subscription | undefined;\r\n    public sortedTraces = this.sortTraces(\r\n        this._eventlogDataService.eventLog.traces\r\n    );\r\n    constructor(\r\n        public _eventlogDataService: EventlogDataService,\r\n        private _valueChainControllerService: ValueChainControllerService\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this._sub = this._valueChainControllerService._elements$.subscribe(\r\n            () => {\r\n                this.sortedTraces = this.sortTraces(\r\n                    this._eventlogDataService.eventLog.traces\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._sub?.unsubscribe();\r\n    }\r\n\r\n    sortTraces(traces: Array<Trace>): Array<Trace> {\r\n        return traces.sort((a, b) => {\r\n            if (a.events.length != b.events.length) {\r\n                return a.events.length - b.events.length;\r\n            }\r\n\r\n            for (const { index, aEvent } of a.events.map((aEvent, index) => ({\r\n                index,\r\n                aEvent,\r\n            }))) {\r\n                const bEvent = b.events[index];\r\n                if (aEvent.activity === bEvent.activity) {\r\n                    continue;\r\n                }\r\n                return aEvent.activity.localeCompare(bEvent.activity);\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    getMaxCaseIdLetters(): number {\r\n        return Math.max(\r\n            ...this._eventlogDataService.eventLog.traces\r\n                .map(trace => trace.caseId)\r\n                .map(caseId => caseId.toString().length)\r\n        );\r\n    }\r\n}\r\n","<cdk-virtual-scroll-viewport\r\n    itemSize=\"90\"\r\n    minBufferPx=\"1000\"\r\n    maxBufferPx=\"1200\"\r\n    class=\"virtual-viewport\">\r\n    <table>\r\n        <tr\r\n            *cdkVirtualFor=\"\r\n                let traceCaseItem of sortedTraces;\r\n                templateCacheSize: 0\r\n            \">\r\n            <app-log-trace-case\r\n                [traceCaseItem]=\"traceCaseItem\"\r\n                [maxCaseIdsLetters]=\"\r\n                    getMaxCaseIdLetters()\r\n                \"></app-log-trace-case>\r\n        </tr>\r\n    </table>\r\n</cdk-virtual-scroll-viewport>\r\n","import { Component, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-switch-direction-button',\r\n    templateUrl: './switch-direction-button.component.html',\r\n    styleUrls: ['./switch-direction-button.component.scss'],\r\n})\r\nexport class SwitchDirectionButtonComponent {\r\n    @Output() switchDirectionEvent: EventEmitter<boolean> = new EventEmitter();\r\n\r\n    verticalDirection: boolean = true;\r\n\r\n    constructor() {}\r\n\r\n    switchDirection() {\r\n        this.verticalDirection = !this.verticalDirection;\r\n        this.switchDirectionEvent.emit(this.verticalDirection);\r\n    }\r\n}\r\n","<button class=\"switch-direction-button\" (click)=\"switchDirection()\">\r\n    Switch Direction\r\n</button>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-upload-button',\r\n    templateUrl: './upload-button.component.html',\r\n    styleUrls: ['./upload-button.component.scss'],\r\n})\r\nexport class UploadButtonComponent {\r\n    @Input() buttonText: string | undefined;\r\n    @Input() buttonIcon: string | undefined;\r\n    @Input() permittedFileExtensions: string[] | undefined;\r\n    @Output() newFileUploadedEventExtensionContent = new EventEmitter<\r\n        [string, string]\r\n    >();\r\n\r\n    constructor() {}\r\n\r\n    prevent(e: Event) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    hoverStart(e: MouseEvent) {\r\n        this.prevent(e);\r\n        const target = e.target as HTMLElement;\r\n        target.classList.add('mouse-hover');\r\n    }\r\n\r\n    hoverEnd(e: MouseEvent) {\r\n        this.prevent(e);\r\n        const target = e.target as HTMLElement;\r\n        target.classList.remove('mouse-hover');\r\n    }\r\n\r\n    handleFileInput(event: Event) {\r\n        const target = event.target as HTMLInputElement;\r\n        const files = target.files as FileList;\r\n        this.readAndEmitFile(files[0]);\r\n    }\r\n\r\n    readAndEmitFile(file: File) {\r\n        let actualFileExtension = (\r\n            file.name.split('.').pop() as string\r\n        ).toLowerCase();\r\n        if (this.permittedFileExtensions?.indexOf(actualFileExtension) == -1) {\r\n            alert(\r\n                'Only file types ' +\r\n                    this.permittedFileExtensions.map(ext => '.' + ext) +\r\n                    ' are currently supported'\r\n            );\r\n            return;\r\n        }\r\n        let fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            let fileContent = fileReader.result as string;\r\n            this.newFileUploadedEventExtensionContent.emit([\r\n                actualFileExtension,\r\n                fileContent,\r\n            ]);\r\n        };\r\n        fileReader.readAsText(file);\r\n    }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n    <input\r\n        type=\"file\"\r\n        class=\"file-input\"\r\n        (change)=\"handleFileInput($event)\"\r\n        onclick=\"this.value = null\"\r\n        #fileUpload />\r\n    <div\r\n        class=\"interactive-square\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"center center\"\r\n        appDragDropFileUpload\r\n        (fileDropped)=\"readAndEmitFile($event)\"\r\n        (click)=\"fileUpload.click()\"\r\n        (mouseenter)=\"hoverStart($event)\"\r\n        (mouseleave)=\"hoverEnd($event)\">\r\n        <mat-icon class=\"larger-icon\"> file_upload </mat-icon>\r\n    </div>\r\n    Import Event Log\r\n</div>\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnInit,\r\n    OnDestroy,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { DisplayService } from '../../services/views/value-chain/display-service/display.service';\r\nimport { ValueChainControllerService } from '../../services/views/value-chain/value-chain-controller.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { TraceCaseSelectionService } from '../../services/common/trace-case-selection-service/trace-case-selection.service';\r\n\r\n@Component({\r\n    selector: 'app-value-chain',\r\n    templateUrl: './value-chain.component.html',\r\n    styleUrls: ['./value-chain.component.scss'],\r\n})\r\nexport class ValueChainComponent implements OnInit, OnDestroy {\r\n    @ViewChild('canvas') canvas: ElementRef<SVGElement> | undefined;\r\n    @Input() clientWidth: number | undefined;\r\n\r\n    private _sub: Subscription | undefined;\r\n    private _subSelectedTraces: Subscription | undefined;\r\n    public heightPx: number = this._valueChainControllerService.heightPx;\r\n    public widthPx: number = this._valueChainControllerService.widthPx;\r\n\r\n    constructor(\r\n        private _traceCaseSelectionService: TraceCaseSelectionService,\r\n        private _displayService: DisplayService,\r\n        private _valueChainControllerService: ValueChainControllerService\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this._sub = this._valueChainControllerService._elements$.subscribe(\r\n            elements => {\r\n                if (this.canvas == undefined) {\r\n                    console.log('UNDEFINED DRAWING AREA');\r\n                }\r\n                this.widthPx = this._valueChainControllerService.widthPx;\r\n                this.heightPx = this._valueChainControllerService.heightPx;\r\n                this.draw(elements);\r\n            }\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._sub?.unsubscribe();\r\n        this._subSelectedTraces?.unsubscribe();\r\n    }\r\n\r\n    private draw(elements: SVGElement[]) {\r\n        if (this.canvas === undefined) {\r\n            console.debug('drawing area not ready yet');\r\n            return;\r\n        }\r\n        this.clearDrawingArea();\r\n        for (const element of elements) {\r\n            this.canvas.nativeElement.appendChild(element);\r\n        }\r\n    }\r\n\r\n    private clearDrawingArea() {\r\n        const canvas = this.canvas?.nativeElement;\r\n        if (canvas?.childElementCount === undefined) {\r\n            return;\r\n        }\r\n\r\n        while (canvas.childElementCount > 0) {\r\n            canvas.removeChild(canvas.lastChild as ChildNode);\r\n        }\r\n    }\r\n}\r\n","<svg\r\n    #canvas\r\n    class=\"canvas\"\r\n    [style.height.px]=\"heightPx\"\r\n    [style.width.px]=\"widthPx\"></svg>\r\n","import {\n    Directive,\n    EventEmitter,\n    Output,\n    HostListener,\n    HostBinding,\n} from '@angular/core';\n\n@Directive({\n    selector: '[appDragDropFileUpload]',\n})\nexport class DragDropFileUploadDirective {\n    @HostBinding('class.file-over') fileOver: boolean = false;\n    @Output() fileDropped = new EventEmitter<any>();\n\n    @HostListener('dragover', ['$event']) onDragOver(event: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.fileOver = true;\n    }\n\n    // Dragleave listener\n    @HostListener('dragleave', ['$event']) public onDragLeave(event: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.fileOver = false;\n    }\n\n    @HostListener('drop', ['$event']) public onDrop(event: any) {\n        this.fileOver = false;\n        event.preventDefault();\n        event.stopPropagation();\n        const files = event.dataTransfer.files;\n        if (files.length > 0) {\n            this.fileDropped.emit(files[0]);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n} from '../classes/EventLog/eventlogattribute';\r\n\r\n@Pipe({\r\n    name: 'attributeValue',\r\n})\r\nexport class AttributeValuePipe implements PipeTransform {\r\n    transform(attribute: EventLogAttribute): string {\r\n        if (attribute instanceof DateAttribute) {\r\n            return attribute.value.toLocaleDateString('de-De', {\r\n                timeZone: 'UTC',\r\n                day: '2-digit',\r\n                month: '2-digit',\r\n                year: 'numeric',\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit',\r\n            });\r\n        }\r\n        return attribute.value;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FilterArgument } from '../../../components/filter-area/filter-area.component';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport { Event } from '../../../classes/EventLog/event';\r\nimport { TraceCaseSelectionService } from '../trace-case-selection-service/trace-case-selection.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class EventlogDataService {\r\n    private _eventLog: EventLog;\r\n    private _filteredEventLog: EventLog;\r\n    private _filter: FilterArgument = new FilterArgument(\r\n        '',\r\n        false,\r\n        false,\r\n        false\r\n    );\r\n\r\n    constructor(private _traceCaseSelectionService: TraceCaseSelectionService) {\r\n        this._eventLog = new EventLog([], [], [], [], []);\r\n        this._filteredEventLog = new EventLog([], [], [], [], []);\r\n    }\r\n\r\n    public get eventLog(): EventLog {\r\n        if (this._filter.filterValue === '') {\r\n            return this._eventLog;\r\n        }\r\n        return this._filteredEventLog;\r\n    }\r\n\r\n    public set eventLog(value: EventLog) {\r\n        this._eventLog = value;\r\n        this.changeFilter(this._filter);\r\n    }\r\n\r\n    public get eventLogWithSelectedOrAllWhenNothingSelected() {\r\n        return this.eventLogWithSelectedOrOtherWhenNothingSelected(\r\n            thisEventLog => thisEventLog\r\n        );\r\n    }\r\n\r\n    public get eventLogWithSelectedOrNothingWhenNothingSelected() {\r\n        return this.eventLogWithSelectedOrOtherWhenNothingSelected(\r\n            thisEventLog =>\r\n                new EventLog(\r\n                    thisEventLog.classifiers,\r\n                    thisEventLog.globalEventAttributes,\r\n                    thisEventLog.globalTraceAttributes,\r\n                    [],\r\n                    thisEventLog.attributes\r\n                )\r\n        );\r\n    }\r\n\r\n    public getCaseId(event: Event): number {\r\n        for (let trace of this._eventLog.traces) {\r\n            if (trace.events.includes(event)) {\r\n                return trace.caseId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private eventLogWithSelectedOrOtherWhenNothingSelected(\r\n        extractOtherFunction: (thisEventLog: EventLog) => EventLog\r\n    ): EventLog {\r\n        if (this._traceCaseSelectionService.selectedTraceCaseIds.length === 0) {\r\n            return extractOtherFunction(this._eventLog);\r\n        }\r\n        const filteredTraces = this._eventLog.traces.filter(\r\n            trace =>\r\n                this._traceCaseSelectionService.selectedTraceCaseIds.indexOf(\r\n                    trace.caseId\r\n                ) !== -1\r\n        );\r\n        return new EventLog(\r\n            this._eventLog.classifiers,\r\n            this._eventLog.globalEventAttributes,\r\n            this._eventLog.globalTraceAttributes,\r\n            filteredTraces,\r\n            this._eventLog.attributes\r\n        );\r\n    }\r\n\r\n    public changeFilter(arg: FilterArgument) {\r\n        this._filter = arg;\r\n        if (arg.filterValue === '') {\r\n            return;\r\n        }\r\n        this._filteredEventLog.traces = [];\r\n        this._eventLog.traces.forEach(trace => {\r\n            if (\r\n                trace.events.some(event => {\r\n                    if (this.filterActivity(event)) {\r\n                        return true;\r\n                    }\r\n                    return this.filterAttributes(event);\r\n                })\r\n            ) {\r\n                this._filteredEventLog.traces.push(trace);\r\n            }\r\n        });\r\n    }\r\n\r\n    private filterAttributes(event: Event): boolean {\r\n        if (!this._filter.filterAttributeValues) {\r\n            return false;\r\n        }\r\n        return event.attributes.some(attribute => {\r\n            return this._filter.matchCase\r\n                ? attribute.value.toString().includes(this._filter.filterValue)\r\n                : attribute.value\r\n                      .toString()\r\n                      .toLowerCase()\r\n                      .includes(this._filter.filterValue.toLowerCase());\r\n        });\r\n    }\r\n\r\n    private filterActivity(event: Event) {\r\n        if (!this._filter.filterActivity) {\r\n            return false;\r\n        }\r\n        if (this._filter.matchCase) {\r\n            return event.activity.includes(this._filter.filterValue);\r\n        } else {\r\n            return event.activity\r\n                .toLowerCase()\r\n                .includes(this._filter.filterValue.toLowerCase());\r\n        }\r\n    }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Diagram } from '../../../classes/diagram/diagram';\r\nimport { GraphEvent } from '../../../classes/diagram/GraphEvent';\r\nimport { Element, ElementType } from '../../../classes/diagram/element';\r\nimport { Trace } from '../../../classes/EventLog/trace';\r\nimport { TraceCaseSelectionService } from '../trace-case-selection-service/trace-case-selection.service';\r\n\r\n@Injectable()\r\nexport abstract class DisplayServiceBase implements OnDestroy {\r\n    protected _diagram$: BehaviorSubject<Diagram>;\r\n\r\n    constructor(\r\n        protected traceCaseSelectionService: TraceCaseSelectionService\r\n    ) {\r\n        this._diagram$ = new BehaviorSubject<Diagram>(new Diagram([]));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._diagram$.complete();\r\n    }\r\n\r\n    public get diagram$(): Observable<Diagram> {\r\n        return this._diagram$.asObservable();\r\n    }\r\n\r\n    public get diagram(): Diagram {\r\n        return this._diagram$.getValue();\r\n    }\r\n\r\n    public display(net: Diagram) {\r\n        this._diagram$.next(net);\r\n    }\r\n\r\n    protected getEventGraphics(\r\n        trace: Trace,\r\n        caseIds: Array<number>\r\n    ): GraphEvent[] {\r\n        let graphEvents = new Array<GraphEvent>();\r\n        trace.events.forEach(ev => {\r\n            // Text und Rechteck für Events erstellen, Koordinaten kommen vom Layoutservice\r\n            let el = new Element(ElementType.text, () =>\r\n                this.traceCaseSelectionService.selectTraceCaseIds(caseIds)\r\n            );\r\n            let box = new Element(ElementType.box, () =>\r\n                this.traceCaseSelectionService.selectTraceCaseIds(caseIds)\r\n            );\r\n            graphEvents.push(new GraphEvent(ev.activity, [box, el]));\r\n        });\r\n        return graphEvents;\r\n    }\r\n}\r\n","import { Diagram } from '../../../classes/diagram/diagram';\r\nimport { Element } from '../../../classes/diagram/element';\r\nimport { GraphTrace } from '../../../classes/diagram/GraphTrace';\r\n\r\nexport class LayoutService {\r\n    public static readonly LOG_INFORMATION_INSTANCE =\r\n        'LogInformationLayoutService';\r\n    public static readonly VALUE_CHAIN_INSTANCE = 'ValueChainLayoutService';\r\n\r\n    public static readonly X_OFFSET_VALUE_CHAIN = 40;\r\n    public static readonly X_OFFSET_LOG_INFORMATION = 40;\r\n\r\n    public static readonly Y_OFFSET_VALUE_CHAIN = 30;\r\n    public static readonly Y_OFFSET_LOG_INFORMATION = 25;\r\n\r\n    public static readonly X_STEP_VALUE_CHAIN = 150;\r\n    public static readonly X_STEP_LOG_INFORMATION = 250;\r\n\r\n    public static readonly Y_STEP_LOG_INFORMATION = 0;\r\n    public static readonly Y_STEP_VALUE_CHAIN = 50;\r\n\r\n    public static readonly X_LABELSIZE_VALUE_CHAIN = 65;\r\n    public static readonly X_LABELSIZE_LOG_INFORMATION = 80;\r\n\r\n    public static readonly X_LABEL_CHAR_EXTRA_OFFSET = 10;\r\n\r\n    private readonly xOffset: number;\r\n    private readonly yOffset: number;\r\n    public readonly xStep: number;\r\n    public readonly yStep: number;\r\n    public readonly xLabelSize: number;\r\n\r\n    private readonly labelExtraSizeExtractor;\r\n\r\n    constructor(\r\n        xOffset: number,\r\n        yOffset: number,\r\n        xStep: number,\r\n        yStep: number,\r\n        xLabelSize: number,\r\n        labelExtraSizeExtractor: (trace: GraphTrace) => number\r\n    ) {\r\n        this.xOffset = xOffset;\r\n        this.yOffset = yOffset;\r\n        this.xStep = xStep;\r\n        this.yStep = yStep;\r\n        this.xLabelSize = xLabelSize;\r\n        this.labelExtraSizeExtractor = labelExtraSizeExtractor;\r\n    }\r\n\r\n    // Ordnet die Elemente des Diagrams an und gibt die maximalen Ausmaße der Zeichnung zurück\r\n    public layout(\r\n        diagram: Diagram,\r\n        maxLabelExtraLettersOpt: number = -1\r\n    ): [number, number] {\r\n        let x = 0;\r\n        let y = 0;\r\n        let xMax = 0;\r\n\r\n        const maxLabelExtraLetters =\r\n            maxLabelExtraLettersOpt === -1\r\n                ? Math.max(...diagram.traces.map(this.labelExtraSizeExtractor))\r\n                : maxLabelExtraLettersOpt;\r\n\r\n        diagram.traces.forEach(trace => {\r\n            this.layoutTraceLabel(y, trace.svgElements[0]);\r\n            x++;\r\n            trace.events.forEach(event => {\r\n                this.layoutEventElements(\r\n                    x,\r\n                    y,\r\n                    maxLabelExtraLetters,\r\n                    event.svgElements\r\n                );\r\n                x++;\r\n            });\r\n            if (x > xMax) {\r\n                xMax = x;\r\n            }\r\n            x = 0;\r\n            y++;\r\n        });\r\n\r\n        return this.calculateLayoutSize(xMax, y, maxLabelExtraLetters);\r\n    }\r\n\r\n    private layoutTraceLabel(y: number, element: Element) {\r\n        element.x += this.xOffset;\r\n        element.y += this.yOffset + y * this.yStep;\r\n    }\r\n\r\n    private layoutEventElements(\r\n        x: number,\r\n        y: number,\r\n        maxLabelExtraLetters: number,\r\n        elements: Element[]\r\n    ) {\r\n        elements.forEach(svg => {\r\n            svg.x +=\r\n                this.xOffset +\r\n                (this.xLabelSize +\r\n                    maxLabelExtraLetters *\r\n                        LayoutService.X_LABEL_CHAR_EXTRA_OFFSET) +\r\n                (x - 1) * this.xStep;\r\n            svg.y += this.yOffset + y * this.yStep;\r\n        });\r\n    }\r\n\r\n    private calculateLayoutSize(\r\n        xMax: number,\r\n        y: number,\r\n        maxLabelExtraLetters: number\r\n    ): [number, number] {\r\n        // Halbe Y-Stepsize wird wieder abgezogen, da die Elemente in der Zeichnug ihren Nullpunkt in der Mitte haben\r\n        // Ganze X-Stepsize wird wieder abgezogen, da Label über definierte Labesize berücksichtigt wird\r\n        return [\r\n            this.xOffset +\r\n                (xMax - 1) * this.xStep +\r\n                this.xLabelSize +\r\n                maxLabelExtraLetters * LayoutService.X_LABEL_CHAR_EXTRA_OFFSET,\r\n            2 * this.yOffset + y * this.yStep - (y > 0 ? this.yStep / 2 : 0),\r\n        ];\r\n    }\r\n}\r\n","import { Diagram } from '../../../classes/diagram/diagram';\r\nimport { Element, ElementType } from '../../../classes/diagram/element';\r\nimport { LayoutService } from '../layout-service/layout.service';\r\nimport { GraphTrace } from '../../../classes/diagram/GraphTrace';\r\n\r\nexport class SvgService {\r\n    private readonly backgroundColors = [\r\n        'rgb(227, 26, 28)',\r\n        'rgb(251, 154, 153)',\r\n        'rgb(254, 191, 111)',\r\n        'rgb(166, 206, 227)',\r\n        'rgb(32, 120, 181)',\r\n        'rgb(125, 227, 183)',\r\n        'rgb(152, 250, 232, 1)',\r\n        'rgb(112, 203, 255)',\r\n        'rgb(227, 175, 166)',\r\n        'rgb(181, 65, 33)',\r\n    ];\r\n\r\n    public static readonly LOG_INFORMATION_INSTANCE =\r\n        'LogInformationSvgService';\r\n    public static readonly VALUE_CHAIN_INSTANCE = 'ValueChainSvgService';\r\n\r\n    private readonly FONTFAMILY = 'sans-Serif';\r\n    private readonly FONTSIZE = '15px';\r\n    private readonly XTEXTOFFSET = 5;\r\n    private readonly YTEXTOFFSET = 4;\r\n    private readonly YNEXTROWOFFSET = 20;\r\n    public static readonly MAXFONTWIDTH_LOG_INFOMRATION = 168;\r\n    public static readonly MAXFONTWIDTH_VALUE_CHAIN = 120;\r\n\r\n    private readonly xTraceBorderOffset = -5;\r\n    private readonly yTraceBorderOffset = -23;\r\n\r\n    private readonly xCheckboxOffset = -35;\r\n    private readonly yCheckboxOffset = -10;\r\n\r\n    private readonly yDescriptionLabelOffset = 4;\r\n\r\n    private readonly midPointOfHeight = 0;\r\n    private readonly peakOffset = 10;\r\n\r\n    private readonly leftXCoordinate = -20;\r\n    public static readonly BOX_WIDTH_VALUE_CHAIN =\r\n        LayoutService.X_STEP_VALUE_CHAIN - 25;\r\n    public static readonly BOX_HEIGHT_VALUE_CHAIN =\r\n        LayoutService.Y_STEP_VALUE_CHAIN - 10;\r\n    public static readonly BOX_WIDTH_LOG_INFORMATION =\r\n        LayoutService.X_STEP_LOG_INFORMATION - 25;\r\n    public static readonly BOX_HEIGHT_LOG_INFORMATION =\r\n        LayoutService.Y_OFFSET_LOG_INFORMATION * 2 - 10;\r\n\r\n    private readonly maxFontWidth;\r\n    private readonly boxWidth;\r\n    private readonly boxHeight;\r\n    private readonly labelExtractor;\r\n    private readonly labelExtraSizeExtractor;\r\n    private readonly topXCoordinate;\r\n\r\n    constructor(\r\n        private layoutService: LayoutService,\r\n        maxFontWidth: number,\r\n        boxWidth: number,\r\n        boxHeight: number,\r\n        labelExtractor: (trace: GraphTrace) => string,\r\n        labelExtraSizeExtractor: (trace: GraphTrace) => number\r\n    ) {\r\n        this.maxFontWidth = maxFontWidth;\r\n        this.boxWidth = boxWidth;\r\n        this.boxHeight = boxHeight;\r\n        this.labelExtractor = labelExtractor;\r\n        this.labelExtraSizeExtractor = labelExtraSizeExtractor;\r\n        this.topXCoordinate = 0 - this.boxHeight / 2;\r\n    }\r\n\r\n    private static _activityColorMap = new Map<String, String>();\r\n    public static get activityColorMap() {\r\n        return SvgService._activityColorMap;\r\n    }\r\n\r\n    /// Erstellt alle benötigten SVGElemente für ein gegebenes Diagram\r\n    /// Alle SVG's werden außerdem zurückgegeben\r\n    public createSvgElements(\r\n        diagram: Diagram,\r\n        selectedTraceCaseIds: Array<number>,\r\n        reuseColors = true,\r\n        isExport: boolean = false,\r\n        maxLabelExtraLettersOpt: number = -1\r\n    ): Array<SVGElement> {\r\n        if (!reuseColors) {\r\n            SvgService.activityColorMap.clear();\r\n        }\r\n        const result: Array<SVGElement> = [];\r\n\r\n        const maxLabelExtraLetters =\r\n            maxLabelExtraLettersOpt === -1\r\n                ? Math.max(...diagram.traces.map(this.labelExtraSizeExtractor))\r\n                : maxLabelExtraLettersOpt;\r\n\r\n        diagram.traces.forEach(trace => {\r\n            if (!isExport) {\r\n                // Rahmen um die ausgewählten Traces\r\n                let partiallySelected = trace.caseIds.some(val =>\r\n                    selectedTraceCaseIds.includes(val)\r\n                );\r\n                let allSelected = trace.caseIds.every(val =>\r\n                    selectedTraceCaseIds.includes(val)\r\n                );\r\n                if (partiallySelected) {\r\n                    let traceBorder = SvgService.createSelectedTraceBorder(\r\n                        trace.svgElements[0].x + this.xTraceBorderOffset,\r\n                        trace.svgElements[0].y + this.yTraceBorderOffset,\r\n                        trace.events.length * this.layoutService.xStep +\r\n                            (this.layoutService.xLabelSize - 5) +\r\n                            LayoutService.X_LABEL_CHAR_EXTRA_OFFSET *\r\n                                maxLabelExtraLetters,\r\n                        allSelected\r\n                    );\r\n                    result.push(traceBorder);\r\n                }\r\n                // Checkboxen für Traces\r\n                let traceCheckboxBorder = SvgService.createTraceCheckboxBorder(\r\n                    trace.svgElements[0],\r\n                    trace.svgElements[0].x + this.xCheckboxOffset,\r\n                    trace.svgElements[0].y + this.yCheckboxOffset\r\n                );\r\n                result.push(traceCheckboxBorder);\r\n                if (partiallySelected) {\r\n                    let traceCheckboxCheck =\r\n                        SvgService.createTraceCheckboxCheck(\r\n                            trace.svgElements[0].x + this.xCheckboxOffset,\r\n                            trace.svgElements[0].y + this.yCheckboxOffset,\r\n                            allSelected\r\n                        );\r\n                    result.push(traceCheckboxCheck);\r\n                }\r\n            }\r\n\r\n            const descriptionLabel = this.createSvgForDescriptionLabel(\r\n                trace.svgElements[0],\r\n                this.labelExtractor(trace)\r\n            );\r\n            result.push(descriptionLabel);\r\n            trace.events.forEach(ev => {\r\n                ev.svgElements.forEach(svgEl => {\r\n                    if (svgEl.type === ElementType.text) {\r\n                        const text = this.createSvgForText(\r\n                            ev.svgElements[1],\r\n                            ev.activity\r\n                        );\r\n                        result.push(text);\r\n                    } else if (svgEl.type === ElementType.box) {\r\n                        if (!SvgService.activityColorMap.has(ev.activity)) {\r\n                            SvgService.activityColorMap.set(\r\n                                ev.activity,\r\n                                this.backgroundColors[\r\n                                    SvgService.activityColorMap.size %\r\n                                        this.backgroundColors.length\r\n                                ]\r\n                            ); // Wenn die Map größer ist als Size Farben recyclen\r\n                        }\r\n                        const rect = this.createBoxForElement(\r\n                            ev.svgElements[0],\r\n                            SvgService.activityColorMap.get(ev.activity)!\r\n                        );\r\n                        result.push(rect);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private static createSelectedTraceBorder(\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        allSelected: boolean\r\n    ) {\r\n        const svg = SvgService.createSvgElement('rect');\r\n        svg.setAttribute('x', `${x}`);\r\n        svg.setAttribute('y', `${y}`);\r\n        svg.setAttribute('width', `${width}`);\r\n        svg.setAttribute('height', '46');\r\n        svg.setAttribute('fill', 'none');\r\n        svg.setAttribute('stroke-width', '2');\r\n        svg.setAttribute('stroke', 'black');\r\n        if (!allSelected) {\r\n            svg.setAttribute('stroke-dasharray', '6 3');\r\n        }\r\n        return svg;\r\n    }\r\n\r\n    private static createTraceCheckboxBorder(\r\n        element: Element,\r\n        x: number,\r\n        y: number\r\n    ) {\r\n        const svg = SvgService.createSvgElement('polygon');\r\n        svg.setAttribute(\r\n            'points',\r\n            `${x},${y} ${x},${y + 20} ${x + 20},${y + 20} ${x + 20},${y}`\r\n        );\r\n        svg.setAttribute('fill', '#ffffff');\r\n        svg.setAttribute('stroke-width', '2');\r\n        svg.setAttribute('stroke', 'black');\r\n        element.registerSvg(svg);\r\n        return svg;\r\n    }\r\n\r\n    private static createTraceCheckboxCheck(\r\n        x: number,\r\n        y: number,\r\n        allSelected: boolean\r\n    ) {\r\n        const svg = SvgService.createSvgElement('polyline');\r\n        svg.setAttribute(\r\n            'points',\r\n            `${x + 4},${y + 10} ${x + 8},${y + 14} ${x + 16},${y + 4}`\r\n        );\r\n        svg.setAttribute('fill', 'none');\r\n        svg.setAttribute('stroke-width', '2');\r\n        svg.setAttribute('stroke', 'black');\r\n        if (!allSelected) {\r\n            svg.setAttribute('stroke-dasharray', '2 2');\r\n        }\r\n        return svg;\r\n    }\r\n\r\n    private createBoxForElement(element: Element, fill: String): SVGElement {\r\n        const svg = SvgService.createSvgElement('polygon');\r\n        svg.setAttribute('transform', `translate( ${element.x} ${element.y} )`);\r\n        svg.setAttribute(\r\n            'points',\r\n            `${this.leftXCoordinate},${this.topXCoordinate}\r\n                                                     ${this.boxWidth},${\r\n                this.topXCoordinate\r\n            }\r\n                                                     ${\r\n                                                         this.boxWidth +\r\n                                                         this.peakOffset\r\n                                                     },${this.midPointOfHeight}\r\n                                                     ${this.boxWidth},${\r\n                this.boxHeight / 2\r\n            }\r\n                                                     ${this.leftXCoordinate},${\r\n                this.boxHeight / 2\r\n            }\r\n                                                     ${\r\n                                                         this.leftXCoordinate +\r\n                                                         this.peakOffset\r\n                                                     },${this.midPointOfHeight}`\r\n        );\r\n        svg.setAttribute('fill', fill.toString());\r\n        svg.setAttribute('stroke-width', '2');\r\n        svg.setAttribute('stroke', 'black');\r\n\r\n        element.registerSvg(svg);\r\n\r\n        return svg;\r\n    }\r\n\r\n    private getSubStrings(text: String): [String, String] {\r\n        for (let i = 0; i <= text.length; i++) {\r\n            let length = this.GetStringWidth(text.substring(0, i));\r\n            if (length > this.maxFontWidth) {\r\n                for (let j = i; j <= text.length; j++) {\r\n                    let length2 = this.GetStringWidth(text.substring(i, j - 1));\r\n                    if (length2 > this.maxFontWidth) {\r\n                        return [\r\n                            text.substring(0, i),\r\n                            text.substring(i, j - 2) + '...',\r\n                        ];\r\n                    }\r\n                }\r\n                return [text.substring(0, i), text.substring(i)];\r\n            }\r\n        }\r\n        return [text, ''];\r\n    }\r\n\r\n    private createSvgForDescriptionLabel(\r\n        element: Element,\r\n        text: String\r\n    ): SVGElement {\r\n        const svg = SvgService.createSvgElement('text');\r\n        svg.setAttribute('x', `${element.x}`);\r\n        svg.setAttribute('y', `${element.y + this.yDescriptionLabelOffset}`);\r\n        svg.setAttribute('font-size', this.FONTSIZE);\r\n        svg.setAttribute('font-family', this.FONTFAMILY);\r\n        svg.textContent = text.toString();\r\n        element.registerSvg(svg);\r\n        return svg;\r\n    }\r\n\r\n    private createSvgForText(element: Element, text: String): SVGElement {\r\n        const svg = SvgService.createSvgElement('text');\r\n        svg.setAttribute('x', `${element.x - this.XTEXTOFFSET}`);\r\n        svg.setAttribute('y', `${element.y - this.YTEXTOFFSET}`);\r\n        let stringWidth = this.GetStringWidth(text);\r\n        if (stringWidth > this.maxFontWidth) {\r\n            let subStrings = this.getSubStrings(text);\r\n            const svg1 = SvgService.createSvgElement('tspan');\r\n            svg1.setAttribute('font-size', this.FONTSIZE);\r\n            svg1.setAttribute('font-family', this.FONTFAMILY);\r\n            svg1.textContent = subStrings[0].toString();\r\n            const svg2 = SvgService.createSvgElement('tspan');\r\n            svg2.setAttribute('font-size', this.FONTSIZE);\r\n            svg2.setAttribute('font-family', this.FONTFAMILY);\r\n            svg2.textContent = subStrings[1].toString();\r\n            svg2.setAttribute('x', `${element.x - this.XTEXTOFFSET}`);\r\n            svg2.setAttribute('dy', `${this.YNEXTROWOFFSET}` + 'px');\r\n            svg.appendChild(svg1);\r\n            svg.appendChild(svg2);\r\n        } else {\r\n            svg.setAttribute('font-size', this.FONTSIZE);\r\n            svg.setAttribute('font-family', this.FONTFAMILY);\r\n            svg.textContent = text.toString();\r\n        }\r\n        element.registerSvg(svg);\r\n        return svg;\r\n    }\r\n\r\n    private GetStringWidth(text: String): number {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.setAttribute('width', '100%');\r\n        canvas.setAttribute('height', '380px');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx!.font = this.FONTSIZE + ' ' + this.FONTFAMILY;\r\n        return ctx!.measureText(text.toString()).width;\r\n    }\r\n\r\n    private static createSvgElement(name: string): SVGElement {\r\n        return document.createElementNS('http://www.w3.org/2000/svg', name);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class TraceCaseSelectionService {\r\n    private _selectedTraceCaseIds$: BehaviorSubject<Array<number>>;\r\n\r\n    constructor() {\r\n        this._selectedTraceCaseIds$ = new BehaviorSubject(new Array<number>());\r\n    }\r\n\r\n    public get selectedTraceCaseIds$(): Observable<Array<number>> {\r\n        return this._selectedTraceCaseIds$.asObservable();\r\n    }\r\n\r\n    public get selectedTraceCaseIds(): Array<number> {\r\n        return this._selectedTraceCaseIds$.getValue();\r\n    }\r\n\r\n    public selectTraceCaseIds(value: Array<number>) {\r\n        let new_value;\r\n        if (value.length == 0) {\r\n            new_value = value;\r\n        } else {\r\n            if (value.every(val => this.selectedTraceCaseIds.includes(val))) {\r\n                new_value = this.selectedTraceCaseIds.filter(\r\n                    x => !value.includes(x)\r\n                );\r\n            } else {\r\n                new_value = [...this.selectedTraceCaseIds, ...value];\r\n            }\r\n        }\r\n        this._selectedTraceCaseIds$.next(new_value);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport { LogParser } from '../../../classes/parser/logParser';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LogParserService {\r\n    private readonly parser = new LogParser();\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * Liest einen String im .type log Format ein, das von Robin Bergenthum und Jakub Kovar definiert wurde und wandelt es in die\r\n     * intern verwendete Repräsentation als {@link EventLog} um\r\n     *\r\n     * @param text String im .type log Format, der geparst werden soll\r\n     * @return interne Darstellung als {@link EventLog}\r\n     */\r\n    public parse(text: string): EventLog {\r\n        return this.parser.parse(text);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport { Trace } from '../../../classes/EventLog/trace';\r\nimport { Event } from '../../../classes/EventLog/event';\r\nimport {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from '../../../classes/EventLog/eventlogattribute';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LogService {\r\n    private readonly _caseIdElement = 'case-id';\r\n    private readonly _activityElement = 'concept:name';\r\n    private readonly _undefinedValue = \"''\";\r\n\r\n    constructor() {}\r\n\r\n    private static getAttributeValueAsString(\r\n        attribute: EventLogAttribute | number | string\r\n    ): string {\r\n        if (typeof attribute === 'string') {\r\n            return attribute;\r\n        }\r\n        if (typeof attribute === 'number') {\r\n            return String(attribute);\r\n        }\r\n        if (attribute instanceof StringAttribute) {\r\n            return attribute.value;\r\n        }\r\n        if (attribute instanceof DateAttribute) {\r\n            return attribute.value.toISOString();\r\n        }\r\n        if (\r\n            attribute instanceof IntAttribute ||\r\n            attribute instanceof FloatAttribute\r\n        ) {\r\n            return String(attribute.value);\r\n        }\r\n        if (attribute instanceof BooleanAttribute) {\r\n            return attribute.value ? 'true' : 'false';\r\n        }\r\n        console.error('unknown attribute type');\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * Wandelt die intern verwendete Repräsentation in ein .type log formattierten String um\r\n     *\r\n     * @param eventLog interne Repräsentation als {@link EventLog}\r\n     * @return .type log formattierter String\r\n     */\r\n    public generate(eventLog: EventLog): string {\r\n        if (eventLog.traces.length == 0) {\r\n            return '';\r\n        }\r\n        const traces = eventLog.traces;\r\n        let logString = '.type log' + '\\n' + '.attributes' + '\\n';\r\n\r\n        const attributes = this.listOfAttributes(traces);\r\n        logString +=\r\n            this._caseIdElement +\r\n            '\\n' +\r\n            this._activityElement +\r\n            '\\n' +\r\n            attributes.join('\\n') +\r\n            '\\n';\r\n\r\n        logString += '.events' + '\\n';\r\n        logString += traces\r\n            .map(trace =>\r\n                this.getTraceRepresentation(trace, trace.caseId, attributes)\r\n            )\r\n            .join('\\n');\r\n        return logString;\r\n    }\r\n\r\n    private listOfAttributes(traces: Trace[]): string[] {\r\n        const attributesWithDuplicates = traces\r\n            .flatMap(trace => trace.events)\r\n            .flatMap(event => event.attributes)\r\n            .filter(attribute => attribute.key !== '' && attribute.value !== '')\r\n            .map(attribute => attribute.key)\r\n            .filter(\r\n                attributeKey =>\r\n                    ![this._activityElement, this._caseIdElement].includes(\r\n                        attributeKey\r\n                    )\r\n            )\r\n            .map(attributeString => this.escapeIfNecessary(attributeString));\r\n        // Sort occurrences in events desc\r\n        const attributesOccurrencesMap = attributesWithDuplicates.reduce(\r\n            (acc, e) => acc.set(e, (acc.get(e) || 0) + 1),\r\n            new Map<string, number>()\r\n        );\r\n        return [...attributesOccurrencesMap.entries()]\r\n            .sort((a, b) => b[1] - a[1])\r\n            .map(entry => entry[0]);\r\n    }\r\n\r\n    private getTraceRepresentation(\r\n        trace: Trace,\r\n        caseId: number,\r\n        attributes: string[]\r\n    ): string {\r\n        return trace.events\r\n            .map(event =>\r\n                this.getEventRepresentation(event, caseId, attributes)\r\n            )\r\n            .join('\\n');\r\n    }\r\n\r\n    private getEventRepresentation(\r\n        event: Event,\r\n        caseId: number,\r\n        attributes: string[]\r\n    ): string {\r\n        const otherAttributes: any[] = attributes.map(attributeKey =>\r\n            event.getAttribute(attributeKey)\r\n        );\r\n        const eventAttributes = [caseId, event.activity].concat(\r\n            otherAttributes\r\n        );\r\n        const attributesAsStrings = eventAttributes.map(attribute =>\r\n            attribute == null\r\n                ? this._undefinedValue\r\n                : LogService.getAttributeValueAsString(attribute)\r\n        );\r\n\r\n        return this.toRepresentationLine(attributesAsStrings);\r\n    }\r\n\r\n    private toRepresentationLine(attributesAsStrings: string[]): string {\r\n        return attributesAsStrings.reduceRight((acc, e) => {\r\n            if (acc === this._undefinedValue) {\r\n                return e === this._undefinedValue\r\n                    ? this._undefinedValue\r\n                    : this.escapeIfNecessary(e);\r\n            }\r\n            return this.escapeIfNecessary(e) + ' ' + acc;\r\n        }, this._undefinedValue);\r\n    }\r\n\r\n    private escapeIfNecessary(asString: string): string {\r\n        if (asString == this._undefinedValue) {\r\n            return this._undefinedValue;\r\n        }\r\n        asString = asString.replace(new RegExp(\"'\", 'g'), \"\\\\'\");\r\n        const containsWhitespaceF = (str: string) => /\\s/.test(str);\r\n        if (containsWhitespaceF(asString)) {\r\n            return \"'\" + asString + \"'\";\r\n        }\r\n        return asString;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport { XesParser } from '../../../classes/parser/xesParser';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class XesParserService {\r\n    private readonly parser = new XesParser();\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * Liest einen String im Xes-Format ein und wandelt es in dieintern verwendete Repräsentation als {@link EventLog} um\r\n     *\r\n     * @param xmlString String im Xes-Format, der geparst werden soll\r\n     * @return interne Darstellung als {@link EventLog}\r\n     */\r\n    public parse(xmlString: string): EventLog {\r\n        return this.parser.parse(xmlString);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Classifier } from '../../../classes/EventLog/classifier';\r\nimport { Event } from '../../../classes/EventLog/event';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from '../../../classes/EventLog/eventlogattribute';\r\nimport { Trace } from '../../../classes/EventLog/trace';\r\nvar format = require('xml-formatter');\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class XesService {\r\n    /**\r\n     * Wandelt die intern verwendete Repräsentation in ein XES formattierten String um\r\n     *\r\n     * @param eventLog interne Repräsentation als {@link EventLog}\r\n     * @return XES formattierter String\r\n     */\r\n    public generate(eventLog: EventLog): string {\r\n        let xesString = '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>';\r\n        xesString += '<log xes.version=\"1.0\" xes.features=\"\">';\r\n        xesString +=\r\n            '<extension name=\"Lifecycle\" prefix=\"lifecycle\" uri=\"http://www.xes-standard.org/lifecycle.xesext\"/>';\r\n        xesString +=\r\n            '<extension name=\"Organizational\" prefix=\"org\" uri=\"http://www.xes-standard.org/org.xesext\"/>';\r\n        xesString +=\r\n            '<extension name=\"Time\" prefix=\"time\" uri=\"http://www.xes-standard.org/time.xesext\"/>';\r\n        xesString +=\r\n            '<extension name=\"Concept\" prefix=\"concept\" uri=\"http://www.xes-standard.org/concept.xesext\"/>';\r\n        xesString +=\r\n            '<extension name=\"Semantic\" prefix=\"semantic\" uri=\"http://www.xes-standard.org/semantic.xesext\"/>';\r\n\r\n        if (eventLog.globalTraceAttributes.length > 0) {\r\n            xesString += '<global scope=\"trace\">';\r\n            eventLog.globalTraceAttributes.forEach(attribute => {\r\n                xesString += XesService.getAttributeRepresentation(attribute);\r\n            });\r\n            xesString += '</global>';\r\n        }\r\n\r\n        if (eventLog.globalEventAttributes.length > 0) {\r\n            xesString += '<global scope=\"event\">';\r\n            eventLog.globalEventAttributes.forEach(attribute => {\r\n                xesString += XesService.getAttributeRepresentation(attribute);\r\n            });\r\n            xesString += '</global>';\r\n        }\r\n\r\n        eventLog.classifiers.forEach(classifier => {\r\n            xesString += this.getClassifierRepresentation(classifier);\r\n        });\r\n\r\n        eventLog.attributes.forEach(attribute => {\r\n            xesString += XesService.getAttributeRepresentation(attribute);\r\n        });\r\n\r\n        eventLog.traces.forEach(trace => {\r\n            xesString += this.getTraceRepresentation(trace);\r\n        });\r\n        xesString += '</log>';\r\n        return format(xesString);\r\n    }\r\n\r\n    private getClassifierRepresentation(classifier: Classifier): string {\r\n        let classifierString = '<classifier name=\"' + classifier.name + '\"';\r\n        classifierString += 'keys=\"' + classifier.keys.join(' ') + '\"/>';\r\n        return classifierString;\r\n    }\r\n\r\n    private getTraceRepresentation(trace: Trace): string {\r\n        let traceString = '<trace>';\r\n        traceString +=\r\n            '<string key=\"concept:name\" value=\"' + trace.caseId + '\" />';\r\n        trace.attributes.forEach(attribute => {\r\n            if (attribute.key !== 'concept:name') {\r\n                traceString += XesService.getAttributeRepresentation(attribute);\r\n            }\r\n        });\r\n        trace.events.forEach(event => {\r\n            traceString += this.getEventRepresentation(event);\r\n        });\r\n        traceString += '</trace>';\r\n        return traceString;\r\n    }\r\n\r\n    private getEventRepresentation(event: Event): string {\r\n        let eventString = '<event>';\r\n        eventString +=\r\n            '<string key=\"concept:name\" value=\"' + event.activity + '\" />';\r\n        event.attributes.forEach(attribute => {\r\n            eventString += XesService.getAttributeRepresentation(attribute);\r\n        });\r\n        eventString += '</event>';\r\n        return eventString;\r\n    }\r\n\r\n    private static getAttributeRepresentation(\r\n        attribute: EventLogAttribute\r\n    ): string {\r\n        if (attribute instanceof StringAttribute) {\r\n            return (\r\n                '<string key=\"' +\r\n                attribute.key +\r\n                '\" value=\"' +\r\n                attribute.value +\r\n                '\" />'\r\n            );\r\n        }\r\n        if (attribute instanceof DateAttribute) {\r\n            return (\r\n                '<date key=\"' +\r\n                attribute.key +\r\n                '\" value=\"' +\r\n                attribute.value.toISOString() +\r\n                '\" />'\r\n            );\r\n        }\r\n        if (attribute instanceof IntAttribute) {\r\n            return (\r\n                '<int key=\"' +\r\n                attribute.key +\r\n                '\" value=\"' +\r\n                attribute.value +\r\n                '\" />'\r\n            );\r\n        }\r\n        if (attribute instanceof FloatAttribute) {\r\n            return (\r\n                '<float key=\"' +\r\n                attribute.key +\r\n                '\" value=\"' +\r\n                attribute.value +\r\n                '\" />'\r\n            );\r\n        }\r\n        if (attribute instanceof BooleanAttribute) {\r\n            return (\r\n                '<boolean key=\"' +\r\n                attribute.key +\r\n                '\" value=\"' +\r\n                attribute.value +\r\n                '\" />'\r\n            );\r\n        }\r\n        console.error('unknown attribute type');\r\n        return '';\r\n    }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Edge } from '../../../classes/directly-follows-graph/edge';\r\nimport { Graph } from '../../../classes/directly-follows-graph/graph';\r\nimport { Vertex } from '../../../classes/directly-follows-graph/vertex';\r\nimport { Event } from '../../../classes/EventLog/event';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport { Trace } from '../../../classes/EventLog/trace';\r\nimport { EventlogDataService } from '../../common/data/eventlog-data.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DirectlyFollowsGraphService implements OnDestroy {\r\n    private _graph: BehaviorSubject<Graph>;\r\n    private _verticalDirection: BehaviorSubject<boolean>;\r\n\r\n    constructor(private _eventLogDataService: EventlogDataService) {\r\n        this._graph = new BehaviorSubject<Graph>(new Graph([], []));\r\n        this._verticalDirection = new BehaviorSubject<boolean>(true);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._graph.complete();\r\n    }\r\n\r\n    public get graph$(): Observable<Graph> {\r\n        return this._graph.asObservable();\r\n    }\r\n\r\n    public get graph(): Graph {\r\n        return this._graph.getValue();\r\n    }\r\n\r\n    public get verticalDirection$(): Observable<boolean> {\r\n        return this._verticalDirection.asObservable();\r\n    }\r\n\r\n    public get verticalDirection(): boolean {\r\n        return this._verticalDirection.getValue();\r\n    }\r\n\r\n    private convertEventLogToDirectlyFollowsGraph(eventLog: EventLog): Graph {\r\n        let sortedTraces: Trace[][] = eventLog.sortedTraces;\r\n\r\n        let edges: Edge[] = [];\r\n        let vertices: Vertex[] = [];\r\n\r\n        sortedTraces.forEach(traces => {\r\n            for (let i = 0; i < traces[0].events.length; i++) {\r\n                let event: Event = traces[0].events[i];\r\n\r\n                //Überprüft, ob der Knoten bereits vorhanden ist, bzw. ob ein neuer Knoten erstellt werden muss.\r\n                let vertex: Vertex | undefined = vertices.find(\r\n                    vertex => vertex.activityName === event.activity\r\n                );\r\n\r\n                if (vertex !== undefined) vertex.activityCount += traces.length;\r\n                else vertices.push(new Vertex(event.activity, traces.length));\r\n\r\n                //Überprüft, ob zwischen den letzten beiden Events bereits eine Kante vorhanden ist, bzw. ob eine neue Kante erstellt werden muss.\r\n                if (i >= 1) {\r\n                    let previousEvent: Event = traces[0].events[i - 1];\r\n                    let edge: Edge | undefined = edges.find(\r\n                        edge =>\r\n                            edge.startVertex?.activityName ===\r\n                                previousEvent.activity &&\r\n                            edge.endVertex.activityName === event.activity\r\n                    );\r\n                    if (edge !== undefined) edge.activityCount += traces.length;\r\n                    else {\r\n                        let startVertex: Vertex | undefined = vertices.find(\r\n                            vertex =>\r\n                                vertex.activityName === previousEvent.activity\r\n                        );\r\n                        let endVertex: Vertex | undefined = vertices.find(\r\n                            vertex => vertex.activityName === event.activity\r\n                        );\r\n                        if (\r\n                            startVertex !== undefined &&\r\n                            endVertex !== undefined\r\n                        )\r\n                            edges.push(\r\n                                new Edge(startVertex, endVertex, traces.length)\r\n                            );\r\n                    }\r\n                }\r\n\r\n                //Startknoten erstellen oder wiederverwenden\r\n                if (i == 0) {\r\n                    let startVertex: Vertex | undefined = vertices.find(\r\n                        vertex =>\r\n                            vertex.activityName === event.activity + 'Start'\r\n                    );\r\n\r\n                    if (startVertex === undefined) {\r\n                        startVertex = new Vertex(\r\n                            event.activity + 'Start',\r\n                            traces.length,\r\n                            true\r\n                        );\r\n                        startVertex.isStart = true;\r\n\r\n                        vertices.push(startVertex);\r\n\r\n                        let endVertex: Vertex | undefined = vertices.find(\r\n                            vertex => vertex.activityName === event.activity\r\n                        );\r\n\r\n                        if (endVertex !== undefined)\r\n                            edges.push(\r\n                                new Edge(startVertex, endVertex, traces.length)\r\n                            );\r\n                    } else {\r\n                        startVertex.activityCount += traces.length;\r\n\r\n                        let startEdge: Edge | undefined = edges.find(\r\n                            edge =>\r\n                                edge.startVertex?.activityName ===\r\n                                    startVertex?.activityName &&\r\n                                edge.endVertex.activityName === event.activity\r\n                        );\r\n                        if (startEdge !== undefined)\r\n                            startEdge.activityCount += traces.length;\r\n                    }\r\n                }\r\n\r\n                //Endknoten erstellen oder wiederverwenden\r\n                if (i == traces[0].events.length - 1) {\r\n                    let endVertex: Vertex | undefined = vertices.find(\r\n                        vertex => vertex.activityName === event.activity + 'End'\r\n                    );\r\n\r\n                    if (endVertex === undefined) {\r\n                        endVertex = new Vertex(\r\n                            event.activity + 'End',\r\n                            traces.length,\r\n                            true\r\n                        );\r\n                        endVertex.isEnd = true;\r\n\r\n                        vertices.push(endVertex);\r\n\r\n                        let startVertex: Vertex | undefined = vertices.find(\r\n                            vertex => vertex.activityName === event.activity\r\n                        );\r\n\r\n                        if (startVertex !== undefined)\r\n                            edges.push(\r\n                                new Edge(startVertex, endVertex, traces.length)\r\n                            );\r\n                    } else {\r\n                        endVertex.activityCount += traces.length;\r\n\r\n                        let endEdge: Edge | undefined = edges.find(\r\n                            edge =>\r\n                                edge.startVertex?.activityName ===\r\n                                    event.activity &&\r\n                                edge.endVertex.activityName ===\r\n                                    endVertex?.activityName\r\n                        );\r\n                        if (endEdge !== undefined)\r\n                            endEdge.activityCount += traces.length;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return new Graph(vertices, edges);\r\n    }\r\n\r\n    public displayDirectlyFollowsGraph(eventLog: EventLog) {\r\n        let net = this.convertEventLogToDirectlyFollowsGraph(eventLog);\r\n        this._graph.next(net);\r\n    }\r\n\r\n    public switchDirection() {\r\n        this._verticalDirection.next(!this._verticalDirection.value);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Edge } from 'src/app/classes/directly-follows-graph/edge';\r\nimport { Graph } from 'src/app/classes/directly-follows-graph/graph';\r\nimport { Vertex } from 'src/app/classes/directly-follows-graph/vertex';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n//Layout mittels Sugiyama Algorithmus\r\nexport class LayoutService {\r\n    constructor() {}\r\n\r\n    public layout(graph: Graph): void {\r\n        this.makeGraphAcyclic(graph);\r\n        this.setLayers(graph);\r\n        this.createDummyVertices(graph);\r\n\r\n        this.minimizeCrossings(graph);\r\n\r\n        this.setPositions(graph);\r\n\r\n        this.correctEdgeDirection(graph.edges);\r\n    }\r\n\r\n    private setPositions(graph: Graph): void {\r\n        let layer: number = 0;\r\n        let maxLayerVertices: Vertex[] = [];\r\n        let maxSize: number = graph.getMaxVerticesOnLayer() * 1.2;\r\n\r\n        for (let i = 1; i < graph.getMaxLayer(); i++) {\r\n            maxLayerVertices = graph.getVerticesSortedByPosition(i);\r\n            if (maxLayerVertices.length === graph.getMaxVerticesOnLayer()) {\r\n                layer = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < maxLayerVertices.length; i++) {\r\n            maxLayerVertices[i].position = 1.2 * i;\r\n        }\r\n\r\n        for (let i = layer - 1; i > 0; i--) {\r\n            let vertices: Vertex[] = graph.getVerticesSortedByPosition(i);\r\n            for (let j = 0; j < vertices.length; j++) {\r\n                let edges = graph.getEdgesByStartVertex(vertices[j]);\r\n\r\n                let neighbours: Vertex[] = [];\r\n                edges.forEach(edge => {\r\n                    if (edge.startVertex !== edge.endVertex)\r\n                        neighbours.push(edge.endVertex);\r\n                });\r\n\r\n                if (neighbours.length > 0) {\r\n                    let value: number = 0;\r\n                    neighbours.forEach(\r\n                        neighbour => (value += neighbour.position)\r\n                    );\r\n\r\n                    vertices[j].position = value / neighbours.length;\r\n                }\r\n            }\r\n\r\n            this.setPositionGap(vertices);\r\n            this.reduceSize(vertices, maxSize);\r\n        }\r\n\r\n        for (let i = layer + 1; i <= graph.getMaxLayer(); i++) {\r\n            let vertices: Vertex[] = graph.getVerticesSortedByPosition(i);\r\n            for (let j = 0; j < vertices.length; j++) {\r\n                let edges = graph.getEdgesByEndVertex(vertices[j]);\r\n\r\n                let neighbours: Vertex[] = [];\r\n                edges.forEach(edge => {\r\n                    if (edge.startVertex !== edge.endVertex)\r\n                        neighbours.push(edge.startVertex);\r\n                });\r\n\r\n                if (neighbours.length > 0) {\r\n                    let value: number = 0;\r\n                    neighbours.forEach(\r\n                        neighbour => (value += neighbour.position)\r\n                    );\r\n\r\n                    vertices[j].position = value / neighbours.length;\r\n                }\r\n            }\r\n\r\n            this.setPositionGap(vertices);\r\n            this.reduceSize(vertices, maxSize);\r\n        }\r\n\r\n        let minPosition = graph.getMinPosition();\r\n        graph.vertices.forEach(vertex => (vertex.position += -minPosition + 1));\r\n    }\r\n\r\n    private makeGraphAcyclic(graph: Graph): void {\r\n        let edges: Edge[] = [];\r\n        graph.edges.forEach(edge => edges.push(edge));\r\n\r\n        let vertices: Vertex[] = [];\r\n        graph.vertices.forEach(vertex => vertices.push(vertex));\r\n\r\n        let newGraph: Graph = new Graph(vertices, edges);\r\n\r\n        while (vertices.length != 0) {\r\n            let sinks: Vertex[] = newGraph.getSinks();\r\n\r\n            //Füge dem Graph alle Senken hinzu\r\n            while (sinks.length != 0) {\r\n                sinks.forEach(vertex => {\r\n                    let incomingEdges = vertex.getIncomingEdges(edges);\r\n\r\n                    newGraph.removeVertex(vertex);\r\n                    newGraph.removeEdges(incomingEdges);\r\n\r\n                    sinks = newGraph.getSinks();\r\n                });\r\n            }\r\n\r\n            //Füge dem Graph alle isolierten Knoten hinzu\r\n            let isolatedVertices: Vertex[] = newGraph.getIsolatedVertices();\r\n            newGraph.removeVertices(isolatedVertices);\r\n\r\n            let sources: Vertex[] = newGraph.getSources();\r\n\r\n            //Füge dem Graph alle Quellen hinzu\r\n            while (sources.length != 0) {\r\n                sources.forEach(vertex => {\r\n                    let outgoingEdges = vertex.getOutgoingEdges(edges);\r\n\r\n                    newGraph.removeVertex(vertex);\r\n                    newGraph.removeEdges(outgoingEdges);\r\n\r\n                    sources = newGraph.getSources();\r\n                });\r\n            }\r\n\r\n            //Füge dem Graph den Knoten hinzu, der den maximalen Wert bezüglich ausgehender Kanten minus eingehender Kanten besitzt\r\n            if (vertices.length != 0) {\r\n                let vertex = newGraph.getMaxEdgeDifferenceVertex();\r\n\r\n                let outgoingEdges = vertex.getOutgoingEdges(edges);\r\n                let incomingEdges = vertex.getIncomingEdges(edges);\r\n\r\n                newGraph.removeVertex(vertex);\r\n                newGraph.removeEdges(outgoingEdges);\r\n                newGraph.removeEdges(incomingEdges);\r\n                incomingEdges.forEach(edge => edge.reverse());\r\n            }\r\n        }\r\n    }\r\n\r\n    private setLayers(graph: Graph): void {\r\n        graph.vertices.forEach(vertex => {\r\n            if (vertex.isStart) vertex.layer = 1;\r\n            else vertex.layer = 2;\r\n        });\r\n\r\n        let sinks: Vertex[] = graph.getSinks();\r\n\r\n        sinks.forEach(vertex => {\r\n            this.calculateLayer(vertex, graph);\r\n        });\r\n\r\n        graph.vertices.forEach(vertex => {\r\n            if (vertex.isEnd) vertex.layer = graph.getMaxLayer();\r\n        });\r\n    }\r\n\r\n    //Setz Knoten auf die niedrigst mögliche Ebene\r\n    private calculateLayer(vertex: Vertex, graph: Graph): number {\r\n        let incomingEdges = vertex.getIncomingEdges(graph.edges);\r\n\r\n        incomingEdges.forEach(edge => {\r\n            vertex.layer = Math.max(\r\n                vertex.layer,\r\n                this.calculateLayer(edge.startVertex, graph) + 1\r\n            );\r\n        });\r\n\r\n        return vertex.layer;\r\n    }\r\n\r\n    //Erzeugt Dummyknoten, damit Kanten nicht über mehrere Ebenen verlaufen\r\n    private createDummyVertices(graph: Graph): void {\r\n        let oldEdges: Edge[] = [];\r\n\r\n        graph.edges.forEach(edge => {\r\n            let layerDiff: number = Math.abs(\r\n                edge.startVertex.layer - edge.endVertex.layer\r\n            );\r\n\r\n            //Lege Dummyknoten an, wenn zwischen ihnen Ebenen liegen.\r\n            if (layerDiff > 1) {\r\n                let newVertices: Vertex[] = new Array<Vertex>(layerDiff - 1);\r\n                //Erstelle für jede Ebene einen Knoten\r\n                for (let i = 1; i < layerDiff; i++) {\r\n                    let vertexName: String;\r\n                    if (edge.isReversed)\r\n                        vertexName =\r\n                            edge.endVertex.activityName.toString() +\r\n                            ' To ' +\r\n                            edge.startVertex.activityName.toString() +\r\n                            ' ' +\r\n                            i.toString();\r\n                    else\r\n                        vertexName =\r\n                            edge.startVertex.activityName.toString() +\r\n                            ' To ' +\r\n                            edge.endVertex.activityName.toString() +\r\n                            ' ' +\r\n                            i.toString();\r\n\r\n                    let vertex: Vertex = new Vertex(vertexName, 0, true);\r\n                    vertex.layer =\r\n                        Math.min(edge.startVertex.layer, edge.endVertex.layer) +\r\n                        i;\r\n                    graph.vertices.push(vertex);\r\n                    newVertices[i - 1] = vertex;\r\n                }\r\n\r\n                //Kante zu ursprünglichen Startknoten\r\n                let newEdge: Edge = new Edge(\r\n                    edge.startVertex,\r\n                    newVertices[0],\r\n                    edge.activityCount,\r\n                    edge.isReversed\r\n                );\r\n                graph.edges.push(newEdge);\r\n\r\n                //Kanten zwischen Dummyknoten\r\n                for (let i = 0; i < layerDiff - 2; i++) {\r\n                    newEdge = new Edge(\r\n                        newVertices[i],\r\n                        newVertices[i + 1],\r\n                        edge.activityCount,\r\n                        edge.isReversed\r\n                    );\r\n                    graph.edges.push(newEdge);\r\n                }\r\n\r\n                //Kante zu ursprünglichen Endknoten\r\n                newEdge = new Edge(\r\n                    newVertices[layerDiff - 2],\r\n                    edge.endVertex,\r\n                    edge.activityCount,\r\n                    edge.isReversed\r\n                );\r\n                graph.edges.push(newEdge);\r\n\r\n                oldEdges.push(edge);\r\n            }\r\n        });\r\n\r\n        graph.removeEdges(oldEdges);\r\n    }\r\n\r\n    private minimizeCrossings(graph: Graph): void {\r\n        let differentStartingPermutation: number = 0;\r\n        let crossings: number = Number.MAX_VALUE;\r\n        let improved: boolean = false;\r\n\r\n        //Teste zufällige Permutation für die erste Ebene\r\n        do {\r\n            differentStartingPermutation++;\r\n\r\n            let graphClone: Graph = Object.assign(\r\n                new Graph(new Array<Vertex>(), new Array<Edge>()),\r\n                graph\r\n            );\r\n            let crossingsClone: number = Number.MAX_VALUE;\r\n\r\n            this.permutateFirstLayerPositions(graphClone.vertices);\r\n\r\n            //Permutiere die Ebenen solange Verbesserungen erzielt werden\r\n            do {\r\n                improved = false;\r\n\r\n                let graphCloneNew: Graph = Object.assign(\r\n                    new Graph(new Array<Vertex>(), new Array<Edge>()),\r\n                    graphClone\r\n                );\r\n\r\n                //Betrachte iterativ die zwei aufeinanderfolgenden Ebenen von unten nach oben\r\n                for (let i = 1; i < graph.getMaxLayer(); i++) {\r\n                    this.setNextLayerPositions(graphCloneNew, i, i + 1);\r\n                    this.setPositionOffset(graphCloneNew, i + 1);\r\n                }\r\n                //Betrachte iterativ die zwei aufeinanderfolgenden Ebenen von oben nach unten\r\n                for (let i = graph.getMaxLayer(); i > 1; i--) {\r\n                    this.setNextLayerPositions(graphCloneNew, i, i - 1);\r\n                    this.setPositionOffset(graphCloneNew, i - 1);\r\n                }\r\n\r\n                let crossingsCloneNew = this.countCrossings(graphCloneNew);\r\n\r\n                if (crossingsCloneNew < crossingsClone) {\r\n                    crossingsClone = crossingsCloneNew;\r\n                    graphClone = graphCloneNew;\r\n                    improved = true;\r\n                }\r\n            } while (crossingsClone != 0 && improved);\r\n\r\n            if (crossingsClone < crossings) {\r\n                graph = graphClone;\r\n                crossings = crossingsClone;\r\n            }\r\n        } while (crossings != 0 && differentStartingPermutation < 23);\r\n    }\r\n\r\n    private permutateFirstLayerPositions(vertices: Vertex[]): void {\r\n        let firstLayerVertices: Vertex[] = vertices.filter(\r\n            vertex => vertex.layer == 1\r\n        );\r\n\r\n        for (let i = 0; i < firstLayerVertices.length; i++) {\r\n            firstLayerVertices[i].position = i * 2;\r\n        }\r\n\r\n        for (let i = 0; i < firstLayerVertices.length; i++) {\r\n            let n: number = Math.floor(\r\n                Math.random() * firstLayerVertices.length\r\n            );\r\n            let tmp: number = firstLayerVertices[i].position;\r\n            firstLayerVertices[i].position = firstLayerVertices[n].position;\r\n            firstLayerVertices[n].position = tmp;\r\n        }\r\n    }\r\n\r\n    //Setzt Knoten auf das Baryzentrum der Nachbarn der angegebenen Ebene\r\n    private setNextLayerPositions(\r\n        graph: Graph,\r\n        layer: number,\r\n        nextLayer: number\r\n    ): void {\r\n        let vertices: Vertex[] = graph.vertices.filter(\r\n            vertex => vertex.layer == layer\r\n        );\r\n        let nextVertices: Vertex[] = graph.vertices.filter(\r\n            vertex => vertex.layer == nextLayer\r\n        );\r\n\r\n        nextVertices.forEach(nextVertex => {\r\n            let edges: Edge[];\r\n            let neighbours: Vertex[];\r\n\r\n            if (layer < nextLayer) {\r\n                edges = graph.edges.filter(\r\n                    edge => edge.endVertex === nextVertex\r\n                );\r\n\r\n                neighbours = vertices.filter(\r\n                    vertex =>\r\n                        edges.find(edge => edge.startVertex === vertex) !=\r\n                        undefined\r\n                );\r\n            } else {\r\n                edges = graph.edges.filter(\r\n                    edge => edge.startVertex === nextVertex\r\n                );\r\n\r\n                neighbours = vertices.filter(\r\n                    vertex =>\r\n                        edges.find(edge => edge.endVertex === vertex) !=\r\n                        undefined\r\n                );\r\n            }\r\n\r\n            if (neighbours.length > 0) {\r\n                let value: number = 0;\r\n                neighbours.forEach(neighbour => (value += neighbour.position));\r\n                nextVertex.position = value / neighbours.length;\r\n            }\r\n        });\r\n    }\r\n\r\n    //Setze den korrekten Abstand zwischen Knoten\r\n    private setPositionOffset(graph: Graph, layer: number): void {\r\n        let sortedVertices: Vertex[] = graph.getVerticesSortedByPosition(layer);\r\n\r\n        //Setze Knoten mit gleicher Position verteilt um die Position\r\n        for (let i = 0; i < sortedVertices.length; i++) {\r\n            let sameValue: number = 0;\r\n\r\n            while (\r\n                i + sameValue + 1 < sortedVertices.length &&\r\n                sortedVertices[i].position ==\r\n                    sortedVertices[i + sameValue + 1].position\r\n            )\r\n                sameValue++;\r\n\r\n            for (let j = i; j <= i + sameValue; j++) {\r\n                sortedVertices[j].position =\r\n                    sortedVertices[j].position - sameValue * 0.5 + j - i;\r\n            }\r\n        }\r\n\r\n        //Setze Position der Knoten, dass genügend Abstand zwischen ihnen besteht\r\n        this.setPositionGap(sortedVertices);\r\n\r\n        let maxSize: number = 2 * graph.getMaxVerticesOnLayer();\r\n\r\n        //Setze Position der Knoten, dass sie nicht über die maximale Größe hinausgehen\r\n        this.reduceSize(sortedVertices, maxSize);\r\n    }\r\n\r\n    private setPositionGap(vertices: Vertex[]) {\r\n        for (let i = 1; i < vertices.length; i++)\r\n            vertices[i].position = Math.max(\r\n                vertices[i].position,\r\n                vertices[i - 1].position + 1\r\n            );\r\n    }\r\n\r\n    private reduceSize(vertices: Vertex[], maxSize: number) {\r\n        if (vertices[vertices.length - 1].position > maxSize) {\r\n            vertices[vertices.length - 1].position = maxSize;\r\n            for (let i = vertices.length - 2; i >= 0; i--)\r\n                vertices[i].position = Math.min(\r\n                    vertices[i].position,\r\n                    vertices[i + 1].position - 1\r\n                );\r\n        }\r\n    }\r\n\r\n    private countCrossings(graph: Graph): number {\r\n        let count = 0;\r\n        for (let i = 1; i < graph.getMaxLayer(); i++) {\r\n            let edges: Edge[] = graph.edges.filter(\r\n                edge => edge.startVertex.layer === i\r\n            );\r\n\r\n            edges.forEach(edge =>\r\n                edges.forEach(e => {\r\n                    if (\r\n                        (e.startVertex.position < edge.startVertex.position &&\r\n                            e.endVertex.position > edge.endVertex.position) ||\r\n                        (e.startVertex.position > edge.startVertex.position &&\r\n                            e.endVertex.position < edge.endVertex.position)\r\n                    )\r\n                        count++;\r\n                })\r\n            );\r\n        }\r\n        return count;\r\n    }\r\n\r\n    private correctEdgeDirection(edges: Edge[]): void {\r\n        edges.forEach(edge => {\r\n            if (edge.isReversed) edge.reverse();\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Edge } from 'src/app/classes/directly-follows-graph/edge';\r\nimport { Graph } from 'src/app/classes/directly-follows-graph/graph';\r\nimport { Vertex } from 'src/app/classes/directly-follows-graph/vertex';\r\nimport { DirectlyFollowsGraphService } from './display.service';\r\nimport { SvgService as ValueChainSvgService } from '../../common/svg-service/svg.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class SvgService {\r\n    private _rectWidth: number = 150;\r\n    private _rectHeight: number = 40;\r\n    private _offsetXValue: number = this._rectWidth * 1.5;\r\n    private _offsetYValue: number = this._rectHeight * 3;\r\n    private maxActivityCountVertex = 0;\r\n    private minValue: number = 50;\r\n    private _svgElements: SVGElement[] = [];\r\n    private font: string = '15px sans-Serif';\r\n    private maxFontWidth: number = 130;\r\n\r\n    public get rectWidth(): number {\r\n        return this._rectWidth;\r\n    }\r\n\r\n    public get rectHeight(): number {\r\n        return this._rectHeight;\r\n    }\r\n\r\n    public get offsetXValue(): number {\r\n        return this._offsetXValue;\r\n    }\r\n\r\n    public get offsetYValue(): number {\r\n        return this._offsetYValue;\r\n    }\r\n\r\n    public get svgElements(): SVGElement[] {\r\n        return this._svgElements;\r\n    }\r\n\r\n    constructor(private _displayService: DirectlyFollowsGraphService) {}\r\n\r\n    public createSvgElements(graph: Graph): SVGElement[] {\r\n        this._svgElements = [];\r\n\r\n        this.maxActivityCountVertex = graph.getMaxActivityCountVertex();\r\n\r\n        this._svgElements.push(this.createGradients(graph));\r\n\r\n        graph.vertices.forEach(vertex => {\r\n            let container = this.createContainer(vertex);\r\n\r\n            let box = this.createRect(vertex);\r\n            //Mache Elemente zu Kindern, damit sie gemeinsam manipuliert werden können.\r\n            container.append(box);\r\n\r\n            if (!vertex.isDummy) {\r\n                let text = this.createTextForGraph(vertex);\r\n                container.append(text);\r\n            } else if (\r\n                vertex.layer !== 1 &&\r\n                vertex.layer !== graph.getMaxLayer()\r\n            ) {\r\n                let path = this.createPathForDummyVertex(vertex);\r\n                container.append(path);\r\n            }\r\n\r\n            vertex.svgElement = container;\r\n            this._svgElements.push(container);\r\n        });\r\n\r\n        //Pfeilspitze für Kanten erstellen\r\n        let arrow = this.createArrow();\r\n        this._svgElements.push(arrow);\r\n\r\n        graph.edges.forEach(edge => {\r\n            let path = this.createPath(edge, graph);\r\n            if (!edge.endVertex.isDummy || edge.endVertex.isEnd) {\r\n                let text = this.createTextForEdge(edge);\r\n                this._svgElements.push(text);\r\n            }\r\n            this._svgElements.push(path);\r\n        });\r\n\r\n        return this._svgElements;\r\n    }\r\n\r\n    private createGradients(graph: Graph): SVGElement {\r\n        let defs = this.createSvgElement('defs');\r\n\r\n        graph.vertices.forEach(vertex => {\r\n            if (!vertex.isDummy) {\r\n                let linearGradient = this.createSvgElement('linearGradient');\r\n                linearGradient.setAttribute(\r\n                    'id',\r\n                    vertex.activityName + 'Gradient'\r\n                );\r\n                linearGradient.setAttribute('x1', '0%');\r\n                linearGradient.setAttribute('y1', '0%');\r\n                linearGradient.setAttribute('x2', '100%');\r\n                linearGradient.setAttribute('y2', '0%');\r\n\r\n                let color = ValueChainSvgService.activityColorMap.get(\r\n                    vertex.activityName\r\n                );\r\n\r\n                //Anpassung von Durchlässigkeit und Offset, um weniger häufige Knoten abzugrenzen\r\n                let opacity =\r\n                    vertex.activityCount / this.maxActivityCountVertex;\r\n\r\n                let offset = 33 - 33 * opacity;\r\n\r\n                let stop1 = this.createStop(offset, opacity, color);\r\n\r\n                let stop2 = this.createStop(50, 1, color);\r\n\r\n                offset = 67 + 33 * opacity;\r\n                let stop3 = this.createStop(offset, opacity, color);\r\n\r\n                linearGradient.append(stop1);\r\n                linearGradient.append(stop2);\r\n                linearGradient.append(stop3);\r\n\r\n                defs.append(linearGradient);\r\n            }\r\n        });\r\n\r\n        return defs;\r\n    }\r\n\r\n    private createStop(\r\n        offset: number,\r\n        opacity: number,\r\n        color: String | undefined\r\n    ): SVGElement {\r\n        let stop = this.createSvgElement('stop');\r\n        stop.setAttribute('offset', offset.toString() + '%');\r\n        if (color != undefined)\r\n            stop.setAttribute('stop-color', color.toString());\r\n        stop.setAttribute('stop-opacity', opacity.toString());\r\n\r\n        return stop;\r\n    }\r\n\r\n    private createContainer(vertex: Vertex): SVGElement {\r\n        let svg = this.createSvgElement('svg');\r\n\r\n        let x: number = this.minValue;\r\n        let y: number = this.minValue;\r\n\r\n        //Setze Abstand zwischen Positionen und Ebenen basierend auf der Ausrichtung\r\n        if (this._displayService.verticalDirection) {\r\n            x += this.offsetXValue * (vertex.position - 1);\r\n            y += this.offsetYValue * (vertex.layer - 1);\r\n            if (vertex.isStart) y += this.rectHeight / 2;\r\n            if (vertex.isStart || vertex.isEnd) x += this.rectWidth / 4;\r\n        } else {\r\n            x += this.offsetXValue * (vertex.layer - 1);\r\n            y += this.offsetYValue * (vertex.position - 1);\r\n            if (vertex.isStart) x += this.rectWidth / 2;\r\n            if (vertex.isStart || vertex.isEnd) y += this.rectHeight / 4;\r\n        }\r\n\r\n        svg.setAttribute('name', vertex.activityName.toString());\r\n        svg.setAttribute('x', x.toString());\r\n        svg.setAttribute('y', y.toString());\r\n\r\n        let width: number = this.rectWidth;\r\n        let height: number = this.rectHeight;\r\n\r\n        if (vertex.isStart || vertex.isEnd) {\r\n            height /= 2;\r\n            width /= 2;\r\n        }\r\n\r\n        svg.setAttribute('width', width.toString());\r\n        svg.setAttribute('height', height.toString());\r\n\r\n        return svg;\r\n    }\r\n\r\n    private createPathForDummyVertex(vertex: Vertex): SVGElement {\r\n        let path = this.createSvgElement('path');\r\n\r\n        let startX: number = 0;\r\n        let startY: number = 0;\r\n        let endX: number = 0;\r\n        let endY: number = 0;\r\n\r\n        if (this._displayService.verticalDirection) {\r\n            startX += this.rectWidth / 2;\r\n            endX += this.rectWidth / 2;\r\n            endY += this.rectHeight;\r\n        } else {\r\n            startY += this.rectHeight / 2;\r\n            endX += this.rectWidth;\r\n            endY += this.rectHeight / 2;\r\n        }\r\n\r\n        let coordinates =\r\n            'M ' + startX + ' ' + startY + ' L ' + endX + ' ' + endY;\r\n\r\n        path.setAttribute('d', coordinates);\r\n        path.setAttribute('stroke-width', '1');\r\n        path.setAttribute('stroke', 'black');\r\n        path.setAttribute('fill', 'none');\r\n        path.setAttribute('pointer-events', 'none');\r\n\r\n        return path;\r\n    }\r\n\r\n    private createRect(vertex: Vertex): SVGElement {\r\n        let rect = this.createSvgElement('rect');\r\n\r\n        rect.setAttribute('name', vertex.activityName.toString());\r\n        rect.setAttribute('rx', '15');\r\n        rect.setAttribute('ry', '15');\r\n\r\n        let width: number = this.rectWidth;\r\n        let height: number = this.rectHeight;\r\n\r\n        if (!vertex.isDummy) {\r\n            rect.setAttribute(\r\n                'fill',\r\n                \"url('#\" + vertex.activityName + \"Gradient')\"\r\n            );\r\n            rect.setAttribute('fill-opacity', '1');\r\n            rect.setAttribute('stroke-width', '2');\r\n            rect.setAttribute('stroke', 'black');\r\n        } else if (vertex.isStart || vertex.isEnd) {\r\n            if (vertex.isStart || vertex.isEnd) {\r\n                width /= 2;\r\n                height /= 2;\r\n            }\r\n\r\n            rect.setAttribute('fill', 'rgb(125,125,125)');\r\n            rect.setAttribute('fill-opacity', '1');\r\n            rect.setAttribute('stroke-width', '2');\r\n            rect.setAttribute('stroke', 'black');\r\n        } else {\r\n            rect.setAttribute('fill-opacity', '0');\r\n        }\r\n\r\n        rect.setAttribute('width', width.toString());\r\n        rect.setAttribute('height', height.toString());\r\n\r\n        return rect;\r\n    }\r\n\r\n    private createTextForGraph(vertex: Vertex): SVGElement {\r\n        let text = this.createSvgElement('text');\r\n\r\n        text.setAttribute('x', `50%`);\r\n        text.setAttribute('y', `50%`);\r\n        text.setAttribute('text-anchor', `middle`);\r\n        text.setAttribute('dominant-baseline', `middle`);\r\n        text.setAttribute('font-family', 'sans-serif');\r\n        text.appendChild(\r\n            this.createTspanForText(vertex.activityName.toString(), -0.2)\r\n        );\r\n        text.appendChild(\r\n            this.createTspanForText(vertex.activityCount.toString(), 0.5)\r\n        );\r\n        text.setAttribute('pointer-events', 'none');\r\n\r\n        return text;\r\n    }\r\n\r\n    private createTspanForText(text: string, offset: number): SVGElement {\r\n        let tspan = this.createSvgElement('tspan');\r\n\r\n        tspan.setAttribute('x', (this.rectWidth / 2).toString());\r\n        tspan.setAttribute('dy', (this.rectHeight * offset).toString());\r\n        tspan.setAttribute('width', `100%`);\r\n        tspan.setAttribute('height', `100%`);\r\n        tspan.setAttribute('text-anchor', `middle`);\r\n        tspan.setAttribute('dominant-baseline', `middle`);\r\n        tspan.setAttribute('pointer-events', 'none');\r\n\r\n        tspan.textContent = this.getSubString(text);\r\n\r\n        return tspan;\r\n    }\r\n\r\n    private getSubString(text: string): string {\r\n        for (let i = 0; i <= text.length; i++) {\r\n            let length = this.getStringWidth(text.substring(0, i));\r\n            if (length > this.maxFontWidth) {\r\n                return text.substring(0, i - 2) + '...';\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    private getStringWidth(text: string): number {\r\n        var canvas = document.createElement('canvas');\r\n        canvas.setAttribute('width', '100%');\r\n        canvas.setAttribute('height', '380px');\r\n        var ctx = canvas.getContext('2d');\r\n        ctx!.font = this.font;\r\n        return ctx!.measureText(text.toString()).width;\r\n    }\r\n\r\n    private createArrow(): SVGElement {\r\n        let defs = this.createSvgElement('defs');\r\n        defs.append(this.createMarker());\r\n\r\n        return defs;\r\n    }\r\n\r\n    private createMarker(): SVGElement {\r\n        let marker = this.createSvgElement('marker');\r\n\r\n        marker.setAttribute('viewBox', '0 0 10 10');\r\n        marker.setAttribute('id', 'marker');\r\n        marker.setAttribute('refX', '10');\r\n        marker.setAttribute('refY', '5');\r\n        marker.setAttribute('markerUnits', 'strokeWidth');\r\n        marker.setAttribute('markerWidth', '10');\r\n        marker.setAttribute('markerHeight', '10');\r\n        marker.setAttribute('orient', 'auto');\r\n\r\n        let polygon = this.createSvgElement('polygon');\r\n        polygon.setAttribute('points', '0 0, 10 5, 0 10');\r\n\r\n        marker.append(polygon);\r\n\r\n        return marker;\r\n    }\r\n\r\n    private createPath(edge: Edge, graph: Graph): SVGElement {\r\n        let path = this.createSvgElement('path');\r\n\r\n        let id =\r\n            'path' +\r\n            edge.startVertex.activityName +\r\n            edge.endVertex.activityName;\r\n        path.setAttribute('id', id);\r\n        path.setAttribute('d', this.setPathCoordinates(edge, graph));\r\n        path.setAttribute('stroke-width', '1');\r\n        path.setAttribute('stroke', 'black');\r\n        path.setAttribute('fill', 'none');\r\n        if (!edge.endVertex.isDummy || edge.endVertex.isEnd)\r\n            path.setAttribute('marker-end', 'url(#marker)');\r\n        path.setAttribute('pointer-events', 'none');\r\n\r\n        edge.pathSvgElement = path;\r\n\r\n        return path;\r\n    }\r\n\r\n    private setPathCoordinates(edge: Edge, graph: Graph) {\r\n        let startX: number = 0;\r\n        let startY: number = 0;\r\n        let endX: number = 0;\r\n        let endY: number = 0;\r\n        let startXOffset: number = 0;\r\n        let endXOffset: number = 0;\r\n        let startYOffset: number = 0;\r\n        let endYOffset: number = 0;\r\n\r\n        //Setze Koordinaten basierend auf Ausrichtung und den Ebenen\r\n        //Kante verläuft von niedriger Ebene zu hoher Ebene\r\n        if (edge.startVertex.layer < edge.endVertex.layer) {\r\n            let upperLayerEdges = edge.startVertex.getUpperLayerEdges(\r\n                graph.edges\r\n            );\r\n\r\n            let lowerLayerEdges = edge.endVertex.getLowerLayerEdges(\r\n                graph.edges\r\n            );\r\n\r\n            if (this._displayService.verticalDirection) {\r\n                startXOffset =\r\n                    edge.startVertex.calculateEdgePosition(\r\n                        edge,\r\n                        upperLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (upperLayerEdges.length + 1);\r\n                startXOffset *= this.rectWidth;\r\n\r\n                startYOffset = this.rectHeight;\r\n\r\n                endXOffset =\r\n                    edge.endVertex.calculateEdgePosition(\r\n                        edge,\r\n                        lowerLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (lowerLayerEdges.length + 1);\r\n                endXOffset *= this.rectWidth;\r\n            } else {\r\n                startXOffset = this.rectWidth;\r\n\r\n                startYOffset =\r\n                    edge.startVertex.calculateEdgePosition(\r\n                        edge,\r\n                        upperLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (upperLayerEdges.length + 1);\r\n                startYOffset *= this.rectHeight;\r\n\r\n                endYOffset =\r\n                    edge.endVertex.calculateEdgePosition(\r\n                        edge,\r\n                        lowerLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (lowerLayerEdges.length + 1);\r\n                endYOffset *= this.rectHeight;\r\n            }\r\n            //Kante verläuft von hoher Ebene zu niedriger Ebene\r\n        } else if (edge.startVertex.layer > edge.endVertex.layer) {\r\n            let lowerLayerEdges = edge.startVertex.getLowerLayerEdges(\r\n                graph.edges\r\n            );\r\n\r\n            let upperLayerEdges = edge.endVertex.getUpperLayerEdges(\r\n                graph.edges\r\n            );\r\n\r\n            if (this._displayService.verticalDirection) {\r\n                startXOffset =\r\n                    edge.startVertex.calculateEdgePosition(\r\n                        edge,\r\n                        lowerLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (lowerLayerEdges.length + 1);\r\n\r\n                startXOffset *= this.rectWidth;\r\n\r\n                endXOffset =\r\n                    edge.endVertex.calculateEdgePosition(\r\n                        edge,\r\n                        upperLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (upperLayerEdges.length + 1);\r\n                endXOffset *= this.rectWidth;\r\n\r\n                endYOffset = this.rectHeight;\r\n            } else {\r\n                startYOffset =\r\n                    edge.startVertex.calculateEdgePosition(\r\n                        edge,\r\n                        lowerLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (lowerLayerEdges.length + 1);\r\n                startYOffset *= this.rectHeight;\r\n\r\n                endXOffset = this.rectWidth;\r\n\r\n                endYOffset =\r\n                    edge.endVertex.calculateEdgePosition(\r\n                        edge,\r\n                        upperLayerEdges,\r\n                        this._displayService.verticalDirection\r\n                    ) /\r\n                    (upperLayerEdges.length + 1);\r\n                endYOffset *= this.rectHeight;\r\n            }\r\n            //Start- und Endknoten der Kante sind gleich\r\n        } else {\r\n            if (this._displayService.verticalDirection) {\r\n                startXOffset = this._rectWidth;\r\n                endXOffset = this.rectWidth;\r\n                startYOffset = this._rectHeight * 0.75;\r\n                endYOffset = this.rectHeight * 0.25;\r\n            } else {\r\n                startXOffset = this._rectWidth * 0.75;\r\n                startYOffset = this._rectHeight;\r\n                endXOffset = this.rectWidth * 0.25;\r\n                endYOffset = this.rectHeight;\r\n            }\r\n        }\r\n\r\n        if (edge.startVertex.isStart) {\r\n            if (this._displayService.verticalDirection) {\r\n                startXOffset -= this.rectWidth / 4;\r\n                startYOffset -= this.rectHeight / 2;\r\n            } else {\r\n                startXOffset -= this.rectWidth / 2;\r\n                startYOffset -= this.rectHeight / 4;\r\n            }\r\n        }\r\n\r\n        if (edge.endVertex.isEnd)\r\n            if (this._displayService.verticalDirection) {\r\n                endXOffset -= this.rectWidth / 4;\r\n            } else {\r\n                endYOffset -= this.rectHeight / 4;\r\n            }\r\n\r\n        startX = edge.startVertex.getSvgElementXValue() + startXOffset;\r\n        endX = edge.endVertex.getSvgElementXValue() + endXOffset;\r\n        startY = edge.startVertex.getSvgElementYValue() + startYOffset;\r\n        endY = edge.endVertex.getSvgElementYValue() + endYOffset;\r\n\r\n        let coordinates = 'M ' + startX + ' ' + startY;\r\n\r\n        if (this._displayService.verticalDirection && edge.isTargetingSelf())\r\n            coordinates +=\r\n                ' Q ' +\r\n                (startX + 25) +\r\n                ' ' +\r\n                (startY + endY) / 2 +\r\n                ' ' +\r\n                endX +\r\n                ' ' +\r\n                endY;\r\n        else if (\r\n            !this._displayService.verticalDirection &&\r\n            edge.isTargetingSelf()\r\n        )\r\n            coordinates +=\r\n                ' Q ' +\r\n                (startX + endX) / 2 +\r\n                ' ' +\r\n                (startY + 25) +\r\n                ' ' +\r\n                endX +\r\n                ' ' +\r\n                endY;\r\n        else coordinates += ' L ' + endX + ' ' + endY;\r\n\r\n        return coordinates;\r\n    }\r\n\r\n    private createTextForEdge(edge: Edge): SVGElement {\r\n        let text = this.createSvgElement('text');\r\n\r\n        let name = edge.pathSvgElement?.getAttribute('name') + 'Text';\r\n        text.setAttribute('name', name);\r\n\r\n        this.setTextCoordinates(edge, text);\r\n\r\n        text.setAttribute('text-anchor', `middle`);\r\n        text.setAttribute('dominant-baseline', `middle`);\r\n        text.setAttribute('font', 'bold 30px sans-serif');\r\n        text.textContent = edge.activityCount.toString();\r\n        text.setAttribute('pointer-events', 'none');\r\n\r\n        edge.textSvgElement = text;\r\n\r\n        return text;\r\n    }\r\n\r\n    private setTextCoordinates(edge: Edge, text: SVGElement): void {\r\n        let d = edge.pathSvgElement?.getAttribute('d')?.split(' ');\r\n        if (d !== undefined) {\r\n            let startX: number = +d[1];\r\n            let endX: number = +d[d.length - 2];\r\n\r\n            let startY: number = +d[2];\r\n            let endY: number = +d[d.length - 1];\r\n\r\n            let xOffset: number = 4.5;\r\n            let yOffset: number = -4.5;\r\n\r\n            if (edge.startVertex === edge.endVertex) {\r\n                if (!this._displayService.verticalDirection) {\r\n                    xOffset = 0;\r\n                    yOffset = 25;\r\n                } else {\r\n                    xOffset = 27.5;\r\n                    yOffset = 0;\r\n                }\r\n            } else if (\r\n                (startY < endY && startX > endX) ||\r\n                (startY > endY && startX < endX)\r\n            )\r\n                xOffset *= -1;\r\n\r\n            let x = 0.4 * startX + 0.6 * endX + xOffset;\r\n            text.setAttribute('x', x.toString());\r\n\r\n            let y = 0.4 * startY + 0.6 * endY + yOffset;\r\n            text.setAttribute('y', y.toString());\r\n\r\n            let transformOrigin = x.toString() + 'px ' + y.toString() + 'px';\r\n            text.setAttribute('transform-origin', transformOrigin);\r\n\r\n            let rotation: number = 0;\r\n\r\n            if (this._displayService.verticalDirection) {\r\n                if (edge.startVertex !== edge.endVertex) rotation = 90;\r\n            }\r\n\r\n            if (startX !== endX && startY !== endY)\r\n                rotation =\r\n                    (360 / (2 * Math.PI)) *\r\n                    Math.atan(((endY - startY) ^ 2) / ((endX - startX) ^ 2));\r\n            text.setAttribute('transform', 'rotate(' + rotation + ')');\r\n        }\r\n    }\r\n\r\n    private createSvgElement(name: string): SVGElement {\r\n        return document.createElementNS('http://www.w3.org/2000/svg', name);\r\n    }\r\n\r\n    public updateLayer(vertex: Vertex, graph: Graph): void {\r\n        let positionValue: number;\r\n        let offsetValue: number;\r\n        let axis: string;\r\n        let rectSize;\r\n\r\n        if (this._displayService.verticalDirection) {\r\n            positionValue = vertex.getSvgElementXValue();\r\n            offsetValue = this.offsetXValue;\r\n            axis = 'x';\r\n            rectSize = this.rectWidth;\r\n        } else {\r\n            positionValue = vertex.getSvgElementYValue();\r\n            offsetValue = this.offsetYValue;\r\n            axis = 'y';\r\n            rectSize = this.rectHeight;\r\n        }\r\n\r\n        if (positionValue < this.minValue)\r\n            vertex.svgElement?.setAttribute(axis, this.minValue.toString());\r\n\r\n        let vertices: Vertex[] = graph.getVerticesSortedByPosition(\r\n            vertex.layer\r\n        );\r\n\r\n        let index: number = vertices.findIndex(v => v === vertex);\r\n\r\n        //Knoten wird nach links/oben geschoben\r\n        if (index > 0) {\r\n            let previousPositionValue: number = this._displayService\r\n                .verticalDirection\r\n                ? vertices[index - 1].getSvgElementXValue()\r\n                : vertices[index - 1].getSvgElementYValue();\r\n\r\n            if (previousPositionValue + rectSize > positionValue) {\r\n                let newPositionValue: number = Math.max(\r\n                    previousPositionValue + offsetValue,\r\n                    positionValue + rectSize\r\n                );\r\n\r\n                vertices[index - 1].svgElement?.setAttribute(\r\n                    axis,\r\n                    newPositionValue.toString()\r\n                );\r\n\r\n                vertices[index - 1].position =\r\n                    (newPositionValue - this.minValue) / offsetValue + 1;\r\n            }\r\n        }\r\n\r\n        //Knoten wird nach rechts/unten geschoben\r\n        if (index < vertices.length - 1) {\r\n            let nextPositionValue: number = this._displayService\r\n                .verticalDirection\r\n                ? vertices[index + 1].getSvgElementXValue()\r\n                : vertices[index + 1].getSvgElementYValue();\r\n\r\n            if (nextPositionValue - rectSize < positionValue) {\r\n                let newPositionValue: number;\r\n\r\n                //Position abhängig davon setzen, ob genügend Platz ist\r\n                if (positionValue / rectSize > index + 1)\r\n                    newPositionValue = Math.min(\r\n                        nextPositionValue - offsetValue,\r\n                        positionValue - rectSize\r\n                    );\r\n                else newPositionValue = positionValue + offsetValue;\r\n\r\n                newPositionValue = Math.max(this.minValue, newPositionValue);\r\n                vertices[index + 1].svgElement?.setAttribute(\r\n                    axis,\r\n                    newPositionValue.toString()\r\n                );\r\n\r\n                vertices[index + 1].position =\r\n                    (newPositionValue - this.minValue) / this.offsetXValue + 1;\r\n            }\r\n        }\r\n\r\n        vertex.position = (positionValue - this.minValue) / offsetValue + 1;\r\n\r\n        vertices = graph.getVerticesSortedByPosition(vertex.layer);\r\n\r\n        index = vertices.findIndex(v => v === vertex);\r\n\r\n        this.updateOffset(vertices, offsetValue, rectSize, axis, index);\r\n\r\n        this.updateEdges(graph, vertex.layer);\r\n    }\r\n\r\n    private updateOffset(\r\n        vertices: Vertex[],\r\n        offsetValue: number,\r\n        rectSize: number,\r\n        axis: string,\r\n        index: number\r\n    ): void {\r\n        for (let i = index - 1; i > 0; i--) {\r\n            let currentPositionValue: number = this._displayService\r\n                .verticalDirection\r\n                ? vertices[i].getSvgElementXValue()\r\n                : vertices[i].getSvgElementYValue();\r\n\r\n            let previousPositionValue: number = this._displayService\r\n                .verticalDirection\r\n                ? vertices[i - 1].getSvgElementXValue()\r\n                : vertices[i - 1].getSvgElementYValue();\r\n\r\n            if (previousPositionValue + rectSize > currentPositionValue) {\r\n                let newPositionValue: number = currentPositionValue - rectSize;\r\n\r\n                vertices[i - 1].svgElement?.setAttribute(\r\n                    axis,\r\n                    newPositionValue.toString()\r\n                );\r\n\r\n                previousPositionValue = this._displayService.verticalDirection\r\n                    ? vertices[i - 1].getSvgElementXValue()\r\n                    : vertices[i - 1].getSvgElementYValue();\r\n\r\n                vertices[i - 1].position =\r\n                    (previousPositionValue - this.minValue) / offsetValue + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = index + 1; i < vertices.length - 1; i++) {\r\n            let currentPositionValue: number = this._displayService\r\n                .verticalDirection\r\n                ? vertices[i].getSvgElementXValue()\r\n                : vertices[i].getSvgElementYValue();\r\n\r\n            let nextPositionValue: number = this._displayService\r\n                .verticalDirection\r\n                ? vertices[i + 1].getSvgElementXValue()\r\n                : vertices[i + 1].getSvgElementYValue();\r\n\r\n            if (currentPositionValue + rectSize > nextPositionValue) {\r\n                let newPositionValue: number = currentPositionValue + rectSize;\r\n\r\n                vertices[i + 1].svgElement?.setAttribute(\r\n                    axis,\r\n                    newPositionValue.toString()\r\n                );\r\n\r\n                nextPositionValue = this._displayService.verticalDirection\r\n                    ? vertices[i + 1].getSvgElementXValue()\r\n                    : vertices[i + 1].getSvgElementYValue();\r\n\r\n                vertices[i + 1].position =\r\n                    (nextPositionValue - this.minValue) / offsetValue + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateEdges(graph: Graph, layer: number): void {\r\n        let edges = graph.getEdgesByLayer(layer);\r\n\r\n        edges.forEach(edge => {\r\n            edge.pathSvgElement?.setAttribute(\r\n                'd',\r\n                this.setPathCoordinates(edge, graph)\r\n            );\r\n            if (!edge.endVertex.isDummy || edge.endVertex.isEnd) {\r\n                let text = edge.textSvgElement;\r\n                if (text !== undefined && text !== null)\r\n                    this.setTextCoordinates(edge, text);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LoadingService {\r\n    private _loading = new BehaviorSubject<boolean>(false);\r\n    public readonly loading$ = this._loading.asObservable();\r\n\r\n    constructor() {}\r\n\r\n    show() {\r\n        this._loading.next(true);\r\n    }\r\n\r\n    hide() {\r\n        this._loading.next(false);\r\n    }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Diagram } from '../../../../classes/diagram/diagram';\r\nimport { GraphTrace } from '../../../../classes/diagram/GraphTrace';\r\nimport { Element, ElementType } from '../../../../classes/diagram/element';\r\nimport { Trace } from '../../../../classes/EventLog/trace';\r\nimport { LogInformationViewComponent } from '../../../../components/log-information-view/log-information-view.component';\r\nimport { DisplayServiceBase } from '../../../common/display-service/display-base.service';\r\n\r\n@Injectable({\r\n    providedIn: LogInformationViewComponent,\r\n})\r\nexport class DisplayService extends DisplayServiceBase implements OnDestroy {\r\n    private convertTraceCaseToDiagram(traceCase: Trace): Diagram {\r\n        let caseId = traceCase.caseId;\r\n        let borderAndCaseIdentifierElement = new Element(ElementType.text, () =>\r\n            this.traceCaseSelectionService.selectTraceCaseIds([caseId])\r\n        );\r\n        let graphTrace = new GraphTrace(\r\n            this.getEventGraphics(traceCase, [caseId]),\r\n            1,\r\n            [borderAndCaseIdentifierElement],\r\n            [caseId]\r\n        );\r\n\r\n        return new Diagram([graphTrace]);\r\n    }\r\n\r\n    public displayLogTraceCase(traceCase: Trace) {\r\n        let next = this.convertTraceCaseToDiagram(traceCase);\r\n        this._diagram$.next(next);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Diagram } from '../../../../classes/diagram/diagram';\r\nimport { GraphTrace } from '../../../../classes/diagram/GraphTrace';\r\nimport { EventLog } from '../../../../classes/EventLog/eventlog';\r\nimport { Element, ElementType } from '../../../../classes/diagram/element';\r\nimport { DisplayServiceBase } from '../../../common/display-service/display-base.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DisplayService extends DisplayServiceBase {\r\n    private convertEventLogToDiagram(log: EventLog): Diagram {\r\n        let traces = log.sortedTraces;\r\n        let graphTraces = new Array<GraphTrace>();\r\n        traces.forEach(traces => {\r\n            let caseIds = traces.map(val => {\r\n                return val.caseId;\r\n            });\r\n            let traceCount = new Element(ElementType.text, () =>\r\n                this.traceCaseSelectionService.selectTraceCaseIds(caseIds)\r\n            );\r\n            let graphTrace = new GraphTrace(\r\n                this.getEventGraphics(traces[0], caseIds),\r\n                traces.length,\r\n                [traceCount],\r\n                caseIds\r\n            );\r\n            graphTraces.push(graphTrace);\r\n        });\r\n\r\n        return new Diagram(graphTraces);\r\n    }\r\n\r\n    public displayEventLog(log: EventLog) {\r\n        let net = this.convertEventLogToDiagram(log);\r\n        this._diagram$.next(net);\r\n        return net;\r\n    }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { SvgService } from '../../common/svg-service/svg.service';\r\nimport { EventLog } from '../../../classes/EventLog/eventlog';\r\nimport { DisplayService } from './display-service/display.service';\r\nimport { LayoutService } from '../../common/layout-service/layout.service';\r\nimport { TraceCaseSelectionService } from '../../common/trace-case-selection-service/trace-case-selection.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ValueChainControllerService {\r\n    _elements$: BehaviorSubject<Array<SVGElement>>;\r\n    widthPx: number = 1080;\r\n    heightPx: number = 390;\r\n\r\n    constructor(\r\n        private _displayService: DisplayService,\r\n        @Inject(LayoutService.VALUE_CHAIN_INSTANCE)\r\n        private _layoutService: LayoutService,\r\n        @Inject(SvgService.VALUE_CHAIN_INSTANCE)\r\n        private _svgService: SvgService,\r\n        private _traceCaseSelectionService: TraceCaseSelectionService\r\n    ) {\r\n        this._elements$ = new BehaviorSubject(new Array<SVGElement>());\r\n    }\r\n\r\n    public updateValueChain(log: EventLog) {\r\n        let diagram = this._displayService.displayEventLog(log);\r\n        [this.widthPx, this.heightPx] = this._layoutService.layout(\r\n            this._displayService.diagram\r\n        );\r\n        const elements = this._svgService.createSvgElements(\r\n            diagram,\r\n            this._traceCaseSelectionService.selectedTraceCaseIds,\r\n            false\r\n        );\r\n        this._elements$.next(elements);\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n"],"names":["FormControl","LogParserService","DisplayService","debounceTime","DirectlyFollowsGraphService","EventlogDataService","XesParserService","LogService","DrawingAreaComponent","TraceCaseSelectionService","LoadingService","ValueChainControllerService","EventLog","XesParser","TypedJSON","LogParser","AppComponent","constructor","_logParserService","_xesParserService","_displayService","_valueChainControllerService","_traceCaseSelectionService","_logService","_directlyFollowsGraphService","_eventlogDataService","loadingSpinner","textareaFc","_sub","valueChanges","pipe","subscribe","val","processSourceChange","_subSelectedTraces","selectedTraceCaseIds$","selectedTraceCaseIds","_selectedTraceCaseIds","updateViews","setValue","logExampleValue","ngOnDestroy","unsubscribe","handleKeyboardEvent","event","activeElement","document","inputs","indexOf","tagName","toLowerCase","key","selectTraceCaseIds","newSource","result","parse","undefined","eventLog","e","PARSING_ERROR","alert","processImport","fileExtension","fileContent","includes","processLogImport","processXesImport","show","parseLogFile","then","updateTextarea","catch","reason","message","finally","hide","parseXesFile","generate","Promise","resolve","reject","Worker","worker","URL","import","meta","url","onmessage","data","serializer","onerror","preventDefault","postMessage","emitUpdateEvent","emitEvent","getTextareaValue","value","updateValueChain","displayDirectlyFollowsGraph","updateFilter","filter","i0","selectors","viewQuery","ctx","ElementRef","EventEmitter","ChangeViewButtonComponent","ctx_r4","loader","loading$","ngAfterContentChecked","drawingArea","canvasWidth","_a","nativeElement","clientWidth","switchDirection","changeView","nextView","valueChainView","valueChainHidden","directlyFollowsGraphHidden","logInformationHidden","directlyFollowsGraphView","logInformationView","applyFilter","FilterArgument","changeFilter","filterChanged","emit","clickDrawArea"],"sourceRoot":"webpack:///"}