{"version":3,"file":"src_app_workers_log-parser_worker_ts.js","mappings":"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UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA;;;;;WCJA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WCZA;;;;;WCAA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["./src/app/classes/parser/logParser.ts","./src/app/workers/log-parser.worker.ts","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/ensure chunk","webpack/runtime/get javascript chunk filename","webpack/runtime/get mini-css chunk filename","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/trusted types policy","webpack/runtime/trusted types script url","webpack/runtime/publicPath","webpack/runtime/importScripts chunk loading","webpack/runtime/startup chunk dependencies","webpack/before-startup","webpack/startup","webpack/after-startup"],"sourcesContent":["import { EventLog } from '../EventLog/eventlog';\r\nimport { Event } from '../EventLog/event';\r\nimport { Trace } from '../EventLog/trace';\r\nimport {\r\n    BooleanAttribute,\r\n    DateAttribute,\r\n    EventLogAttribute,\r\n    FloatAttribute,\r\n    IntAttribute,\r\n    StringAttribute,\r\n} from '../EventLog/eventlogattribute';\r\n\r\nexport class LogParser {\r\n    public static PARSING_ERROR = new Error(\r\n        'given .type log string can not be parsed'\r\n    );\r\n\r\n    private readonly _undefinedValue = \"''\";\r\n\r\n    private readonly _typeLogElement = '.type log';\r\n    private readonly _attributesElement = '.attributes';\r\n    private readonly _eventsElement = '.events';\r\n\r\n    private readonly _caseIdElement = 'case-id';\r\n    private readonly _activityElement = 'concept:name';\r\n    private readonly _escapeString = \"'\";\r\n\r\n    constructor() {}\r\n\r\n    /**\r\n     * Liest einen String im .type log Format ein, das von Robin Bergenthum und Jakub Kovar definiert wurde und wandelt es in die\r\n     * intern verwendete ReprÃ¤sentation als {@link EventLog} um\r\n     *\r\n     * @param text String im .type log Format, der geparst werden soll\r\n     * @return interne Darstellung als {@link EventLog}\r\n     */\r\n    public parse(text: string): EventLog {\r\n        if (text.trim() === '') {\r\n            return new EventLog([], [], [], [], []);\r\n        }\r\n\r\n        const lines: string[] = text.split(/\\r?\\n/);\r\n\r\n        const indexLog = LogParser.indexOfTokenIfExists(\r\n            lines,\r\n            this._typeLogElement\r\n        );\r\n        const indexAttributes = LogParser.indexOfTokenIfExists(\r\n            lines,\r\n            this._attributesElement\r\n        );\r\n        const indexEvents = LogParser.indexOfTokenIfExists(\r\n            lines,\r\n            this._eventsElement\r\n        );\r\n        const max = lines.length;\r\n        const keywordIndices: number[] = [\r\n            indexLog,\r\n            indexAttributes,\r\n            indexEvents,\r\n            max,\r\n        ];\r\n\r\n        const attributesLines: string[] = lines.slice(\r\n            indexAttributes + 1,\r\n            LogParser.nextKeyword(keywordIndices, indexAttributes)\r\n        );\r\n        const headers: string[] = attributesLines.map(attribute =>\r\n            attribute.trim()\r\n        );\r\n\r\n        const eventLines: string[] = lines.slice(\r\n            indexEvents + 1,\r\n            LogParser.nextKeyword(keywordIndices, indexEvents)\r\n        );\r\n\r\n        const traces: Trace[] = this.parseTraces(headers, eventLines);\r\n        return new EventLog([], [], [], traces, []);\r\n    }\r\n\r\n    private parseTraces(headers: string[], eventLines: string[]): Trace[] {\r\n        const asTable = eventLines.map(eventLine =>\r\n            this.splitEventLineString(eventLine)\r\n        );\r\n\r\n        const dictCaseIdentifierToTrace: Map<number, Trace> = new Map();\r\n        asTable.forEach(eventLineSplit => {\r\n            if (\r\n                eventLineSplit[headers.indexOf(this._caseIdElement)] ===\r\n                    undefined ||\r\n                eventLineSplit[headers.indexOf(this._activityElement)] ===\r\n                    undefined\r\n            ) {\r\n                throw LogParser.PARSING_ERROR;\r\n            }\r\n\r\n            const caseId: number = parseInt(\r\n                eventLineSplit[headers.indexOf(this._caseIdElement)]\r\n            );\r\n            const activity: string =\r\n                eventLineSplit[headers.indexOf(this._activityElement)];\r\n\r\n            const eventLogAttributes: EventLogAttribute[] = headers\r\n                .filter(\r\n                    header =>\r\n                        ![this._caseIdElement, this._activityElement].includes(\r\n                            header\r\n                        )\r\n                )\r\n                .filter(\r\n                    header => headers.indexOf(header) < eventLineSplit.length\r\n                )\r\n                .filter(\r\n                    header =>\r\n                        eventLineSplit[headers.indexOf(header)] !==\r\n                        this._undefinedValue\r\n                )\r\n                .map(header =>\r\n                    LogParser.eventLogAttributeOf(\r\n                        header,\r\n                        eventLineSplit[headers.indexOf(header)]\r\n                    )\r\n                );\r\n\r\n            if (!dictCaseIdentifierToTrace.has(caseId)) {\r\n                dictCaseIdentifierToTrace.set(\r\n                    caseId,\r\n                    new Trace([], [], caseId)\r\n                );\r\n            }\r\n            dictCaseIdentifierToTrace\r\n                .get(caseId)\r\n                ?.events.push(new Event(eventLogAttributes, activity));\r\n        });\r\n\r\n        return Array.from(dictCaseIdentifierToTrace.values());\r\n    }\r\n\r\n    private splitEventLineString(eventLine: string): string[] {\r\n        let lineSplit = [];\r\n        while (eventLine !== '') {\r\n            let startIndex: number;\r\n            let endIndex: number | undefined;\r\n            let nextIndex: number | undefined;\r\n            if (eventLine.startsWith(this._undefinedValue)) {\r\n                lineSplit.push(this._undefinedValue);\r\n                eventLine = eventLine.slice(this._undefinedValue.length + 1);\r\n                continue;\r\n            } else if (eventLine.startsWith(this._escapeString)) {\r\n                startIndex = 1;\r\n                for (\r\n                    let actIndex = startIndex;\r\n                    actIndex < eventLine.length;\r\n                    actIndex++\r\n                ) {\r\n                    if (\r\n                        eventLine.charAt(actIndex) == this._escapeString &&\r\n                        eventLine.charAt(actIndex - 1) !== '\\\\'\r\n                    ) {\r\n                        endIndex = actIndex;\r\n                        nextIndex = endIndex + 2;\r\n                        break;\r\n                    }\r\n                }\r\n                if (endIndex === undefined || nextIndex === undefined) {\r\n                    throw LogParser.PARSING_ERROR;\r\n                }\r\n            } else {\r\n                startIndex = 0;\r\n                if (eventLine.indexOf(' ') === -1) {\r\n                    endIndex = eventLine.length;\r\n                } else {\r\n                    endIndex = eventLine.indexOf(' ');\r\n                }\r\n                nextIndex = endIndex + 1;\r\n            }\r\n            lineSplit.push(\r\n                eventLine\r\n                    .slice(startIndex, endIndex)\r\n                    .replace(new RegExp(\"\\\\\\\\'\", 'g'), \"'\")\r\n            );\r\n            eventLine = eventLine.slice(nextIndex);\r\n        }\r\n        return lineSplit;\r\n    }\r\n\r\n    private static eventLogAttributeOf(\r\n        key: string,\r\n        value: string\r\n    ): EventLogAttribute {\r\n        switch (value) {\r\n            case 'true':\r\n                return new BooleanAttribute(true, key);\r\n            case 'false':\r\n                return new BooleanAttribute(false, key);\r\n        }\r\n\r\n        if (value.includes('T') || value.includes(':') || value.includes('-')) {\r\n            const timestamp = Date.parse(value);\r\n            if (!isNaN(timestamp)) {\r\n                return new DateAttribute(new Date(timestamp), key);\r\n            }\r\n        }\r\n\r\n        if (value.includes('.') || value.includes(',')) {\r\n            const asFloat = parseFloat(value);\r\n            if (!isNaN(asFloat)) {\r\n                return new FloatAttribute(asFloat, key);\r\n            }\r\n        }\r\n\r\n        const asInt = parseInt(value);\r\n        if (!isNaN(asInt)) {\r\n            return new IntAttribute(asInt, key);\r\n        }\r\n\r\n        return new StringAttribute(value, key);\r\n    }\r\n\r\n    private static indexOfTokenIfExists(\r\n        lines: string[],\r\n        token: string\r\n    ): number {\r\n        const indexOfToken = lines.indexOf(token);\r\n        if (indexOfToken === -1) {\r\n            throw LogParser.PARSING_ERROR;\r\n        }\r\n        return indexOfToken;\r\n    }\r\n\r\n    private static nextKeyword(\r\n        keywordIndices: number[],\r\n        actKeyWord: number\r\n    ): number {\r\n        const result = Math.min(\r\n            ...keywordIndices.filter(value => value > actKeyWord)\r\n        );\r\n        if (isNaN(result)) {\r\n            throw LogParser.PARSING_ERROR;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","/// <reference lib=\"webworker\" />\r\nimport { TypedJSON } from 'typedjson';\r\nimport { EventLog } from '../classes/EventLog/eventlog';\r\nimport { LogParser } from '../classes/parser/logParser';\r\n\r\nonmessage = function (data) {\r\n    const parser = new LogParser();\r\n    const result = parser.parse(data.data);\r\n    const serializer = new TypedJSON(EventLog);\r\n    const jsonResult = serializer.stringify(result);\r\n    postMessage(jsonResult);\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"default-src_app_classes_EventLog_eventlog_ts-node_modules_typedjson_lib_esm_parser_js\"], () => (__webpack_require__(7722)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var policy;\n__webpack_require__.tt = () => {\n\t// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\n\tif (policy === undefined) {\n\t\tpolicy = {\n\t\t\tcreateScriptURL: (url) => (url)\n\t\t};\n\t\tif (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {\n\t\t\tpolicy = trustedTypes.createPolicy(\"angular#bundler\", policy);\n\t\t}\n\t}\n\treturn policy;\n};","__webpack_require__.tu = (url) => (__webpack_require__.tt().createScriptURL(url));","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_app_workers_log-parser_worker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.u(chunkId)));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkevent_logs\"] = self[\"webpackChunkevent_logs\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"default-src_app_classes_EventLog_eventlog_ts-node_modules_typedjson_lib_esm_parser_js\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":"webpack:///"}